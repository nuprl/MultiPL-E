language: go_test.go
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmplln8da1v_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, d := range v {\n            if int(d) %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        output\
    \ = append(output, fmt.Sprintf(\"%d\", count))\n    }\n    return output\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpqgytfo2y_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpqgytfo2y_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpqgytfo2y_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        count := 0\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4f75ohyf_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp4f75ohyf_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp4f75ohyf_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpa5f7bv29_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var odd_count int\n        for _, c := range s {\n            if c %\
    \ 2 == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpz968bnfy_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpz968bnfy_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpz968bnfy_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        count := 0\n        for _, c := range str {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp6c79ygmy_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp6c79ygmy_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp6c79ygmy_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      odd := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    %d\", odd))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpei59hm1x_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpei59hm1x_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpei59hm1x_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpjd7bsrs3_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpjd7bsrs3_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpjd7bsrs3_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c == '1'\
    \ || c == '3' || c == '5' || c == '7' || c == '9' {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"%d\", count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp2yx1cv4__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp2yx1cv4__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp2yx1cv4__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmplln8da1v_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, ch := range str {\n            if ch -\
    \ '0' % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpjel6lapn_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[0]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpjel6lapn_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[0 0]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpjel6lapn_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[0 0 0]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        count := 0\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4f75ohyf_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp4f75ohyf_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp4f75ohyf_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count += 1\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp1rrqosyl_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp1rrqosyl_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp1rrqosyl_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, str\
    \ := range lst {\n        count := 0\n        for _, c := range str {\n      \
    \      if c % 2 == 1 {\n                count++\n            }\n        }\n  \
    \      result[i] = fmt.Sprintf(\"%d\", count)\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpynidy2js_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpynidy2js_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpynidy2js_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      var count int\n        for _, d := range v {\n            if d % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpc6www4nt_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpc6www4nt_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpc6www4nt_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, str\
    \ := range lst {\n        count := 0\n        for _, c := range str {\n      \
    \      if c % 2 == 1 {\n                count++\n            }\n        }\n  \
    \      result[i] = fmt.Sprintf(\"%d\", count)\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpynidy2js_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpynidy2js_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpynidy2js_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        odd_count := 0\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpvmnk85w__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpvmnk85w__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpvmnk85w__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        count := 0\n        for _, c := range s {\n            if (c - '0') %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpj3ruldjr_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpj3ruldjr_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpj3ruldjr_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpa5f7bv29_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var out []string\n    for _, str := range lst {\n\
    \        var odd_count int\n        for _, c := range str {\n            if (c\
    \ - '0') % 2 == 1 {\n                odd_count++\n            }\n        }\n \
    \       out = append(out, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return out\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpzoyqjb6u_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpzoyqjb6u_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpzoyqjb6u_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmps0k4786__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        res =\
    \ append(res, fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp9cq2yybh_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        res =\
    \ append(res, fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp9cq2yybh_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"%d\", odd_count_of_string(s))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7frzoq_j_test.go:15:39: undefined: odd_count_of_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073885
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        output =\
    \ append(output, fmt.Sprintf(\"%d\", count))\n    }\n    return output\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp89rgirb6_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp89rgirb6_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp89rgirb6_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    res := make([]string, len(lst))\n    for i, s := range\
    \ lst {\n        cnt := 0\n        for _, c := range s {\n            if c % 2\
    \ == 1 {\n                cnt++\n            }\n        }\n        res[i] = fmt.Sprintf(\"\
    %d\", cnt)\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n \
    \ candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp9wz72e9k_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp9wz72e9k_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp9wz72e9k_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var sum int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                sum++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", sum))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp75gpto8j_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp75gpto8j_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp75gpto8j_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        output = append(output,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return output\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpepfnh93p_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpepfnh93p_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpepfnh93p_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, vv := range v {\n            if int(vv)\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmppok3c46d_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmppok3c46d_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmppok3c46d_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var ret []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        ret = append(ret,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return ret\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpf4nmsp04_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpf4nmsp04_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpf4nmsp04_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", odd))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpwp8k9ch0_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpwp8k9ch0_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpwp8k9ch0_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var odd_count int\n        for _, c := range s {\n            if c %\
    \ 2 == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpz968bnfy_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpz968bnfy_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpz968bnfy_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c == '1'\
    \ || c == '3' || c == '5' || c == '7' || c == '9' {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"%d\"\
    , count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5plt68p1_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp5plt68p1_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp5plt68p1_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        res =\
    \ append(res, fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp9cq2yybh_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        count := 0\n        for _, c := range str {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp6c79ygmy_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp6c79ygmy_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp6c79ygmy_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, r := range s {\n            if (r - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp1vbfseif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp1vbfseif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp1vbfseif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        res =\
    \ append(res, fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp9cq2yybh_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp9cq2yybh_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        output =\
    \ append(output, fmt.Sprintf(\"%d\", count))\n    }\n    return output\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp89rgirb6_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp89rgirb6_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp89rgirb6_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073887
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if int(c) %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpydikgd4x_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpydikgd4x_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpydikgd4x_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var odd int\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    %d\", odd))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgnpdni7k_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgnpdni7k_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgnpdni7k_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, char := range str {\n            if char\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp05i37b2t_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, vv := range v {\n            if int(vv)\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmppok3c46d_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmppok3c46d_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmppok3c46d_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    res := make([]string, len(lst))\n    for i, s := range\
    \ lst {\n        cnt := 0\n        for _, c := range s {\n            if c % 2\
    \ == 1 {\n                cnt++\n            }\n        }\n        res[i] = fmt.Sprintf(\"\
    %d\", cnt)\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n \
    \ candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp9wz72e9k_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp9wz72e9k_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp9wz72e9k_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        odd_count := 0\n        for _, c := range s {\n       \
    \     if c % 2 == 1 {\n                odd_count++\n            }\n        }\n\
    \        result[i] = fmt.Sprintf(\"%d\", odd_count)\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpfa7hqr5l_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpfa7hqr5l_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpfa7hqr5l_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmps0k4786__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmplln8da1v_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c == '1'\
    \ || c == '3' || c == '5' || c == '7' || c == '9' {\n                count +=\
    \ 1\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    %d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpheaxviwy_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpheaxviwy_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpheaxviwy_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmps0k4786__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        count := 0\n        for _, c := range str {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp6twr06lj_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp6twr06lj_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp6twr06lj_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        var count int\n        for _, c := range s {\n        \
    \    if c % 2 == 1 {\n                count++\n            }\n        }\n    \
    \    result[i] = fmt.Sprintf(\"%d\", count)\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp05kzxw_5_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp05kzxw_5_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp05kzxw_5_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      var count int\n        for _, c := range v {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpth9j_o1w_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpth9j_o1w_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpth9j_o1w_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, char := range str {\n            if char\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp05i37b2t_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        count := 0\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4f75ohyf_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp4f75ohyf_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp4f75ohyf_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      odd := 0\n        for _, c := range s {\n            if (c - '0') % 2 ==\
    \ 1 {\n                odd++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", odd))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpbtndqczv_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpbtndqczv_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpbtndqczv_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpa7ignaks_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpa7ignaks_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpa7ignaks_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, ch := range str {\n            if ch %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpa5f7bv29_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmps0k4786__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        count := 0\n        for _, c := range s {\n           \
    \ if c % 2 == 1 {\n                count++\n            }\n        }\n       \
    \ result[i] = fmt.Sprintf(\"%d\", count)\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplu_pcr56_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmplu_pcr56_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmplu_pcr56_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                odd_count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n}\n\
    \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpa5f7bv29_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpa5f7bv29_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var ret []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        ret = append(ret,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return ret\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpf4nmsp04_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpf4nmsp04_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpf4nmsp04_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        odd_count := 0\n        for _, c := range s {\n       \
    \     if c % 2 == 1 {\n                odd_count++\n            }\n        }\n\
    \        result[i] = fmt.Sprintf(\"%d\", odd_count)\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpfa7hqr5l_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpfa7hqr5l_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpfa7hqr5l_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        odd := 0\n        for _, d := range v {\n            if d % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", odd))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgznbm_eu_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgznbm_eu_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgznbm_eu_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    res := make([]string, len(lst))\n    for i, s := range\
    \ lst {\n        count := 0\n        for _, c := range s {\n            if c %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        res[i]\
    \ = fmt.Sprintf(\"%d\", count)\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpaj5q_rwc_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpaj5q_rwc_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpaj5q_rwc_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, ch := range str {\n            if ch %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        count := 0\n        for _, c := range v {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp6zp75r51_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp6zp75r51_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp6zp75r51_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var cnt int\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                cnt++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    %d\", cnt))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplsnl32ek_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmplsnl32ek_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmplsnl32ek_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpddgjhnfp_test.go:43: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpddgjhnfp_test.go:43: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpddgjhnfp_test.go:43: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if int(c)\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpdm3ytcss_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpdm3ytcss_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpdm3ytcss_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, char := range str {\n            if char\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp05i37b2t_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", odd))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpwp8k9ch0_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpwp8k9ch0_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpwp8k9ch0_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, r := range str {\n            if int(r)\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp0sh4_src_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp0sh4_src_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp0sh4_src_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        odd_count := 0\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                odd_count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n\
    }\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpvmnk85w__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpvmnk85w__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpvmnk85w__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c == '1'\
    \ || c == '3' || c == '5' || c == '7' || c == '9' {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"%d\", count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp2yx1cv4__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp2yx1cv4__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp2yx1cv4__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmps0k4786__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmps0k4786__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, r := range s {\n            if r % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpyt2rczwn_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpyt2rczwn_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpyt2rczwn_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, char := range str {\n            if char\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp05i37b2t_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp05i37b2t_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var odd int\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    %d\", odd))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgnpdni7k_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgnpdni7k_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgnpdni7k_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpvec5mam7_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpvec5mam7_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpvec5mam7_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        var count int\n        for _, c := range v {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmplln8da1v_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmplln8da1v_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        odd := 0\n        for _, d := range v {\n            if d % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", odd))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgznbm_eu_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgznbm_eu_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgznbm_eu_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var odd_count []string\n    for _, v := range lst\
    \ {\n        odd_count = append(odd_count, fmt.Sprintf(\"%d\", len(v) - len(v)\
    \ / 2))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp2kidyll2_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp2kidyll2_test.go:35: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 4]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp2kidyll2_test.go:35: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 2 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c%2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpxjcq5ucg_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpxjcq5ucg_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpxjcq5ucg_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var out []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        out = append(out,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return out\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp9ginvpmi_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp9ginvpmi_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp9ginvpmi_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var count int\n        for _, c := range s {\n            if c % 2 == 1\
    \ {\n                count++\n            }\n        }\n        res = append(res,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpmbp4ysif_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpmbp4ysif_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      var odd int\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                odd++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    %d\", odd))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgnpdni7k_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgnpdni7k_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgnpdni7k_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var ret []string\n    for _, s := range lst {\n  \
    \      var cnt int\n        for _, c := range s {\n            if c % 2 == 1 {\n\
    \                cnt++\n            }\n        }\n        ret = append(ret, fmt.Sprintf(\"\
    %d\", cnt))\n    }\n    return ret\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpwiu5qmiv_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpwiu5qmiv_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpwiu5qmiv_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073890
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if (c - '0')\
    \ % 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpkb_hiw3i_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, ch := range str {\n            if ch %\
    \ 2 == 1 {\n                count++\n            }\n        }\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpc0qfl_d9_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073889
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        var count int\n        for _, c := range s {\n            if c % 2 ==\
    \ 1 {\n                count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp57lywin__test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp57lywin__test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073886
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        var count int\n        for _, c := range str {\n            if c % 2\
    \ == 1 {\n                count++\n            }\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpgf0y7a76_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 8]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpgf0y7a76_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[2 3 2]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073886
