language: go_test.go
name: HumanEval_110_exchange
results:
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds []int\n    for _, n := range lst1\
    \ {\n        if n % 2 == 0 {\n            evens = append(evens, n)\n        }\
    \ else {\n            odds = append(odds, n)\n        }\n    }\n    for _, n :=\
    \ range lst2 {\n        if n % 2 == 0 {\n            evens = append(evens, n)\n\
    \        } else {\n            odds = append(odds, n)\n        }\n    }\n    if\
    \ len(evens) > len(odds) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpgrdw1gyg_test.go:58: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpgrdw1gyg_test.go:58: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpgrdw1gyg_test.go:58:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Your code goes here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp7vghqk6n_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp7vghqk6n_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp7vghqk6n_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    even1 := 0\n    odd1 := 0\n    even2 := 0\n    odd2\
    \ := 0\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n            even1++\n\
    \        } else {\n            odd1++\n        }\n    }\n    for _, v := range\
    \ lst2 {\n        if v % 2 == 0 {\n            even2++\n        } else {\n   \
    \         odd2++\n        }\n    }\n    if even1 == 0 {\n        return \"NO\"\
    \n    }\n    if even1 <= odd2 {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpbqoa5c3u_test.go:64: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpbqoa5c3u_test.go:64: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpbqoa5c3u_test.go:64:\
    \ expected 'NO', got 'YES'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n \
    \       tmpbqoa5c3u_test.go:64: expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, v := range lst1 {\n\
    \        if v % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    for _, v := range lst2 {\n        if v % 2 == 0 {\n   \
    \         odds++\n        } else {\n            evens++\n        }\n    }\n  \
    \  if evens == len(lst1) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpf83hu31g_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i, v := range lst1 {\n        if v % 2 != 0 {\n\
    \            for j, w := range lst2 {\n                if w % 2 != 0 {\n     \
    \               lst1[i] = w\n                    lst2[j] = v\n               \
    \     break\n                }\n            }\n        }\n    }\n    for _, v\
    \ := range lst1 {\n        if v % 2 != 0 {\n            return \"NO\"\n      \
    \  }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpqbqi5b1j_test.go:56: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpqbqi5b1j_test.go:56: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpqbqi5b1j_test.go:56:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, n := range lst1 {\n\
    \        if n % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n   \
    \         odds++\n        } else {\n            evens++\n        }\n    }\n  \
    \  if evens > odds {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\
    func TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp97vwrxbv_test.go:58:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n \
    \       tmp97vwrxbv_test.go:58: expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__5\
    \ (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__6 (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, n := range lst1 {\n\
    \        if n % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n   \
    \         odds++\n        } else {\n            evens++\n        }\n    }\n  \
    \  if evens == len(lst1) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpd__ewtt9_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, n := range lst1 {\n\
    \        if n % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n   \
    \         odds++\n        } else {\n            evens++\n        }\n    }\n  \
    \  if evens == len(lst1) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpd__ewtt9_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    evens := 0\n    for _, n := range lst1 {\n       \
    \ if n % 2 == 0 {\n            evens++\n        }\n    }\n    odds := len(lst1)\
    \ - evens\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n           \
    \ odds--\n        } else {\n            evens--\n        }\n        if odds <\
    \ 0 || evens < 0 {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpbrngv_zi_test.go:57: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, v := range lst1 {\n\
    \        if v % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    for _, v := range lst2 {\n        if v % 2 == 0 {\n   \
    \         odds++\n        } else {\n            evens++\n        }\n    }\n  \
    \  if evens == len(lst1) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpf83hu31g_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, num := range lst1\
    \ {\n        if num % 2 == 0 {\n            evens++\n        } else {\n      \
    \      odds++\n        }\n    }\n    for _, num := range lst2 {\n        if num\
    \ % 2 == 0 {\n            odds++\n        } else {\n            evens++\n    \
    \    }\n    }\n    if evens == len(lst1) {\n        return \"YES\"\n    }\n  \
    \  return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpeq1iz3ro_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evenCount1, evenCount2 int\n    for _, v := range\
    \ lst1 {\n        if v % 2 == 0 {\n            evenCount1++\n        }\n    }\n\
    \    for _, v := range lst2 {\n        if v % 2 == 0 {\n            evenCount2++\n\
    \        }\n    }\n    if evenCount1 == len(lst1) {\n        return \"YES\"\n\
    \    }\n    if evenCount2 == len(lst2) {\n        return \"YES\"\n    }\n    if\
    \ evenCount1 + evenCount2 == len(lst1) + len(lst2) {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp9llu23w1_test.go:60: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp9llu23w1_test.go:60: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n\
    \            continue\n        }\n        for _, v2 := range lst2 {\n        \
    \    if v2 % 2 == 0 {\n                continue\n            }\n            lst1\
    \ = append(lst1, v2)\n            lst2 = append(lst2, v)\n            return exchange(lst1,\
    \ lst2)\n        }\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0328\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520359?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x444439?, 0x4cfc00?}, {0xc00d492000?, 0x444439?, 0x4cfc00?})\n\t/tmp/tmp4db40g44_test.go:17\
    \ +0x19d fp=0xc0201e0338 sp=0xc0201e0330 pc=0x4ef7fd\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444438, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28\
    \ +0x15a fp=0xc0201e03b0 sp=0xc0201e0338 pc=0x4ef7ba\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444437, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28\
    \ +0x15a fp=0xc0201e0428 sp=0xc0201e03b0 pc=0x4ef7ba\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444436, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28\
    \ +0x15a fp=0xc0201e04a0 sp=0xc0201e0428 pc=0x4ef7ba\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444435, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28\
    \ +0x15a fp=0xc0201e0518 sp=0xc0201e04a0 pc=0x4ef7ba\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444434, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28\
    \ +0x15a fp=0xc0201e0590 sp=0xc0201e0518 pc=0x4ef7ba\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444433, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28\
    \ +0x15a fp=0xc0201e0608 sp=0xc0201e0590 pc=0x4ef7ba\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444432, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28\
    \ +0x15a fp=0xc0201e0680 sp=0xc0201e0608 pc=0x4ef7ba\ncommand-line-arguments_test.exchange({0xc00ae14000?,\
    \ 0x0?, 0x0?}, {0xc00d492000?, 0x444431, 0x0?})\n\t/tmp/tmp4db40g44_test.go:28 "
  timestamp: 1660073666
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Your code goes here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp7vghqk6n_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp7vghqk6n_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp7vghqk6n_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp7vghqk6n_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var even, odd int\n    for _, v := range lst1 {\n\
    \        if v % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    for _, v := range lst2 {\n        if v % 2 == 0 {\n   \
    \         even--\n        } else {\n            odd--\n        }\n    }\n    if\
    \ even == 0 && odd == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpsfivss4x_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens int\n    for _, v := range lst1 {\n    \
    \    if v % 2 == 0 {\n            evens++\n        }\n    }\n    for _, v := range\
    \ lst2 {\n        if v % 2 == 0 {\n            evens--\n        }\n    }\n   \
    \ if evens == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpo49x_r8q_test.go:54: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var even1, even2, odd1, odd2 int\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            even1++\n        } else {\n\
    \            odd1++\n        }\n    }\n    for _, v := range lst2 {\n        if\
    \ v % 2 == 0 {\n            even2++\n        } else {\n            odd2++\n  \
    \      }\n    }\n    if even1 == 0 {\n        return \"NO\"\n    }\n    if even2\
    \ == 0 {\n        return \"NO\"\n    }\n    if odd1 == 0 {\n        return \"\
    YES\"\n    }\n    if odd2 == 0 {\n        return \"YES\"\n    }\n    if even1\
    \ >= odd2 {\n        return \"YES\"\n    }\n    if even2 >= odd1 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n\
    \  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmply_r_n8b_test.go:73: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens1, evens2, odds1, odds2 int\n    for _, v\
    \ := range lst1 {\n        if v % 2 == 0 {\n            evens1++\n        } else\
    \ {\n            odds1++\n        }\n    }\n    for _, v := range lst2 {\n   \
    \     if v % 2 == 0 {\n            evens2++\n        } else {\n            odds2++\n\
    \        }\n    }\n    if evens1 == 0 {\n        return \"NO\"\n    }\n    if\
    \ evens2 == 0 {\n        return \"NO\"\n    }\n    if evens1 > odds2 {\n     \
    \   return \"NO\"\n    }\n    if evens2 > odds1 {\n        return \"NO\"\n   \
    \ }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate :=\
    \ exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpwmjgnegy_test.go:67: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__3 (0.00s)\n        tmpwmjgnegy_test.go:67: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpwmjgnegy_test.go:67:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpgyg_86ia_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpgyg_86ia_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpgyg_86ia_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpgyg_86ia_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpgyg_86ia_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpgyg_86ia_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpgyg_86ia_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, n := range lst1 {\n\
    \        if n % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n   \
    \         odds++\n        } else {\n            evens++\n        }\n    }\n  \
    \  if evens > odds {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\
    func TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp97vwrxbv_test.go:58:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n \
    \       tmp97vwrxbv_test.go:58: expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__5\
    \ (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__6 (0.00s)\n        tmp97vwrxbv_test.go:58: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    lst1Even := true\n    lst2Even := true\n    for _,\
    \ v := range lst1 {\n        if v % 2 != 0 {\n            lst1Even = false\n \
    \           break\n        }\n    }\n    for _, v := range lst2 {\n        if\
    \ v % 2 != 0 {\n            lst2Even = false\n            break\n        }\n \
    \   }\n    if lst1Even && lst2Even {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpm8govgkf_test.go:57: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpm8govgkf_test.go:57: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpm8govgkf_test.go:57:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i, v := range lst1 {\n        if v % 2 != 0 {\n\
    \            for j, w := range lst2 {\n                if w % 2 != 0 {\n     \
    \               lst1[i] = w\n                    lst2[j] = v\n               \
    \     break\n                }\n            }\n        }\n    }\n    for _, v\
    \ := range lst1 {\n        if v % 2 != 0 {\n            return \"NO\"\n      \
    \  }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpqbqi5b1j_test.go:56: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpqbqi5b1j_test.go:56: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpqbqi5b1j_test.go:56:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO: Implement\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpyk27vlcq_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpyk27vlcq_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpyk27vlcq_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpyk27vlcq_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpyk27vlcq_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpyk27vlcq_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpyk27vlcq_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    evens := 0\n    for _, n := range lst1 {\n       \
    \ if n % 2 == 0 {\n            evens++\n        }\n    }\n    odds := len(lst1)\
    \ - evens\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n           \
    \ odds--\n        } else {\n            evens--\n        }\n        if odds <\
    \ 0 || evens < 0 {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpbrngv_zi_test.go:57: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    evens := 0\n    odds := 0\n    for _, v := range lst1\
    \ {\n        if v % 2 == 0 {\n            evens++\n        } else {\n        \
    \    odds++\n        }\n    }\n    for _, v := range lst2 {\n        if v % 2\
    \ == 0 {\n            evens++\n        } else {\n            odds++\n        }\n\
    \    }\n    if evens % 2 == 0 {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpr6_8k7st_test.go:59: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpr6_8k7st_test.go:59: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    var evens, odds int\n    for _, v := range lst1 {\n\
    \        if v % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n    }\n    for _, v := range lst2 {\n        if v % 2 == 0 {\n   \
    \         odds++\n        } else {\n            evens++\n        }\n    }\n  \
    \  if evens == len(lst1) {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpf83hu31g_test.go:58: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp93ei6t60_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp93ei6t60_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp93ei6t60_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    even1 := 0\n    odd1 := 0\n    even2 := 0\n    odd2\
    \ := 0\n    for _, v := range lst1 {\n        if v % 2 == 0 {\n            even1++\n\
    \        } else {\n            odd1++\n        }\n    }\n    for _, v := range\
    \ lst2 {\n        if v % 2 == 0 {\n            even2++\n        } else {\n   \
    \         odd2++\n        }\n    }\n    if even1 == 0 {\n        return \"NO\"\
    \n    }\n    if odd1 == 0 {\n        return \"YES\"\n    }\n    if odd1 <= even2\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp9c66ocw2_test.go:67: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    oddCount := 0\n    for _, v := range lst1 {\n    \
    \    if v % 2 != 0 {\n            oddCount++\n        }\n    }\n    for _, v :=\
    \ range lst2 {\n        if v % 2 != 0 {\n            oddCount--\n        }\n \
    \   }\n    if oddCount == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpnsqfczvr_test.go:54: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 0 {\n            continue\n        }\n        for j := 0; j < len(lst2);\
    \ j++ {\n            if lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                break\n            }\n        }\n        if\
    \ lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // Write your code here\n    return \"\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmps3d8rjwg_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmps3d8rjwg_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmps3d8rjwg_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073665
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int,\
    \ lst2 []int) string {\n    // TODO - Add your code here\n    return \"\"\n}\n\
    \nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpsk3tiu3d_test.go:41: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpsk3tiu3d_test.go:41: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpsk3tiu3d_test.go:41:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073665
