language: go_test.go
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpqjfw2vw8_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpqjfw2vw8_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // write your code here\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp3dsbjxmw_test.go:38: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp3dsbjxmw_test.go:38: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp3dsbjxmw_test.go:38: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp3dsbjxmw_test.go:38: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp3dsbjxmw_test.go:38: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if array == nil || len(array) == 0 {\n        return array\n    }\n    if\
    \ len(array) == 1 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp8ug5snzu_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp8ug5snzu_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp8ug5snzu_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp8ug5snzu_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp8ug5snzu_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        // sort in descending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n            \
    \    if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // sort in ascending order\n        for i := 0; i < len(array) - 1; i++ {\n\
    \            for j := i + 1; j < len(array); j++ {\n                if array[i]\
    \ > array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpyyt6h8e7_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyyt6h8e7_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpm41jl8_z_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpm41jl8_z_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpm41jl8_z_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpm41jl8_z_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // Write your code here\n    if len(array) == 0 {\n        return array\n\
    \    }\n    if array[0] + array[len(array) - 1] % 2 == 0 {\n        return sort_array_desc(array)\n\
    \    }\n    return sort_array_asc(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxvwja1k_test.go:20:16: undefined: sort_array_desc

    /tmp/tmpjxvwja1k_test.go:22:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(array); j++ {\n            if array[i] > array[j] {\n       \
    \         array[i], array[j] = array[j], array[i]\n            }\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpn9s4n428_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpn9s4n428_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpqjfw2vw8_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpqjfw2vw8_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if array == nil || len(array) == 0 {\n        return array\n    }\n    if\
    \ len(array) == 1 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp8ug5snzu_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp8ug5snzu_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp8ug5snzu_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp8ug5snzu_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp8ug5snzu_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            for j := i + 1; j < len(array) - i; j++ {\n                if\
    \ array[j] > array[j - 1] {\n                    array[j], array[j - 1] = array[j\
    \ - 1], array[j]\n                }\n            }\n        }\n    } else {\n\
    \        // odd\n        for i := 0; i < len(array) / 2; i++ {\n            for\
    \ j := i + 1; j < len(array) - i; j++ {\n                if array[j] < array[j\
    \ - 1] {\n                    array[j], array[j - 1] = array[j - 1], array[j]\n\
    \                }\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpnfh845q7_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpnfh845q7_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpnfh845q7_test.go:59: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=32) %!s(int=0)\
    \ %!s(int=11) %!s(int=42) %!s(int=87)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpnfh845q7_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=14) %!s(int=11) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // Write your code here\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    } else {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpndnc42jp_test.go:52: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpndnc42jp_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpndnc42jp_test.go:52: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpndnc42jp_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n     \
    \   return sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8iraadi_test.go:19:16: undefined: sort_array_desc

    /tmp/tmpk8iraadi_test.go:21:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++ {\n \
    \           array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    } else {\n        // odd\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpm3mt5pdx_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpm3mt5pdx_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpm3mt5pdx_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpm3mt5pdx_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if array == nil || len(array) < 2 {\n        return array\n    }\n    if\
    \ (array[0] + array[len(array) - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n\
    \    }\n    return sort_array_asc(array)\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1pmythnv_test.go:19:16: undefined: sort_array_desc

    /tmp/tmp1pmythnv_test.go:21:12: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    var result []int\n    if len(array) == 0 {\n        return result\n    }\n\
    \    if len(array) == 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := len(array) - 1; i >= 0; i-- {\n         \
    \   result = append(result, array[i])\n        }\n    } else {\n        for i\
    \ := 0; i < len(array); i++ {\n            result = append(result, array[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpzryiewki_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpzryiewki_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpzryiewki_test.go:53: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpzryiewki_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpzryiewki_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    } else {\n  \
    \      for i := 0; i < len(array) / 2; i++ {\n            if array[i] > array[len(array)\
    \ - 1 - i] {\n                array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n            }\n        }\n    }\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpycyxjobe_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpycyxjobe_test.go:60: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpycyxjobe_test.go:60: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpycyxjobe_test.go:60: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // descending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n            \
    \    if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // ascending order\n        for i := 0; i < len(array) - 1; i++ {\n       \
    \     for j := i + 1; j < len(array); j++ {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(array); j++ {\n            if array[i] > array[j] {\n       \
    \         array[i], array[j] = array[j], array[i]\n            }\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp2d51ys_v_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp2d51ys_v_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // Write your code here\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // Write your code here\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            if array[i] > array[len(array) - 1 - i]\
    \ {\n                array[i], array[len(array) - 1 - i] = array[len(array) -\
    \ 1 - i], array[i]\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0p1q2uh8_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0p1q2uh8_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp0p1q2uh8_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0p1q2uh8_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // descending\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := 0; j < len(array) - 1 - i; j++ {\n          \
    \      if array[j] < array[j + 1] {\n                    array[j], array[j + 1]\
    \ = array[j + 1], array[j]\n                }\n            }\n        }\n    }\
    \ else {\n        // ascending\n        for i := 0; i < len(array) - 1; i++ {\n\
    \            for j := 0; j < len(array) - 1 - i; j++ {\n                if array[j]\
    \ > array[j + 1] {\n                    array[j], array[j + 1] = array[j + 1],\
    \ array[j]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpqxl2i5h1_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqxl2i5h1_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            if array[0] < array[1] {\n             \
    \   array[0], array[1] = array[1], array[0]\n            }\n        } else {\n\
    \            if array[0] > array[1] {\n                array[0], array[1] = array[1],\
    \ array[0]\n            }\n        }\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2;\
    \ i++ {\n            if array[i] < array[len(array) - 1 - i] {\n             \
    \   array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \            }\n        }\n    } else {\n        for i := 0; i < len(array) /\
    \ 2; i++ {\n            if array[i] > array[len(array) - 1 - i] {\n          \
    \      array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpkbkfb9f0_test.go:68: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpkbkfb9f0_test.go:68: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpkbkfb9f0_test.go:68: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpkbkfb9f0_test.go:68: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=23) %!s(int=14) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            if array[i] > array[len(array) - 1 - i]\
    \ {\n                array[i], array[len(array) - 1 - i] = array[len(array) -\
    \ 1 - i], array[i]\n            }\n        }\n    }\n    return array\n}\n\nfunc\
    \ TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp0p1q2uh8_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp0p1q2uh8_test.go:53: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmp0p1q2uh8_test.go:53: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp0p1q2uh8_test.go:53: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    } else {\n        for i := 0; i < len(array) / 2; i++ {\n            if array[i]\
    \ > array[len(array) - 1 - i] {\n                array[i], array[len(array) -\
    \ 1 - i] = array[len(array) - 1 - i], array[i]\n            }\n        }\n   \
    \ }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmps6vfdoio_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // sort in descending order\n        for i := 0; i\
    \ < len(array) - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // sort in ascending order\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n              \
    \  if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // sort in descending order\n        for i := 0; i\
    \ < len(array) - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // sort in ascending order\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n              \
    \  if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) < 2 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpxkj4ck9a_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpxkj4ck9a_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpxkj4ck9a_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpxkj4ck9a_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpxkj4ck9a_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpe8xwkb3l_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpe8xwkb3l_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpe8xwkb3l_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpe8xwkb3l_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpe8xwkb3l_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // descending\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n              \
    \  if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // ascending\n        for i := 0; i < len(array) - 1; i++ {\n            for\
    \ j := i + 1; j < len(array); j++ {\n                if array[i] > array[j] {\n\
    \                    array[i], array[j] = array[j], array[i]\n               \
    \ }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpnwcq6_ry_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpnwcq6_ry_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        // sort in descending order\n        for i := 0; i < len(array);\
    \ i++ {\n            for j := i + 1; j < len(array); j++ {\n                if\
    \ array[i] < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // sort in\
    \ ascending order\n        for i := 0; i < len(array); i++ {\n            for\
    \ j := i + 1; j < len(array); j++ {\n                if array[i] > array[j] {\n\
    \                    array[i], array[j] = array[j], array[i]\n               \
    \ }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpci3to9_k_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpci3to9_k_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        // descending\n        for i := 0; i < len(array) - 1; i++ {\n\
    \            for j := i + 1; j < len(array); j++ {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // ascending\n\
    \        for i := 0; i < len(array) - 1; i++ {\n            for j := i + 1; j\
    \ < len(array); j++ {\n                if array[i] > array[j] {\n            \
    \        array[i], array[j] = array[j], array[i]\n                }\n        \
    \    }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp77u3zmer_test.go:62: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp77u3zmer_test.go:62: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n     \
    \   return sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8iraadi_test.go:19:16: undefined: sort_array_desc

    /tmp/tmpk8iraadi_test.go:21:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_descending(array)\n    } else {\n        return\
    \ sort_array_ascending(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7bhc2ye__test.go:22:16: undefined: sort_array_descending

    /tmp/tmp7bhc2ye__test.go:24:16: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n    \
    \    return sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc7yybuk__test.go:19:16: undefined: sort_array_desc

    /tmp/tmpc7yybuk__test.go:21:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            if array[0] < array[1] {\n             \
    \   array[0], array[1] = array[1], array[0]\n            }\n        } else {\n\
    \            if array[0] > array[1] {\n                array[0], array[1] = array[1],\
    \ array[0]\n            }\n        }\n        return array\n    }\n    for i :=\
    \ 0; i < len(array); i++ {\n        for j := i + 1; j < len(array); j++ {\n  \
    \          if (array[i] + array[j]) % 2 == 0 {\n                if array[i] <\
    \ array[j] {\n                    array[i], array[j] = array[j], array[i]\n  \
    \              }\n            } else {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpwe8bpy9d_test.go:68: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=0) %!s(int=5) %!s(int=3) %!s(int=1)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpwe8bpy9d_test.go:68: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=0) %!s(int=5) %!s(int=3)\
    \ %!s(int=1) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpwe8bpy9d_test.go:68: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=15) %!s(int=42)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpwe8bpy9d_test.go:68: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    } else {\n        for i := 0; i < len(array) / 2; i++ {\n            if array[i]\
    \ > array[len(array) - 1 - i] {\n                array[i], array[len(array) -\
    \ 1 - i] = array[len(array) - 1 - i], array[i]\n            }\n        }\n   \
    \ }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmps6vfdoio_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    } else {\n        for i := 0; i < len(array) / 2; i++ {\n            if array[i]\
    \ > array[len(array) - 1 - i] {\n                array[i], array[len(array) -\
    \ 1 - i] = array[len(array) - 1 - i], array[i]\n            }\n        }\n   \
    \ }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmps6vfdoio_test.go:54: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmps6vfdoio_test.go:54: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=23) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // TODO\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpm85whemy_test.go:38: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpm85whemy_test.go:38: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpm85whemy_test.go:38: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpm85whemy_test.go:38: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpm85whemy_test.go:38: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        // sort in descending order\n        for i := 0; i\
    \ < len(array) - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // sort in ascending order\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n              \
    \  if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_desc(array)\n    } else {\n        return\
    \ sort_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2p6kjm9o_test.go:19:16: undefined: sort_desc

    /tmp/tmp2p6kjm9o_test.go:21:16: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // descending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n            \
    \    if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // ascending order\n        for i := 0; i < len(array) - 1; i++ {\n       \
    \     for j := i + 1; j < len(array); j++ {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            if array[0] < array[1] {\n             \
    \   array[0], array[1] = array[1], array[0]\n            }\n        } else {\n\
    \            if array[0] > array[1] {\n                array[0], array[1] = array[1],\
    \ array[0]\n            }\n        }\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2;\
    \ i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array) -\
    \ 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpvm2h0exh_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpvm2h0exh_test.go:60: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpvm2h0exh_test.go:60: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpvm2h0exh_test.go:60: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp871dx672_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp871dx672_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp871dx672_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp871dx672_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmp871dx672_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmp871dx672_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp871dx672_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(array); j++ {\n            if array[i] > array[j] {\n       \
    \         array[i], array[j] = array[j], array[i]\n            }\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp59htgxwn_test.go:52: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp59htgxwn_test.go:52: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            if array[0] < array[1] {\n             \
    \   array[0], array[1] = array[1], array[0]\n            }\n        } else {\n\
    \            if array[0] > array[1] {\n                array[0], array[1] = array[1],\
    \ array[0]\n            }\n        }\n        return array\n    }\n    if (array[0]\
    \ + array[len(array) - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2;\
    \ i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array) -\
    \ 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpvm2h0exh_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpvm2h0exh_test.go:60: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpvm2h0exh_test.go:60: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpvm2h0exh_test.go:60: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if array[0]\
    \ > array[1] {\n            array[0], array[1] = array[1], array[0]\n        }\n\
    \        return array\n    }\n    if (array[0] + array[len(array) - 1]) % 2 ==\
    \ 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n    } else {\n  \
    \      for i := 0; i < len(array) / 2; i++ {\n            if array[i] > array[len(array)\
    \ - 1 - i] {\n                array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n            }\n        }\n    }\n    return array\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpycyxjobe_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpycyxjobe_test.go:60: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpycyxjobe_test.go:60: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpycyxjobe_test.go:60: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_desc(array)\n    } else {\n        return\
    \ sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiqnusfil_test.go:22:16: undefined: sort_array_desc

    /tmp/tmpiqnusfil_test.go:24:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 0
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if (array[0] + array[len(array) - 1]) %\
    \ 2 == 0 {\n        // descending\n        for i := 0; i < len(array) - 1; i++\
    \ {\n            for j := i + 1; j < len(array); j++ {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // ascending\n\
    \        for i := 0; i < len(array) - 1; i++ {\n            for j := i + 1; j\
    \ < len(array); j++ {\n                if array[i] > array[j] {\n            \
    \        array[i], array[j] = array[j], array[i]\n                }\n        \
    \    }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // sort in descending order\n        for i := 0; i\
    \ < len(array) - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // sort in ascending order\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n              \
    \  if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n     \
    \   return sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8iraadi_test.go:19:16: undefined: sort_array_desc

    /tmp/tmpk8iraadi_test.go:21:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // Write your code here\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n            array[i],\
    \ array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpt9nezpkn_test.go:48: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpt9nezpkn_test.go:48: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_descending(array)\n    } else {\n     \
    \   return sort_ascending(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3g0gjrff_test.go:19:16: undefined: sort_descending

    /tmp/tmp3g0gjrff_test.go:21:16: undefined: sort_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) < 2 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        return sort_desc(array)\n    } else {\n        return\
    \ sort_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp75ztcvad_test.go:19:16: undefined: sort_desc

    /tmp/tmp75ztcvad_test.go:21:16: undefined: sort_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpqjfw2vw8_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpqjfw2vw8_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpqjfw2vw8_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    // Write your code here\n    return array\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpwojdeizk_test.go:38: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpwojdeizk_test.go:38: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // descending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n            \
    \    if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // ascending order\n        for i := 0; i < len(array) - 1; i++ {\n       \
    \     for j := i + 1; j < len(array); j++ {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // sort in descending order\n        for i := 0; i\
    \ < len(array) - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // sort in ascending order\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n              \
    \  if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n     \
    \   return sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8iraadi_test.go:19:16: undefined: sort_array_desc

    /tmp/tmpk8iraadi_test.go:21:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // descending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n            \
    \    if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // ascending order\n        for i := 0; i < len(array) - 1; i++ {\n       \
    \     for j := i + 1; j < len(array); j++ {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // descending order\n        for i := 0; i < len(array)\
    \ - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n            \
    \    if array[i] < array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    } else {\n      \
    \  // ascending order\n        for i := 0; i < len(array) - 1; i++ {\n       \
    \     for j := i + 1; j < len(array); j++ {\n                if array[i] > array[j]\
    \ {\n                    array[i], array[j] = array[j], array[i]\n           \
    \     }\n            }\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpcs5atojp_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array) / 2; i++\
    \ {\n            array[i], array[len(array) - 1 - i] = array[len(array) - 1 -\
    \ i], array[i]\n        }\n    } else {\n        // odd\n        for i := 0; i\
    \ < len(array) / 2; i++ {\n            array[i], array[len(array) - 1 - i] = array[len(array)\
    \ - 1 - i], array[i]\n        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{5}),\
    \ expected: []int{5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected:\
    \ []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5,\
    \ 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
    \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
    \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
    \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpb3muf8n2_test.go:51: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpb3muf8n2_test.go:51: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if len(array) == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            if array[0] < array[1] {\n             \
    \   return []int{array[1], array[0]}\n            }\n            return array\n\
    \        }\n        if array[0] > array[1] {\n            return []int{array[1],\
    \ array[0]}\n        }\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  if array[i] < array[len(array) - 1 - i] {\n                array[i], array[len(array)\
    \ - 1 - i] = array[len(array) - 1 - i], array[i]\n            }\n        }\n \
    \   } else {\n        for i := 0; i < len(array) / 2; i++ {\n            if array[i]\
    \ > array[len(array) - 1 - i] {\n                array[i], array[len(array) -\
    \ 1 - i] = array[len(array) - 1 - i], array[i]\n            }\n        }\n   \
    \ }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate :=\
    \ sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{5}), expected: []int{5} },\n     { actual:\
    \ candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n \
    \    { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4,\
    \ 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1, 2}\
    \ },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpeyyo6b_h_test.go:68: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=3)\
    \ %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpeyyo6b_h_test.go:68: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__5\
    \ (0.00s)\n        tmpeyyo6b_h_test.go:68: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=0) %!s(int=11) %!s(int=32)\
    \ %!s(int=87) %!s(int=42) %!s(int=15)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpeyyo6b_h_test.go:68: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=23) %!s(int=14) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_descending(array)\n    } else {\n     \
    \   return sort_ascending(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3g0gjrff_test.go:19:16: undefined: sort_descending

    /tmp/tmp3g0gjrff_test.go:21:16: undefined: sort_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        return sort_array_desc(array)\n    } else {\n     \
    \   return sort_array_asc(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8iraadi_test.go:19:16: undefined: sort_array_desc

    /tmp/tmpk8iraadi_test.go:21:16: undefined: sort_array_asc

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // sort in descending order\n        for i := 0; i\
    \ < len(array) - 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n\
    \                if array[i] < array[j] {\n                    array[i], array[j]\
    \ = array[j], array[i]\n                }\n            }\n        }\n    } else\
    \ {\n        // sort in ascending order\n        for i := 0; i < len(array) -\
    \ 1; i++ {\n            for j := i + 1; j < len(array); j++ {\n              \
    \  if array[i] > array[j] {\n                    array[i], array[j] = array[j],\
    \ array[i]\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
    \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual:\
    \ candidate([]int{2, 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15,\
    \ 42, 87, 32, 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual:\
    \ candidate([]int{21, 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpihrtlxzb_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        // even\n        for i := 0; i < len(array); i++ {\n\
    \            for j := i + 1; j < len(array); j++ {\n                if array[i]\
    \ < array[j] {\n                    array[i], array[j] = array[j], array[i]\n\
    \                }\n            }\n        }\n    } else {\n        // odd\n \
    \       for i := 0; i < len(array); i++ {\n            for j := i + 1; j < len(array);\
    \ j++ {\n                if array[i] > array[j] {\n                    array[i],\
    \ array[j] = array[j], array[i]\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{5}), expected: []int{5} },\n    \
    \ { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4,\
    \ 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected: []int{6,\
    \ 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected: []int{1,\
    \ 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected: []int{0,\
    \ 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23, 11}), expected:\
    \ []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__3\
    \ (0.00s)\n        tmp7ol6yk4k_test.go:59: expected '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmp7ol6yk4k_test.go:59: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=14) %!s(int=21) %!s(int=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if len(array) == 1\
    \ {\n        return array\n    }\n    if array[0] + array[len(array) - 1] % 2\
    \ == 0 {\n        return sort_array_descending(array)\n    } else {\n        return\
    \ sort_array_ascending(array)\n    }\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7bhc2ye__test.go:22:16: undefined: sort_array_descending

    /tmp/tmp7bhc2ye__test.go:24:16: undefined: sort_array_ascending

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) <= 1 {\n        return array\n    }\n    if (array[0] + array[len(array)\
    \ - 1]) % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n          \
    \  array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=6) %!s(int=5) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpffohl7pg_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpffohl7pg_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=11) %!s(int=23) %!s(int=14) %!s(int=21)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n// you will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\n// or sort it in descending order\
    \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
    \ change the given array.\n// Examples:\nfunc sort_array(array []int) []int {\n\
    \    if len(array) == 0 {\n        return array\n    }\n    if array[0] + array[len(array)\
    \ - 1] % 2 == 0 {\n        for i := 0; i < len(array) / 2; i++ {\n           \
    \ array[i], array[len(array) - 1 - i] = array[len(array) - 1 - i], array[i]\n\
    \        }\n    }\n    return array\n}\n\nfunc TestSort_Array(t *testing.T) {\n\
    \  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{5}), expected: []int{5}\
    \ },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5}), expected: []int{0, 1,\
    \ 2, 3, 4, 5} },\n     { actual: candidate([]int{2, 4, 3, 0, 1, 5, 6}), expected:\
    \ []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2, 1}), expected:\
    \ []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32, 11, 0}), expected:\
    \ []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21, 14, 23,\
    \ 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__2\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestSort_Array/test_num__3 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3)\
    \ %!s(int=2) %!s(int=1) %!s(int=0)]', got '[%!s(int=2) %!s(int=4) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Array/test_num__5 (0.00s)\n\
    \        tmpyhzh_wrd_test.go:45: expected '[%!s(int=0) %!s(int=11) %!s(int=15)\
    \ %!s(int=32) %!s(int=42) %!s(int=87)]', got '[%!s(int=15) %!s(int=42) %!s(int=87)\
    \ %!s(int=32) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__6\
    \ (0.00s)\n        tmpyhzh_wrd_test.go:45: expected '[%!s(int=23) %!s(int=21)\
    \ %!s(int=14) %!s(int=11)]', got '[%!s(int=21) %!s(int=14) %!s(int=23) %!s(int=11)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075061
