language: go_test.go
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var ret []int\n    for n > 1 {\n        if n %\
    \ 2 == 1 {\n            ret = append(ret, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    ret = append(ret, 1)\n    return ret\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpwrgm0f52_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpwrgm0f52_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpwrgm0f52_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   odd_collatz := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n       \
    \     odd_collatz = append(odd_collatz, n)\n        }\n        n = n / 2\n   \
    \ }\n    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpdmg35okh_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpdmg35okh_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpdmg35okh_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var odd_collatz []int\n\
    \    for n > 1 {\n        odd_collatz = append(odd_collatz, n)\n        if n %\
    \ 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n\
    \        }\n    }\n    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpl4u148x6_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpl4u148x6_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpl4u148x6_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n           \
    \ result = append(result, n)\n        }\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n \
    \   result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = n * 3 + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpr0dlmk05_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpr0dlmk05_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpr0dlmk05_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{n}\n    for n > 1 {\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n            result = append(result, n)\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp07csvspe_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp07csvspe_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp07csvspe_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        n = n / 2\n    }\n    result = append(result, 1)\n  \
    \  return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphfo72j0i_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmphfo72j0i_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmphfo72j0i_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    odd_collatz := []int{}\n\
    \    for n > 1 {\n        odd_collatz = append(odd_collatz, n)\n        if n %\
    \ 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n\
    \        }\n    }\n    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpv_ehk64n_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpv_ehk64n_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpv_ehk64n_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    result := []int{}\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        n =\
    \ n / 2\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmputp4gh1z_test.go:50: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmputp4gh1z_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmputp4gh1z_test.go:50: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var collatz []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            collatz = append(collatz, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    return collatz\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp29f9x6bp_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp29f9x6bp_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp29f9x6bp_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // TODO - Add your\
    \ code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmptu0swinf_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   res := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n            res\
    \ = append(res, n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n\
    \        } else {\n            n = 3 * n + 1\n        }\n    }\n    res = append(res,\
    \ 1)\n    return res\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpdft7r61m_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpdft7r61m_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpdft7r61m_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmps8ldtkni_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n           \
    \ result = append(result, n)\n        }\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n \
    \   result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // Write your code\
    \ here\n    return []int{}\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps5nxleix_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps5nxleix_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmps5nxleix_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmps5nxleix_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpglhp2j01_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpglhp2j01_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpglhp2j01_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    result := []int{1}\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        n =\
    \ n / 2\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpg_qr6n_0_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=3)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpg_qr6n_0_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   odd_collatz := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n       \
    \     odd_collatz = append(odd_collatz, n)\n        }\n        n = n / 2\n   \
    \ }\n    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpdmg35okh_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpdmg35okh_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpdmg35okh_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = n * 3 + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptn1h4lb__test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmptn1h4lb__test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptn1h4lb__test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n           \
    \ result = append(result, n)\n        }\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n \
    \   result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var odd_collatz []int\n    for n > 1 {\n     \
    \   if n % 2 == 1 {\n            odd_collatz = append(odd_collatz, n)\n      \
    \  }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    odd_collatz = append(odd_collatz,\
    \ 1)\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppmz4uktk_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppmz4uktk_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppmz4uktk_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpijd4is3b_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpglhp2j01_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpglhp2j01_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpglhp2j01_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   odd_collatz := []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n      \
    \      odd_collatz = append(odd_collatz, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp8ioof53k_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp8ioof53k_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp8ioof53k_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var collatz []int\n    for n != 1 {\n        collatz = append(collatz, n)\n\
    \        if n % 2 == 0 {\n            n = n / 2\n        } else {\n          \
    \  n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    var\
    \ odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 == 1 {\n\
    \            odd_collatz = append(odd_collatz, v)\n        }\n    }\n    return\
    \ odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpssi2_2lp_test.go:61: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpssi2_2lp_test.go:61: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpssi2_2lp_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   odd_collatz := []int{1}\n    for n > 1 {\n        if n % 2 == 1 {\n      \
    \      odd_collatz = append(odd_collatz, n)\n        }\n        n = n / 2\n  \
    \  }\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz0gyx808_test.go:52: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=3)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpz0gyx808_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n           \
    \ result = append(result, n)\n        }\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n \
    \   result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpygt2tvqz_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpygt2tvqz_test.go:55: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpygt2tvqz_test.go:55: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   odd_collatz := make([]int, 0)\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            odd_collatz = append(odd_collatz, n)\n        }\n        n = n /\
    \ 2\n    }\n    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp383tzzai_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmp383tzzai_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp383tzzai_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   odd_collatz := []int{1}\n    for n > 1 {\n        if n % 2 == 1 {\n      \
    \      odd_collatz = append(odd_collatz, n)\n        }\n        n = n / 2\n  \
    \  }\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz0gyx808_test.go:52: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=7) %!s(int=3)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpz0gyx808_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // TODO - Add your\
    \ code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmptu0swinf_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp48pr5dy5_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp48pr5dy5_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp48pr5dy5_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // Write your code\
    \ here\n    return []int{}\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmps5nxleix_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmps5nxleix_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmps5nxleix_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmps5nxleix_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n\n    result := []int{}\n    for n > 1 {\n       \
    \ if n % 2 == 1 {\n            result = append(result, n)\n        }\n       \
    \ if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3\
    \ * n + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphof7hyb7_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphof7hyb7_test.go:55: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphof7hyb7_test.go:55: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        result = append(result, n)\n  \
    \      if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n\
    \ = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpe6ig1241_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpe6ig1241_test.go:55: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpe6ig1241_test.go:55: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{n}\n    for n != 1 {\n       \
    \ if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3\
    \ * n + 1\n        }\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp5m13v5nn_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp5m13v5nn_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp5m13v5nn_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // TODO: implement\
    \ this function\n    return []int{}\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp4a5lnczm_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp4a5lnczm_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp4a5lnczm_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp4a5lnczm_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{n}\n    for n != 1 {\n       \
    \ if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3\
    \ * n + 1\n        }\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var collatz []int\n    for n != 1 {\n        collatz = append(collatz, n)\n\
    \        if n % 2 == 0 {\n            n = n / 2\n        } else {\n          \
    \  n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n    var\
    \ odd []int\n    for _, v := range collatz {\n        if v % 2 == 1 {\n      \
    \      odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp23roha7j_test.go:61: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp23roha7j_test.go:61: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp23roha7j_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var collatz []int\n    for n > 1 {\n        collatz\
    \ = append(collatz, n)\n        if n % 2 == 0 {\n            n = n / 2\n     \
    \   } else {\n            n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz,\
    \ 1)\n    var odd_collatz []int\n    for _, v := range collatz {\n        if v\
    \ % 2 == 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n  \
    \  }\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp8_kk4umq_test.go:58: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp8_kk4umq_test.go:58: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp8_kk4umq_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpza694r6z_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpza694r6z_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpza694r6z_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n           \
    \ result = append(result, n)\n        }\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n \
    \   result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9w9486rj_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var res []int\n   \
    \ for n > 1 {\n        if n % 2 == 1 {\n            res = append(res, n)\n   \
    \     }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n  \
    \          n = 3 * n + 1\n        }\n    }\n    res = append(res, 1)\n    return\
    \ res\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpjtpj9ufi_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpjtpj9ufi_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpjtpj9ufi_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpj3mbryjq_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        n = n / 2\n    }\n    result = append(result, 1)\n  \
    \  return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphfo72j0i_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmphfo72j0i_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmphfo72j0i_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // TODO - Add your\
    \ code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmptu0swinf_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = n * 3 + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpj2lcuesz_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpj2lcuesz_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpj2lcuesz_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = n * 3 + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpjyjatw_u_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpjyjatw_u_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpjyjatw_u_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   m := make(map[int]bool)\n    m[n] = true\n    for n != 1 {\n        if n %\
    \ 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n\
    \        }\n        m[n] = true\n    }\n    var result []int\n    for k, _ :=\
    \ range m {\n        if k % 2 == 1 {\n            result = append(result, k)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9thihoqh_test.go:61: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=5)\
    \ %!s(int=17) %!s(int=1) %!s(int=13)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9thihoqh_test.go:61: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var res []int\n    for n != 1 {\n        if n\
    \ % 2 == 1 {\n            res = append(res, n)\n        }\n        if n % 2 ==\
    \ 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n  \
    \      }\n    }\n    res = append(res, 1)\n    return res\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpysnyyfkw_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpysnyyfkw_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpysnyyfkw_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    collatz := []int{n}\n    for n != 1 {\n      \
    \  if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3\
    \ * n + 1\n        }\n        collatz = append(collatz, n)\n    }\n    odd :=\
    \ []int{}\n    for _, n := range collatz {\n        if n % 2 == 1 {\n        \
    \    odd = append(odd, n)\n        }\n    }\n    return odd\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpalo5j6rv_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpalo5j6rv_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpalo5j6rv_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphlek5wmq_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   result := []int{1}\n    for n > 1 {\n        if n % 2 == 0 {\n           \
    \ n = n / 2\n        } else {\n            n = 3 * n + 1\n            result =\
    \ append(result, n)\n        }\n    }\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=22) %!s(int=34)\
    \ %!s(int=52) %!s(int=40) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=16)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpz4cek24g_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=10) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    result := []int{}\n\
    \    for n > 1 {\n        result = append(result, n)\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp5gu_mj_9_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074168
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpnimxhwvp_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo650qs46_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n * 3\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpuddbajt5_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   odd_collatz := []int{}\n    for n > 1 {\n        if n % 2 == 1 {\n       \
    \     odd_collatz = append(odd_collatz, n)\n        }\n        n = n / 2\n   \
    \ }\n    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpdmg35okh_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpdmg35okh_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpdmg35okh_test.go:53: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = n * 3 + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphypjhsts_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphypjhsts_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphypjhsts_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{n}\n    for n != 1 {\n       \
    \ if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3\
    \ * n + 1\n        }\n        result = append(result, n)\n    }\n    return result\n\
    }\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpfcw6otyc_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var collatz []int\n    for n > 1 {\n        collatz\
    \ = append(collatz, n)\n        if n % 2 == 0 {\n            n = n / 2\n     \
    \   } else {\n            n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz,\
    \ 1)\n    var odd_collatz []int\n    for _, v := range collatz {\n        if v\
    \ % 2 == 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n  \
    \  }\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp8_kk4umq_test.go:58: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp8_kk4umq_test.go:58: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp8_kk4umq_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    odd_collatz := []int{}\n    for n > 1 {\n     \
    \   odd_collatz = append(odd_collatz, n)\n        if n % 2 == 0 {\n          \
    \  n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n\
    \    odd_collatz = append(odd_collatz, 1)\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpuec8hwkf_test.go:52: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpuec8hwkf_test.go:52: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpuec8hwkf_test.go:52: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074169
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    var result []int\n    for n > 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp3tx9ixvr_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    // TODO - Add your\
    \ code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n \
    \ candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmptu0swinf_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmptu0swinf_test.go:40: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074061
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n % 2 == 0 {\n        return get_odd_collatz(n\
    \ / 2)\n    }\n    return append(get_odd_collatz(3 * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7qz0z_yb_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppxzh3un2_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n <= 0 {\n     \
    \   return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n \
    \   var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result\
    \ = append(result, n)\n        }\n        if n % 2 == 0 {\n            n = n /\
    \ 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    result\
    \ = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1tf93kx4_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    result := []int{}\n    for n != 1 {\n        if\
    \ n % 2 == 1 {\n            result = append(result, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    result = append(result, 1)\n    return result\n}\n\
    \nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp6ygqpnii_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\nfunc get_odd_collatz(n int) []int {\n    var result []int\n\
    \    if n == 1 {\n        result = append(result, 1)\n        return result\n\
    \    }\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9lkijh97_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp9lkijh97_test.go:55: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9lkijh97_test.go:55: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074056
