name: HumanEval_31_is_prime
language: go_test.go
prompt: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return true if a given number is prime, and false otherwise.\nfunc is_prime(n\
  \ int) bool {\n"
tests: "func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
  \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
  \ candidate(13441), expected: true },\n     { actual: candidate(61), expected: true\
  \ },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
  \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
  \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
  \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
  \ expected: false },\n     { actual: candidate(255379), expected: false },\n   }\n\
  \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
