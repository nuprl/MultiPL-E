language: go_test.go
name: HumanEval_37_sort_even
results:
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list of the same length as l\n    l_new := make([]int,\
    \ len(l))\n    // Copy the odd indicies of l into l_new\n    for i := 0; i < len(l);\
    \ i += 2 {\n        l_new[i] = l[i]\n    }\n    // Create a list of the even indicies\
    \ of l\n    l_even := make([]int, len(l)/2)\n    for i := 0; i < len(l_even);\
    \ i++ {\n        l_even[i] = l[2*i+1]\n    }\n    // Sort the list of even indicies\n\
    \    for i := 0; i < len(l_even); i++ {\n        for j := i+1; j < len(l_even);\
    \ j++ {\n            if l_even[i] > l_even[j] {\n                l_even[i], l_even[j]\
    \ = l_even[j], l_even[i]\n            }\n        }\n    }\n    // Copy the sorted\
    \ list of even indicies into l_new\n    for i := 0; i < len(l_even); i++ {\n \
    \       l_new[2*i+1] = l_even[i]\n    }\n    return l_new\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpkepp79v2_test.go:53: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpkepp79v2_test.go:53:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We need to make a copy of l, since we will be modifying the\
    \ values of l'\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n\n   \
    \ // We will be sorting the even indicies of l_copy\n    // We will use the insertion\
    \ sort algorithm, since it is simple and efficient for small lists\n    for i\
    \ := 2; i < len(l_copy); i += 2 {\n        // We will be inserting the value at\
    \ index i into the sorted sublist l_copy[0:i]\n        // We will start by assuming\
    \ that the value at index i is the smallest value in the sublist\n        min_index\
    \ := i\n        for j := 0; j < i; j += 2 {\n            if l_copy[j] < l_copy[min_index]\
    \ {\n                min_index = j\n            }\n        }\n\n        // Now\
    \ we know that the value at index min_index is the smallest value in the sublist\n\
    \        // We will swap the values at indicies i and min_index\n        l_copy[i],\
    \ l_copy[min_index] = l_copy[min_index], l_copy[i]\n    }\n\n    return l_copy\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpz8xxcurf_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpz8xxcurf_test.go:51: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=0) %!s(int=-5) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpz8xxcurf_test.go:51:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=12) %!s(int=11) %!s(int=-12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    // find the first\
    \ even index\n    var i int\n    for i = 0; i < len(l); i++ {\n        if i %\
    \ 2 == 0 {\n            break\n        }\n    }\n    // if there are no even indicies,\
    \ return the list\n    if i == len(l) {\n        return l\n    }\n    // find\
    \ the last even index\n    var j int\n    for j = len(l) - 1; j >= 0; j-- {\n\
    \        if j % 2 == 0 {\n            break\n        }\n    }\n    // sort the\
    \ even indicies\n    for i < j {\n        if l[i] > l[i+1] {\n            l[i],\
    \ l[i+1] = l[i+1], l[i]\n        }\n        i += 2\n    }\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp9r5hwsyl_test.go:58: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp9r5hwsyl_test.go:58:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Make a copy of the list\n    l_copy := make([]int, len(l))\n\
    \    copy(l_copy, l)\n\n    // Sort the even indicies\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We first make a copy of l, so that we can modify it without\
    \ affecting l.\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n\n   \
    \ // We now sort the even indicies of l_copy.\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Your code here\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps9_eq1uy_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps9_eq1uy_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        return l\n    }\n   \
    \ if len(l) == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n  \
    \      }\n        return l\n    }\n    if len(l) == 6 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[4] > l[5] {\n  \
    \          l[4], l[5] = l[5], l[4]\n        }\n        return l\n    }\n    if\
    \ len(l) == 7 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzdhid7k7_test.go:67:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var l_even []int\n    for i, v := range l {\n        if i % 2 ==\
    \ 0 {\n            l_even = append(l_even, v)\n        }\n    }\n    sort(l_even)\n\
    \    for i, v := range l_even {\n        l[i] = v\n    }\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp950wwqmz_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var even_indices []int\n    var odd_indices []int\n    var even_values\
    \ []int\n    var odd_values []int\n    var result []int\n    for i, v := range\
    \ l {\n        if i % 2 == 0 {\n            even_indices = append(even_indices,\
    \ i)\n            even_values = append(even_values, v)\n        } else {\n   \
    \         odd_indices = append(odd_indices, i)\n            odd_values = append(odd_values,\
    \ v)\n        }\n    }\n    for _, v := range even_indices {\n        result =\
    \ append(result, v)\n    }\n    for _, v := range odd_indices {\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpdo_xkdjm_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpdo_xkdjm_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8) %!s(int=10) %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpdo_xkdjm_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Make a copy of l\n    l_copy := make([]int, len(l))\n    copy(l_copy,\
    \ l)\n\n    // Sort the even indicies of l_copy\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        return l\n    }\n   \
    \ if len(l) == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n  \
    \      }\n        return l\n    }\n    if len(l) == 6 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[4] > l[5] {\n  \
    \          l[4], l[5] = l[5], l[4]\n        }\n        return l\n    }\n    if\
    \ len(l) == 7 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzdhid7k7_test.go:67:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    // make a copy of\
    \ l\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n    // sort the even\
    \ indicies\n    for i := 0; i < len(l_copy); i += 2 {\n        for j := i + 2;\
    \ j < len(l_copy); j += 2 {\n            if l_copy[i] > l_copy[j] {\n        \
    \        l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n            }\n        }\n\
    \    }\n    return l_copy\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We first create a copy of l, and then sort it.\n    l_copy :=\
    \ make([]int, len(l))\n    copy(l_copy, l)\n    sort(l_copy)\n\n    // We then\
    \ create a new list l' of the same length as l.\n    l_prime := make([]int, len(l))\n\
    \n    // We then iterate through l, and copy its values into l' at the odd indicies.\n\
    \    for i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n\n  \
    \  // We then iterate through l_copy, and copy its values into l' at the even\
    \ indicies.\n    for i := 0; i < len(l_copy); i += 2 {\n        l_prime[i] = l_copy[i]\n\
    \    }\n\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x3mti5z_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        return l\n    }\n   \
    \ if len(l) == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n  \
    \      }\n        return l\n    }\n    if len(l) == 6 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[4] > l[5] {\n  \
    \          l[4], l[5] = l[5], l[4]\n        }\n        return l\n    }\n    if\
    \ len(l) == 7 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzdhid7k7_test.go:67:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // This is the list we will return.\n    var ret []int\n    //\
    \ This is the list of even indicies of l.\n    var even []int\n    // This is\
    \ the list of odd indicies of l.\n    var odd []int\n    // This is the list of\
    \ even indicies of l, sorted.\n    var even_sorted []int\n    // This is the list\
    \ of odd indicies of l, sorted.\n    var odd_sorted []int\n    // This is the\
    \ list of even indicies of l, sorted, in reverse order.\n    var even_sorted_rev\
    \ []int\n    // This is the list of odd indicies of l, sorted, in reverse order.\n\
    \    var odd_sorted_rev []int\n    // This is the list of even indicies of l,\
    \ sorted, in reverse order, with the first element removed.\n    var even_sorted_rev_1\
    \ []int\n    // This is the list of odd indicies of l, sorted, in reverse order,\
    \ with the first element removed.\n    var odd_sorted_rev_1 []int\n    // This\
    \ is the list of even indicies of l, sorted, in reverse order, with the last element\
    \ removed.\n    var even_sorted_rev_2 []int\n    // This is the list of odd indicies\
    \ of l, sorted, in reverse order, with the last element removed.\n    var odd_sorted_rev_2\
    \ []int\n    // This is the list of even indicies of l, sorted, in reverse order,\
    \ with the first and last elements removed.\n    var even_sorted_rev_3 []int\n\
    \    // This is the list of odd indicies of l, sorted, in reverse order, with\
    \ the first and last elements removed.\n    var odd_sorted_rev_3 []int\n    //\
    \ This is the list of even indicies of l, sorted, in reverse order, with the first\
    \ and last elements removed,\n    // and the first element of the list of odd\
    \ indicies of l, sorted, in reverse order, with the first and last elements removed.\n\
    \    var even_sorted_rev_4 []int\n    // This is the list of odd indicies of l,\
    \ sorted, in reverse order, with the first and last elements removed,\n    //\
    \ and the\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1z1insyo_test.go:43:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    var evens []int\n\
    \    var odds []int\n    for i, v := range l {\n        if i % 2 == 0 {\n    \
    \        evens = append(evens, v)\n        } else {\n            odds = append(odds,\
    \ v)\n        }\n    }\n    evens = merge_sort(evens)\n    var result []int\n\
    \    for i, v := range odds {\n        if i < len(evens) {\n            result\
    \ = append(result, evens[i])\n        }\n        result = append(result, v)\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmw0mx40_test.go:24:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Make a copy of l\n    l_copy := make([]int, len(l))\n    copy(l_copy,\
    \ l)\n\n    // Sort the even indicies of l_copy\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // This is the list we will return\n    var ret []int\n\n    //\
    \ This is the list of even indicies of l\n    var evens []int\n\n    // This is\
    \ the list of odd indicies of l\n    var odds []int\n\n    // This is the list\
    \ of values at the even indicies of l\n    var evens_vals []int\n\n    // This\
    \ is the list of values at the odd indicies of l\n    var odds_vals []int\n\n\
    \    // This is the length of l\n    var len_l int = len(l)\n\n    // This is\
    \ the length of the even indicies of l\n    var len_evens int = len_l / 2\n\n\
    \    // This is the length of the odd indicies of l\n    var len_odds int = len_l\
    \ - len_evens\n\n    // This is the value of the current index of l\n    var val\
    \ int\n\n    // This is the current index of l\n    var i int\n\n    // This is\
    \ the current index of evens\n    var j int\n\n    // This is the current index\
    \ of odds\n    var k int\n\n    // This is the current index of evens_vals\n \
    \   var m int\n\n    // This is the current index of odds_vals\n    var n int\n\
    \n    // This is the current index of ret\n    var p int\n\n    // This is the\
    \ length of ret\n    var len_ret int = len_l\n\n    // Initialize evens\n    evens\
    \ = make([]int, len_evens)\n\n    // Initialize odds\n    odds = make([]int, len_odds)\n\
    \n    // Initialize evens_vals\n    evens_vals = make([]int, len_evens)\n\n  \
    \  // Initialize odds_vals\n    odds_vals = make([]int, len_odds)\n\n    // Initialize\
    \ ret\n    ret = make([]int, len_ret)\n\n    // Iterate through l\n    for i =\
    \ 0; i < len_l; i++ {\n        // Get the value at the current index of l\n  \
    \      val = l[i]\n\n        // If the current index of l is even\n        if\
    \ i % 2 == 0 {\n            // Append the current index of l to evens\n      \
    \      evens[j]\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzll57gzc_test.go:84:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    // Create a new\
    \ list l' of the same length as l\n    l_prime := make([]int, len(l))\n    //\
    \ Copy the odd indicies of l into l'\n    for i := 0; i < len(l); i += 2 {\n \
    \       l_prime[i] = l[i]\n    }\n    // Sort the even indicies of l\n    for\
    \ i := 1; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n\
    \            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n     \
    \       }\n        }\n    }\n    // Copy the even indicies of l into l'\n    for\
    \ i := 1; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    return l_prime\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpdzgtw7_z_test.go:51: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpdzgtw7_z_test.go:51:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // If the list is empty, return an empty list.\n    if len(l) ==\
    \ 0 {\n        return l\n    }\n    // If the list is of length 1, return the\
    \ list.\n    if len(l) == 1 {\n        return l\n    }\n    // If the list is\
    \ of length 2, return the list in sorted order.\n    if len(l) == 2 {\n      \
    \  if l[0] > l[1] {\n            return []int{l[1], l[0]}\n        }\n       \
    \ return l\n    }\n    // If the list is of length 3, return the list with the\
    \ even indicies sorted.\n    if len(l) == 3 {\n        if l[0] > l[2] {\n    \
    \        return []int{l[2], l[1], l[0]}\n        }\n        return l\n    }\n\
    \    // If the list is of length 4, return the list with the even indicies sorted.\n\
    \    if len(l) == 4 {\n        if l[0] > l[2] {\n            if l[2] > l[4] {\n\
    \                return []int{l[4], l[1], l[2], l[3]}\n            }\n       \
    \     if l[0] > l[4] {\n                return []int{l[2], l[1], l[4], l[3]}\n\
    \            }\n            return []int{l[2], l[1], l[0], l[3]}\n        }\n\
    \        if l[0] > l[4] {\n            return []int{l[2], l[1], l[4], l[3]}\n\
    \        }\n        return l\n    }\n    // If the list is of length 5, return\
    \ the list with the even indicies sorted.\n    if len(l) == 5 {\n        if l[0]\
    \ > l[2] {\n            if l[2] > l[4] {\n                if l[4] > l[6] {\n \
    \                   return []int{l[6], l[1], l[2], l[3], l[4]}\n             \
    \   }\n                if l[0] > l[6] {\n                    return []int{l[4],\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy22p1wys_test.go:59:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // This is the list we will return\n    ret := make([]int, len(l))\n\
    \    // This is the list of even indicies\n    even := make([]int, 0)\n    //\
    \ This is the list of odd indicies\n    odd := make([]int, 0)\n    // This is\
    \ the list of even indicies, sorted\n    even_sorted := make([]int, 0)\n    //\
    \ This is the list of odd indicies, sorted\n    odd_sorted := make([]int, 0)\n\
    \    // This is the list of even indicies, sorted\n    even_sorted = make([]int,\
    \ 0)\n    // This is the list of odd indicies, sorted\n    odd_sorted = make([]int,\
    \ 0)\n    // This is the list of even indicies, sorted\n    even_sorted = make([]int,\
    \ 0)\n    // This is the list of odd indicies, sorted\n    odd_sorted = make([]int,\
    \ 0)\n    // This is the list of even indicies, sorted\n    even_sorted = make([]int,\
    \ 0)\n    // This is the list of odd indicies, sorted\n    odd_sorted = make([]int,\
    \ 0)\n    // This is the list of even indicies, sorted\n    even_sorted = make([]int,\
    \ 0)\n    // This is the list of odd indicies, sorted\n    odd_sorted = make([]int,\
    \ 0)\n    // This is the list of even indicies, sorted\n    even_sorted = make([]int,\
    \ 0)\n    // This is the list of odd indicies, sorted\n    odd_sorted = make([]int,\
    \ 0)\n    // This is the list of even indicies, sorted\n    even_sorted = make([]int,\
    \ 0)\n    // This is the list of odd indicies, sorted\n    odd_sorted = make([]int,\
    \ 0)\n    // This is the list of even indicies, sorted\n    even_sorted = make([]int,\
    \ 0)\n    // This is the list of odd indicies, sorted\n    odd_sorted = make([]int,\
    \ 0)\n    // This is the list of even indicies, sorted\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmmyllc7m_test.go:51:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    // This is the list\
    \ we will return.\n    var ret []int\n    // This is the list of even indicies.\n\
    \    var evens []int\n    // This is the list of odd indicies.\n    var odds []int\n\
    \    // This is the list of even indicies, sorted.\n    var evens_sorted []int\n\
    \    // This is the list of odd indicies, sorted.\n    var odds_sorted []int\n\
    \    // This is the list of even indicies, sorted, but with the indicies shifted\
    \ by one.\n    var evens_sorted_shifted []int\n    // This is the list of odd\
    \ indicies, sorted, but with the indicies shifted by one.\n    var odds_sorted_shifted\
    \ []int\n    // This is the list of even indicies, sorted, but with the indicies\
    \ shifted by one,\n    // and with the last element removed.\n    var evens_sorted_shifted_trimmed\
    \ []int\n    // This is the list of odd indicies, sorted, but with the indicies\
    \ shifted by one,\n    // and with the last element removed.\n    var odds_sorted_shifted_trimmed\
    \ []int\n    // This is the list of even indicies, sorted, but with the indicies\
    \ shifted by one,\n    // and with the last element removed, and with the first\
    \ element removed.\n    var evens_sorted_shifted_trimmed_trimmed []int\n    //\
    \ This is the list of odd indicies, sorted, but with the indicies shifted by one,\n\
    \    // and with the last element removed, and with the first element removed.\n\
    \    var odds_sorted_shifted_trimmed_trimmed []int\n    // This is the list of\
    \ even indicies, sorted, but with the indicies shifted by one,\n    // and with\
    \ the last element removed, and with the first element removed,\n    // and with\
    \ the last element removed.\n    var evens_sorted_shifted_trimmed_trimmed_trimmed\
    \ []int\n    // This is the list of odd indicies, sorted, but with the indicies\
    \ shifted by one,\n    // and with\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpop2vpkv8_test.go:47:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a slice of the even indicies of l\n    evens := l[1::2]\n\
    \    // Create a slice of the odd indicies of l\n    odds := l[0::2]\n    // Sort\
    \ the slice of even indicies\n    for i := 0; i < len(evens); i++ {\n        for\
    \ j := i + 1; j < len(evens); j++ {\n            if evens[i] > evens[j] {\n  \
    \              evens[i], evens[j] = evens[j], evens[i]\n            }\n      \
    \  }\n    }\n    // Create a slice to hold the sorted list\n    sorted := make([]int,\
    \ len(l))\n    // Copy the odd indicies into the sorted list\n    copy(sorted,\
    \ odds)\n    // Copy the even indicies into the sorted list\n    copy(sorted[1::2],\
    \ evens)\n    // Return the sorted list\n    return sorted\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptwancqz3_test.go:13:17: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We will use a new slice to store the result.\n    // We will\
    \ also use a map to store the even indicies of l.\n    var result []int\n    even_indicies\
    \ := make(map[int]int)\n    for i, v := range l {\n        if i % 2 == 0 {\n \
    \           even_indicies[i] = v\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    // Now we sort the even indicies.\n    var even_indicies_sorted\
    \ []int\n    for _, v := range even_indicies {\n        even_indicies_sorted =\
    \ append(even_indicies_sorted, v)\n    }\n    for i := 0; i < len(even_indicies_sorted);\
    \ i++ {\n        for j := i + 1; j < len(even_indicies_sorted); j++ {\n      \
    \      if even_indicies_sorted[i] > even_indicies_sorted[j] {\n              \
    \  even_indicies_sorted[i], even_indicies_sorted[j] = even_indicies_sorted[j],\
    \ even_indicies_sorted[i]\n            }\n        }\n    }\n    // Now we append\
    \ the sorted even indicies to the result.\n    for _, v := range even_indicies_sorted\
    \ {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprbxeutck_test.go:57: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmprbxeutck_test.go:57: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=-10) %!s(int=-5) %!s(int=-3) %!s(int=5) %!s(int=9) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprbxeutck_test.go:57:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=8) %!s(int=4)\
    \ %!s(int=2) %!s(int=11) %!s(int=-10) %!s(int=-12) %!s(int=3) %!s(int=5) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        return l\n    }\n   \
    \ if len(l) == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n  \
    \      }\n        return l\n    }\n    if len(l) == 6 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[4] > l[5] {\n  \
    \          l[4], l[5] = l[5], l[4]\n        }\n        return l\n    }\n    if\
    \ len(l) == 7 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzdhid7k7_test.go:67:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We first create a copy of the list l, so that we can modify\
    \ it without\n    // changing the original list.\n    l_copy := make([]int, len(l))\n\
    \    copy(l_copy, l)\n\n    // We now create a list of the even indicies of l_copy.\n\
    \    even_indicies := []int{}\n    for i := 0; i < len(l_copy); i++ {\n      \
    \  if i % 2 == 0 {\n            even_indicies = append(even_indicies, i)\n   \
    \     }\n    }\n\n    // We now sort the even indicies of l_copy.\n    for i :=\
    \ 0; i < len(even_indicies); i++ {\n        for j := i + 1; j < len(even_indicies);\
    \ j++ {\n            if l_copy[even_indicies[i]] > l_copy[even_indicies[j]] {\n\
    \                l_copy[even_indicies[i]], l_copy[even_indicies[j]] = l_copy[even_indicies[j]],\
    \ l_copy[even_indicies[i]]\n            }\n        }\n    }\n\n    return l_copy\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a slice to hold the result\n    result := make([]int,\
    \ len(l))\n    // Copy the odd indicies of l into result\n    for i := 0; i <\
    \ len(l); i += 2 {\n        result[i] = l[i]\n    }\n    // Sort the even indicies\
    \ of l\n    for i := 1; i < len(l); i += 2 {\n        for j := i + 2; j < len(l);\
    \ j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    // Copy the sorted even indicies of l into\
    \ result\n    for i := 1; i < len(l); i += 2 {\n        result[i] = l[i]\n   \
    \ }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp67m0v8r0_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp67m0v8r0_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Make a copy of l\n    l_copy := make([]int, len(l))\n    copy(l_copy,\
    \ l)\n\n    // Sort the even indicies of l_copy\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    // Return the result\n    return l_copy\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list to hold the result\n    result := make([]int,\
    \ len(l))\n    // Copy the odd indicies of l into result\n    for i := 0; i <\
    \ len(l); i += 2 {\n        result[i] = l[i]\n    }\n    // Sort the even indicies\
    \ of l\n    for i := 1; i < len(l); i += 2 {\n        for j := i + 2; j < len(l);\
    \ j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    // Copy the even indicies of l into result\n\
    \    for i := 1; i < len(l); i += 2 {\n        result[i] = l[i]\n    }\n    return\
    \ result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpmb7x5ksf_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpmb7x5ksf_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    for i, v := range l {\n        if i % 2 ==\
    \ 0 {\n            evens = append(evens, v)\n        }\n    }\n    for i, v :=\
    \ range evens {\n        for j := i + 1; j < len(evens); j++ {\n            if\
    \ evens[j] < v {\n                evens[i], evens[j] = evens[j], evens[i]\n  \
    \          }\n        }\n    }\n    for i, v := range l {\n        if i % 2 ==\
    \ 0 {\n            l[i] = evens[i / 2]\n        }\n    }\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_sjdvpzm_test.go:25:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var l_even []int\n    var l_odd []int\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            l_even = append(l_even, v)\n       \
    \ } else {\n            l_odd = append(l_odd, v)\n        }\n    }\n    sort(l_even)\n\
    \    var l_prime []int\n    for i, v := range l_odd {\n        l_prime = append(l_prime,\
    \ l_even[i])\n        l_prime = append(l_prime, v)\n    }\n    return l_prime\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf21idil4_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    // We will use the\
    \ merge sort algorithm to sort the even indicies.\n    // First, we will split\
    \ the list into two halves.\n    // We will do this by creating two slices, l1\
    \ and l2, and copying the values of l into them.\n    l1 := make([]int, len(l)/2)\n\
    \    l2 := make([]int, len(l) - len(l)/2)\n    copy(l1, l)\n    copy(l2, l[len(l)/2:])\n\
    \    // Now, we will recursively call sort_even on l1 and l2.\n    l1 = sort_even(l1)\n\
    \    l2 = sort_even(l2)\n    // Now, we will merge the two lists.\n    // We will\
    \ do this by creating a new slice, l3, and copying the values of l1 and l2 into\
    \ it.\n    l3 := make([]int, len(l))\n    i := 0\n    j := 0\n    for i < len(l1)\
    \ && j < len(l2) {\n        if l1[i] < l2[j] {\n            l3[i+j] = l1[i]\n\
    \            i++\n        } else {\n            l3[i+j] = l2[j]\n            j++\n\
    \        }\n    }\n    for i < len(l1) {\n        l3[i+j] = l1[i]\n        i++\n\
    \    }\n    for j < len(l2) {\n        l3[i+j] = l2[j]\n        j++\n    }\n \
    \   // Now, we will copy the values of l3 into l.\n    for i := 0; i < len(l);\
    \ i++ {\n        if i % 2 == 0 {\n            l[i] = l3[i]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170390\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x0?, 0x4fd720?, 0x1?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909 +0x91d fp=0xc0201703a0\
    \ sp=0xc020170398 pc=0x40cf1d\nruntime.makeslice(0x2af4d99f9108?, 0x10?, 0xc0000c6400?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:103 +0x52 fp=0xc0201703c8\
    \ sp=0xc0201703a0 pc=0x449bb2\ncommand-line-arguments_test.sort_even({0xc002acc8f0?,\
    \ 0x1, 0x1})\n\t/tmp/tmpr4ajderz_test.go:18 +0x52 fp=0xc020170430 sp=0xc0201703c8\
    \ pc=0x4ef6b2\ncommand-line-arguments_test.sort_even({0xc002acc8e8?, 0x1, 0x1})\n\
    \t/tmp/tmpr4ajderz_test.go:24 +0x14a fp=0xc020170498 sp=0xc020170430 pc=0x4ef7aa\n\
    command-line-arguments_test.sort_even({0xc002acc8e0?, 0x1, 0x1})\n\t/tmp/tmpr4ajderz_test.go:24\
    \ +0x14a fp=0xc020170500 sp=0xc020170498 pc=0x4ef7aa\ncommand-line-arguments_test.sort_even({0xc002acc8d8?,\
    \ 0x1, 0x1})\n\t/tmp/tmpr4ajderz_test.go:24 +0x14a fp=0xc020170568 sp=0xc020170500\
    \ pc=0x4ef7aa\ncommand-line-arguments_test.sort_even({0xc002acc8d0?, 0x1, 0x1})\n\
    \t/tmp/tmpr4ajderz_test.go:24 +0x14a fp=0xc0201705d0 sp=0xc020170568 pc=0x4ef7aa\n\
    command-line-arguments_test.sort_even({0xc002acc8c8?, 0x1, 0x1})\n\t/tmp/tmpr4ajderz_test.go:24\
    \ +0x14a fp=0xc020170638 sp=0xc0201705d0 pc=0x4ef7aa\ncommand-line-arguments_test.sort_even({0xc002acc8c0?,\
    \ 0x1, 0x1})\n\t/tmp/tmpr4ajderz_test.go:24 +0x14a fp=0xc0201706a0 sp=0xc020170638\
    \ pc=0x4ef7aa\ncommand-line-arguments_test.sort_even({0xc002acc8b8?, 0x1, 0x1})\n\
    \t/tmp/tmpr4ajderz_test.go:24 +0x14a fp=0xc020170708 sp=0xc0201706a0 pc=0x4ef7aa\n\
    command-line-arguments_test.sort_even({0xc002acc8b0?, 0x1, 0x1})\n\t/tmp/tmpr4ajderz_test.go:"
  timestamp: 1660073914
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list with the same length as l\n    l2 := make([]int,\
    \ len(l))\n    // Copy the odd indicies of l into l2\n    for i := 0; i < len(l);\
    \ i += 2 {\n        l2[i] = l[i]\n    }\n    // Sort the even indicies of l\n\
    \    for i := 1; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    // Copy the even indicies of l into l2\n\
    \    for i := 1; i < len(l); i += 2 {\n        l2[i] = l[i]\n    }\n    return\
    \ l2\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpqby8qmyx_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpqby8qmyx_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         return []int{l[1], l[0]}\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[1] > l[2] {\n            l[1], l[2] = l[2], l[1]\n  \
    \      }\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n    \
    \    }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[0] > l[2] {\n  \
    \          l[0], l[2] = l[2], l[0]\n        }\n        if l[1] > l[3] {\n    \
    \        l[1], l[3] = l[3], l[1]\n        }\n        if l[1] > l[2] {\n      \
    \      l[1], l[2] = l[2], l[1]\n        }\n        return l\n    }\n    if len(l)\
    \ == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n    \
    \    }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n      \
    \  }\n        if l[4] > l[2] {\n            l[4], l[2] = l[2], l[4]\n        }\n\
    \       \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk44thin0_test.go:65:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        return l\n    }\n   \
    \ if len(l) == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n  \
    \      }\n        return l\n    }\n    if len(l) == 6 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[4] > l[5] {\n  \
    \          l[4], l[5] = l[5], l[4]\n        }\n        return l\n    }\n    if\
    \ len(l) == 7 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzdhid7k7_test.go:67:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    var evens []int\n\
    \    for i := 0; i < len(l); i += 2 {\n        evens = append(evens, l[i])\n \
    \   }\n    evens = sort(evens)\n    var l2 []int\n    for i := 0; i < len(l);\
    \ i += 2 {\n        l2 = append(l2, evens[i/2])\n        if i + 1 < len(l) {\n\
    \            l2 = append(l2, l[i+1])\n        }\n    }\n    return l2\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxk75jpq0_test.go:19:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We will use the merge sort algorithm to sort the even indicies.\n\
    \    // We will use the merge function from the merge sort algorithm.\n    //\
    \ This function takes two sorted lists and returns a sorted list\n    // that\
    \ is the concatenation of the two lists.\n    merge := func(l1, l2 []int) []int\
    \ {\n        // We will use the merge sort algorithm to sort the even indicies.\n\
    \        // We will use the merge function from the merge sort algorithm.\n  \
    \      // This function takes two sorted lists and returns a sorted list\n   \
    \     // that is the concatenation of the two lists.\n        merge := func(l1,\
    \ l2 []int) []int {\n            // We will use the merge sort algorithm to sort\
    \ the even indicies.\n            // We will use the merge function from the merge\
    \ sort algorithm.\n            // This function takes two sorted lists and returns\
    \ a sorted list\n            // that is the concatenation of the two lists.\n\
    \            merge := func(l1, l2 []int) []int {\n                // We will use\
    \ the merge sort algorithm to sort the even indicies.\n                // We will\
    \ use the merge function from the merge sort algorithm.\n                // This\
    \ function takes two sorted lists and returns a sorted list\n                //\
    \ that is the concatenation of the two lists.\n                merge := func(l1,\
    \ l2 []int) []int {\n                    // We will use the merge sort algorithm\
    \ to sort the even indicies.\n                    // We will use the merge function\
    \ from the merge sort algorithm.\n                    // This function takes two\
    \ sorted lists and returns a sorted list\n                    // that is the concatenation\
    \ of the two lists.\n                    merge := func(l1, l2 []int) []int {\n\
    \                        // We will use the merge sort algorithm to sort the even\
    \ indicies.\n                        // We will use the merge function from the\
    \ merge sort algorithm.\n                        // This function takes two sorted\
    \ lists and returns a sorted list\n                        // that is the concatenation\
    \ of the two lists.\n                        merge := func(l1, l2 []int) []int\
    \ {\n                            // We will use the merge sort algorithm to sort\
    \ the even indicies.\n                            // We will use the merge function\
    \ from the merge sort algorithm.\n                            // This function\
    \ takes two sorted lists and returns a sorted list\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj9868__7_test.go:46:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list l' with the same length as l.\n    l_prime\
    \ := make([]int, len(l))\n    // Copy the odd indicies of l into l'.\n    for\
    \ i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    // Sort\
    \ the even indicies of l.\n    for i := 1; i < len(l); i += 2 {\n        for j\
    \ := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n             \
    \   l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // Copy the\
    \ even indicies of l into l'.\n    for i := 1; i < len(l); i += 2 {\n        l_prime[i]\
    \ = l[i]\n    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2_bkzq1z_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2_bkzq1z_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // The length of the list.\n    n := len(l)\n    // The list to\
    \ be returned.\n    l_prime := make([]int, n)\n    // The index of the first even\
    \ index.\n    i := 0\n    // The index of the last even index.\n    j := n - 1\n\
    \    // The index of the current even index.\n    k := 0\n    // The index of\
    \ the current odd index.\n    m := 1\n    // The index of the current element\
    \ in l_prime.\n    p := 0\n    // The number of even indicies.\n    num_even :=\
    \ n / 2\n    // The number of odd indicies.\n    num_odd := n - num_even\n   \
    \ // The number of elements in the even indicies of l.\n    num_even_elements\
    \ := num_even / 2\n    // The number of elements in the odd indicies of l.\n \
    \   num_odd_elements := num_odd / 2\n    // The number of elements in the even\
    \ indicies of l_prime.\n    num_even_prime_elements := num_even_elements + num_odd_elements\n\
    \    // The number of elements in the odd indicies of l_prime.\n    num_odd_prime_elements\
    \ := num_even_elements + num_odd_elements\n    // The number of elements in the\
    \ even indicies of l_prime that have been sorted.\n    num_even_prime_elements_sorted\
    \ := 0\n    // The number of elements in the odd indicies of l_prime that have\
    \ been sorted.\n    num_odd_prime_elements_sorted := 0\n    // The number of elements\
    \ in the even indicies of l that have been sorted.\n    num_even_elements_sorted\
    \ := 0\n    // The number of elements in the odd indicies of l that have been\
    \ sorted.\n    num_odd_elements_sorted := 0\n    // The number of elements in\
    \ the even indicies of l that have been sorted.\n    num_even_elements_sorted_prime\
    \ := 0\n    // The number of elements in the odd indicies of l that have been\
    \ sorted.\n    num_odd_elements_sorted_prime := 0\n    // The\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_jlpe88v_test.go:51:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Write this function.\n    // Hint: You can use the sort\
    \ package.\n    // Hint: You can use the append function.\n    // Hint: You can\
    \ use the len function.\n    // Hint: You can use the make function.\n    // Hint:\
    \ You can use the copy function.\n    // Hint: You can use the append function.\n\
    \    // Hint: You can use the append function.\n    // Hint: You can use the append\
    \ function.\n    // Hint: You can use the append function.\n    // Hint: You can\
    \ use the append function.\n    // Hint: You can use the append function.\n  \
    \  // Hint: You can use the append function.\n    // Hint: You can use the append\
    \ function.\n    // Hint: You can use the append function.\n    // Hint: You can\
    \ use the append function.\n    // Hint: You can use the append function.\n  \
    \  // Hint: You can use the append function.\n    // Hint: You can use the append\
    \ function.\n    // Hint: You can use the append function.\n    // Hint: You can\
    \ use the append function.\n    // Hint: You can use the append function.\n  \
    \  // Hint: You can use the append function.\n    // Hint: You can use the append\
    \ function.\n    // Hint: You can use the append function.\n    // Hint: You can\
    \ use the append function.\n    // Hint: You can use the append function.\n  \
    \  // Hint: You can use the append function.\n    // Hint: You can use the append\
    \ function.\n    // Hint: You can use the append function.\n    // Hint: You can\
    \ use the append function.\n    // Hint: You can use the append function.\n  \
    \  // Hint: You can use the append function.\n    // Hint: You can use the append\
    \ function.\n    // Hint: You can use the append function.\n    // Hint: You can\
    \ use the append function.\n    // Hint: You can use the append function.\n  \
    \  // Hint: You can use the append function.\n    // Hint: You can use the append\
    \ function.\n    // Hint: You can\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0edn5dyn_test.go:52:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    // Create a new\
    \ list to hold the result\n    res := make([]int, len(l))\n    // Copy the odd\
    \ indicies of l into res\n    for i := 0; i < len(l); i += 2 {\n        res[i]\
    \ = l[i]\n    }\n    // Sort the even indicies of l\n    for i := 1; i < len(l);\
    \ i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i]\
    \ > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n    // Copy the even indicies of l into res\n    for i := 1; i < len(l);\
    \ i += 2 {\n        res[i] = l[i]\n    }\n    return res\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpk2o9tgm6_test.go:51: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpk2o9tgm6_test.go:51:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We will use the merge sort algorithm to sort the even indicies.\n\
    \    // The merge sort algorithm is a recursive algorithm that works as follows:\n\
    \    // 1. If the list has only one element, return the list.\n    // 2. Split\
    \ the list into two lists of equal length.\n    // 3. Recursively sort the two\
    \ lists.\n    // 4. Merge the two sorted lists into a single sorted list.\n  \
    \  //\n    // We will use the following helper functions:\n    //\n    // merge(l1,\
    \ l2) takes two sorted lists l1 and l2 and merges them into a single sorted list.\n\
    \    //\n    // split(l) takes a list l and splits it into two lists of equal\
    \ length.\n    //\n    // sort_even_helper(l, i, j) takes a list l and two indicies\
    \ i and j, and returns a list l'\n    // such that l' is identical to l in the\
    \ indicies in the range [i, j), while its values at the\n    // even indicies\
    \ in the range [i, j) are equal to the values of the even indicies in the range\n\
    \    // [i, j) of l, but sorted.\n    //\n    // sort_even_helper(l, i, j) works\
    \ as follows:\n    // 1. If j - i <= 1, return l.\n    // 2. Let m = (i + j) /\
    \ 2.\n    // 3. Recursively call sort_even_helper(l, i, m).\n    // 4. Recursively\
    \ call sort_even_helper(l, m, j).\n    // 5. Merge the two sorted lists l[i:m]\
    \ and l[m:j] into a single sorted list.\n    // 6. Return the merged list.\n \
    \   //\n    // sort_even(l) works as follows:\n    // 1. Call sort_even_helper(l,\
    \ 0, len(l)).\n    // 2. Return the result.\n    return sort_even_helper(l, 0,\
    \ len(l))\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjm5kjlmk_test.go:41:12: undefined: sort_even_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    var odds []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        } else\
    \ {\n            odds = append(odds, v)\n        }\n    }\n    evens = sort(evens)\n\
    \    var result []int\n    for i, v := range odds {\n        if i == 0 {\n   \
    \         result = append(result, evens[i])\n        }\n        result = append(result,\
    \ v)\n        if i < len(evens) - 1 {\n            result = append(result, evens[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9e5t7oh_test.go:21:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    // Make a copy of\
    \ the list\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n    // Sort\
    \ the even indicies\n    for i := 0; i < len(l_copy); i += 2 {\n        for j\
    \ := i + 2; j < len(l_copy); j += 2 {\n            if l_copy[i] > l_copy[j] {\n\
    \                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n            }\n\
    \        }\n    }\n    return l_copy\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    // We need to make\
    \ a copy of l, because we will be modifying it.\n    l_copy := make([]int, len(l))\n\
    \    copy(l_copy, l)\n    // We will be sorting the even indicies of l_copy.\n\
    \    // We will be using the odd indicies of l_copy to store the sorted even indicies\
    \ of l_copy.\n    // We will be using the even indicies of l_copy to store the\
    \ sorted odd indicies of l_copy.\n    // We will be using the odd indicies of\
    \ l to store the sorted odd indicies of l.\n    // We will be using the even indicies\
    \ of l to store the sorted even indicies of l.\n    // We will be using the even\
    \ indicies of l_copy to store the sorted even indicies of l_copy.\n    // We will\
    \ be using the odd indicies of l_copy to store the sorted odd indicies of l_copy.\n\
    \    // We will be using the even indicies of l to store the sorted even indicies\
    \ of l.\n    // We will be using the odd indicies of l to store the sorted odd\
    \ indicies of l.\n    // We will be using the even indicies of l_copy to store\
    \ the sorted even indicies of l_copy.\n    // We will be using the odd indicies\
    \ of l_copy to store the sorted odd indicies of l_copy.\n    // We will be using\
    \ the even indicies of l to store the sorted even indicies of l.\n    // We will\
    \ be using the odd indicies of l to store the sorted odd indicies of l.\n    //\
    \ We will be using the even indicies of l_copy to store the sorted even indicies\
    \ of l_copy.\n    // We will be using the odd indicies of l_copy to store the\
    \ sorted odd indicies of l_copy.\n    // We will be using the even indicies of\
    \ l to store the sorted even indicies of l.\n    // We will be using the odd indicies\
    \ of l to store the sorted odd indicies of l.\n    // We will be using the even\
    \ indicies of l_copy to store the sorted even indicies of l_copy.\n    // We will\
    \ be using the\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmepvsswh_test.go:37:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073912
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        return l\n    }\n   \
    \ if len(l) == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n  \
    \      }\n        return l\n    }\n    if len(l) == 6 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[4] > l[5] {\n  \
    \          l[4], l[5] = l[5], l[4]\n        }\n        return l\n    }\n    if\
    \ len(l) == 7 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzdhid7k7_test.go:67:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Make a copy of l\n    l_copy := make([]int, len(l))\n    copy(l_copy,\
    \ l)\n\n    // Sort the even indicies of l_copy\n    for i := 1; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41l38rwm_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41l38rwm_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    var odds []int\n    var result []int\n   \
    \ for i, v := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ v)\n        } else {\n            odds = append(odds, v)\n        }\n    }\n\
    \    sort(evens)\n    for i, _ := range odds {\n        result = append(result,\
    \ evens[i])\n        result = append(result, odds[i])\n    }\n    return result\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda69w39__test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    for i := 0; i < len(l); i++ {\n        if\
    \ i % 2 == 0 {\n            evens = append(evens, l[i])\n        }\n    }\n  \
    \  sort(evens)\n    var l_prime []int\n    for i := 0; i < len(l); i++ {\n   \
    \     if i % 2 == 0 {\n            l_prime = append(l_prime, evens[i/2])\n   \
    \     } else {\n            l_prime = append(l_prime, l[i])\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2o_s5v9n_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list with the same length as l\n    l_prime :=\
    \ make([]int, len(l))\n    // Copy the odd indicies of l into l_prime\n    for\
    \ i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    // Sort\
    \ the even indicies of l\n    for i := 1; i < len(l); i += 2 {\n        for j\
    \ := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n             \
    \   temp := l[i]\n                l[i] = l[j]\n                l[j] = temp\n \
    \           }\n        }\n    }\n    // Copy the even indicies of l into l_prime\n\
    \    for i := 1; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    return\
    \ l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2xha37gs_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2xha37gs_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    for\
    \ i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n\
    \            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n     \
    \       }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073915
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    for i, v := range l {\n        if i % 2 ==\
    \ 0 {\n            evens = append(evens, v)\n        }\n    }\n    for i, v :=\
    \ range evens {\n        for j := i + 1; j < len(evens); j++ {\n            if\
    \ evens[j] < v {\n                evens[i], evens[j] = evens[j], evens[i]\n  \
    \          }\n        }\n    }\n    for i, v := range l {\n        if i % 2 ==\
    \ 0 {\n            l[i] = evens[i / 2]\n        }\n    }\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_sjdvpzm_test.go:25:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Your code here\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps9_eq1uy_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps9_eq1uy_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    for i := 0; i <\
    \ len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i]\
    \ > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpmpja4c4w_test.go:40: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=-5) %!s(int=-3) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpmpja4c4w_test.go:40:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=-10)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=8) %!s(int=11) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Your code here\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps9_eq1uy_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps9_eq1uy_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var l_even []int\n    var l_odd []int\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            l_even = append(l_even, v)\n       \
    \ } else {\n            l_odd = append(l_odd, v)\n        }\n    }\n    sort(l_even)\n\
    \    var l_prime []int\n    for i, v := range l_odd {\n        l_prime = append(l_prime,\
    \ l_even[i])\n        l_prime = append(l_prime, v)\n    }\n    return l_prime\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf21idil4_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We make a copy of l so that we don't modify the original.\n\
    \    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n\n    // We iterate through\
    \ the even indicies of l_copy.\n    for i := 0; i < len(l_copy); i += 2 {\n  \
    \      // We sort the even indicies of l_copy.\n        for j := i; j < len(l_copy);\
    \ j += 2 {\n            if l_copy[i] > l_copy[j] {\n                l_copy[i],\
    \ l_copy[j] = l_copy[j], l_copy[i]\n            }\n        }\n    }\n\n    return\
    \ l_copy\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Your code here\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps9_eq1uy_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps9_eq1uy_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var l_even []int\n    var l_odd []int\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            l_even = append(l_even, v)\n       \
    \ } else {\n            l_odd = append(l_odd, v)\n        }\n    }\n    sort(l_even)\n\
    \    var l_prime []int\n    for i, v := range l_odd {\n        l_prime = append(l_prime,\
    \ l_even[i])\n        l_prime = append(l_prime, v)\n    }\n    return l_prime\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf21idil4_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    // Hint: You will need to\
    \ use the append function.\n    // Hint: You will need to use the sort.Ints function.\n\
    \    // Hint: You will need to use the len function.\n    // Hint: You will need\
    \ to use the make function.\n    // Hint: You will need to use the range function.\n\
    \    // Hint: You will need to use the % operator.\n    // Hint: You will need\
    \ to use the copy function.\n    // Hint: You will need to use the append function.\n\
    \    // Hint: You will need to use the append function.\n    // Hint: You will\
    \ need to use the append function.\n    // Hint: You will need to use the append\
    \ function.\n    // Hint: You will need to use the append function.\n    // Hint:\
    \ You will need to use the append function.\n    // Hint: You will need to use\
    \ the append function.\n    // Hint: You will need to use the append function.\n\
    \    // Hint: You will need to use the append function.\n    // Hint: You will\
    \ need to use the append function.\n    // Hint: You will need to use the append\
    \ function.\n    // Hint: You will need to use the append function.\n    // Hint:\
    \ You will need to use the append function.\n    // Hint: You will need to use\
    \ the append function.\n    // Hint: You will need to use the append function.\n\
    \    // Hint: You will need to use the append function.\n    // Hint: You will\
    \ need to use the append function.\n    // Hint: You will need to use the append\
    \ function.\n    // Hint: You will need to use the append function.\n    // Hint:\
    \ You will need to use the append function.\n    // Hint: You will need to use\
    \ the append function.\n    // Hint: You will need to use the append function.\n\
    \    // Hint: You will need to use the append function.\n    // Hint: You will\
    \ need to use the append function.\n    // Hint: You will need to use the append\
    \ function.\n    // Hint: You will need to use the append function.\n    // H\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp78t3cpgx_test.go:47:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    even := make([]int,\
    \ len(l)/2)\n    odd := make([]int, len(l)/2)\n    for i := 0; i < len(l); i++\
    \ {\n        if i % 2 == 0 {\n            even[i/2] = l[i]\n        } else {\n\
    \            odd[i/2] = l[i]\n        }\n    }\n    even = merge_sort(even)\n\
    \    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            l[i]\
    \ = even[i/2]\n        } else {\n            l[i] = odd[i/2]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi0fgzsxx_test.go:24:12: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list l' of the same length as l\n    l_prime :=\
    \ make([]int, len(l))\n    // Copy the odd indicies of l into l'\n    for i :=\
    \ 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    // Sort the even\
    \ indicies of l\n    for i := 1; i < len(l); i += 2 {\n        for j := i + 2;\
    \ j < len(l); j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n    // Copy the even indicies\
    \ of l into l'\n    for i := 1; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpdw1xwbmh_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpdw1xwbmh_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         return []int{l[1], l[0]}\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] < l[1] {\n            l[2], l[1] = l[1], l[2]\n  \
    \      }\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n    \
    \    }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[0] > l[2] {\n  \
    \          l[0], l[2] = l[2], l[0]\n        }\n        if l[1] > l[3] {\n    \
    \        l[1], l[3] = l[3], l[1]\n        }\n        if l[1] > l[2] {\n      \
    \      l[1], l[2] = l[2], l[1]\n        }\n        return l\n    }\n    if len(l)\
    \ == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n    \
    \    }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n      \
    \  }\n        if l[4] < l[3] {\n            l[4], l[3] = l[3], l[4]\n        }\n\
    \       \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiuddp7ux_test.go:65:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    for\
    \ i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n\
    \            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n     \
    \       }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Your code here\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps9_eq1uy_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps9_eq1uy_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var sorted []int\n    var odd []int\n    var even []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            even = append(even,\
    \ v)\n        } else {\n            odd = append(odd, v)\n        }\n    }\n \
    \   for i, v := range even {\n        sorted = append(sorted, v)\n        sorted\
    \ = append(sorted, odd[i])\n    }\n    return sorted\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even(...)\n\t/tmp/tmpwumlxoyw_test.go:24\n\
    command-line-arguments_test.TestSort_Even(0x0?)\n\t/tmp/tmpwumlxoyw_test.go:36\
    \ +0xe25\ntesting.tRunner(0xc0001a01a0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    var odds []int\n    var result []int\n   \
    \ for i, v := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ v)\n        } else {\n            odds = append(odds, v)\n        }\n    }\n\
    \    sort(evens)\n    for i, v := range odds {\n        result = append(result,\
    \ evens[i])\n        result = append(result, v)\n    }\n    return result\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jpvw0t2_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // This is the list we will return.\n    ret := make([]int, len(l))\n\
    \    // Copy the odd indicies.\n    for i := 0; i < len(l); i += 2 {\n       \
    \ ret[i] = l[i]\n    }\n    // Sort the even indicies.\n    for i := 1; i < len(l);\
    \ i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i]\
    \ > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n    // Copy the sorted even indicies.\n    for i := 1; i < len(l); i +=\
    \ 2 {\n        ret[i] = l[i]\n    }\n    return ret\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp84buqyzf_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp84buqyzf_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpk63nu7xn_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmpk63nu7xn_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpk63nu7xn_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Make a copy of the list\n    l_copy := make([]int, len(l))\n\
    \    copy(l_copy, l)\n\n    // Sort the even indicies\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // This is the list we will return.\n    var ret []int\n    //\
    \ This is the list of even indicies of l.\n    var even []int\n    // This is\
    \ the list of odd indicies of l.\n    var odd []int\n    // This is the list of\
    \ even indicies of l, sorted.\n    var even_sorted []int\n    // This is the list\
    \ of odd indicies of l, sorted.\n    var odd_sorted []int\n    // This is the\
    \ list of even indicies of l, sorted, but in reverse order.\n    var even_sorted_reverse\
    \ []int\n    // This is the list of odd indicies of l, sorted, but in reverse\
    \ order.\n    var odd_sorted_reverse []int\n    // This is the list of even indicies\
    \ of l, sorted, but in reverse order, but with the last element removed.\n   \
    \ var even_sorted_reverse_minus_last []int\n    // This is the list of odd indicies\
    \ of l, sorted, but in reverse order, but with the last element removed.\n   \
    \ var odd_sorted_reverse_minus_last []int\n    // This is the list of even indicies\
    \ of l, sorted, but in reverse order, but with the last element removed, but with\
    \ the first element removed.\n    var even_sorted_reverse_minus_last_minus_first\
    \ []int\n    // This is the list of odd indicies of l, sorted, but in reverse\
    \ order, but with the last element removed, but with the first element removed.\n\
    \    var odd_sorted_reverse_minus_last_minus_first []int\n    // This is the list\
    \ of even indicies of l, sorted, but in reverse order, but with the last element\
    \ removed, but with the first element removed, but with the last element removed.\n\
    \    var even_sorted_reverse_minus_last_minus_first_minus_last []int\n    // This\
    \ is the list of odd indicies of l, sorted, but in reverse order, but with the\
    \ last element removed, but with the first element removed, but with the last\
    \ element removed.\n    var odd_sorted_reverse_minus_last_minus_first_minus_last\
    \ []int\n    // This is the list of even indicies of l, sorted, but\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_wn_cz6d_test.go:39:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073914
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    // Create a new\
    \ list of the same length as l\n    l_prime := make([]int, len(l))\n    // Copy\
    \ the odd indicies of l into l_prime\n    for i := 0; i < len(l); i++ {\n    \
    \    if i % 2 == 1 {\n            l_prime[i] = l[i]\n        }\n    }\n    //\
    \ Sort the even indicies of l\n    for i := 0; i < len(l); i++ {\n        if i\
    \ % 2 == 0 {\n            for j := i + 2; j < len(l); j++ {\n                if\
    \ l[i] > l[j] {\n                    l[i], l[j] = l[j], l[i]\n               \
    \ }\n            }\n        }\n    }\n    // Copy the even indicies of l into\
    \ l_prime\n    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n      \
    \      l_prime[i] = l[i]\n        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpz4qdluyr_test.go:57: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpz4qdluyr_test.go:57:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=-10) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    var odds []int\n    var l_prime []int\n  \
    \  for i, v := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ v)\n        } else {\n            odds = append(odds, v)\n        }\n    }\n\
    \    for i, v := range odds {\n        l_prime = append(l_prime, v)\n        if\
    \ i < len(evens) {\n            l_prime = append(l_prime, evens[i])\n        }\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpga4im7x7_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n\
    \        tmpga4im7x7_test.go:46: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=3) %!s(int=5) %!s(int=2) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n    --- FAIL: TestSort_Even/test_num__2\
    \ (0.00s)\n        tmpga4im7x7_test.go:46: expected '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]', got '[%!s(int=8) %!s(int=5) %!s(int=4) %!s(int=-12) %!s(int=2)\
    \ %!s(int=23) %!s(int=11) %!s(int=3) %!s(int=-10) %!s(int=12)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppwihpjqv_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppwihpjqv_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppwihpjqv_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We need to make a copy of l, so we don't modify the original.\n\
    \    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n\n    // We need to find\
    \ the indicies of the even indicies of l.\n    // We can do this by using the\
    \ modulo operator.\n    // If the index of an element is even, then the modulo\
    \ of the index and 2 will be 0.\n    // If the index of an element is odd, then\
    \ the modulo of the index and 2 will be 1.\n    // We can use this to find the\
    \ indicies of the even elements.\n    even_indicies := make([]int, 0)\n    for\
    \ i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            even_indicies\
    \ = append(even_indicies, i)\n        }\n    }\n\n    // Now we need to sort the\
    \ even indicies of l_copy.\n    // We can use the built-in sort package to do\
    \ this.\n    // We need to make a new slice that contains only the even indicies\
    \ of l_copy.\n    even_values := make([]int, len(even_indicies))\n    for i :=\
    \ 0; i < len(even_indicies); i++ {\n        even_values[i] = l_copy[even_indicies[i]]\n\
    \    }\n    // Now we can sort the even values.\n    sort.Ints(even_values)\n\n\
    \    // Now we need to put the sorted even values back into l_copy.\n    for i\
    \ := 0; i < len(even_indicies); i++ {\n        l_copy[even_indicies[i]] = even_values[i]\n\
    \    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsr2mcz8k_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Your code here\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps9_eq1uy_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps9_eq1uy_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // We first create a new list l' of the same length as l.\n   \
    \ l_prime := make([]int, len(l))\n    // We then copy the odd indicies of l into\
    \ l'\n    for i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n\
    \    // We then sort the even indicies of l and copy them into l'\n    for i :=\
    \ 1; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n    \
    \        if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n         \
    \   }\n        }\n        l_prime[i] = l[i]\n    }\n    return l_prime\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpw9sdppbh_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpw9sdppbh_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    // Make a copy of\
    \ the list\n    l_copy := make([]int, len(l))\n    copy(l_copy, l)\n    // Sort\
    \ the even indicies\n    for i := 0; i < len(l_copy); i += 2 {\n        for j\
    \ := i + 2; j < len(l_copy); j += 2 {\n            if l_copy[i] > l_copy[j] {\n\
    \                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n            }\n\
    \        }\n    }\n    return l_copy\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073913
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n\n    // Create a new\
    \ list with the same length as l.\n    l_prime := make([]int, len(l))\n\n    //\
    \ Copy the odd indicies of l into l_prime.\n    for i := 0; i < len(l); i += 2\
    \ {\n        l_prime[i] = l[i]\n    }\n\n    // Sort the even indicies of l.\n\
    \    for i := 1; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n\n    // Copy the even indicies of l into l_prime.\n\
    \    for i := 1; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n\n  \
    \  return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmphgcyt3x9_test.go:56: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmphgcyt3x9_test.go:56:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) <= 1 {\n        return l\n    }\n    var evens []int\n\
    \    for i := 0; i < len(l); i += 2 {\n        evens = append(evens, l[i])\n \
    \   }\n    evens = merge_sort(evens)\n    var result []int\n    for i := 0; i\
    \ < len(l); i += 2 {\n        result = append(result, evens[i/2])\n        if\
    \ i + 1 < len(l) {\n            result = append(result, l[i+1])\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1beyi_hi_test.go:19:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgxr47oqd_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgxr47oqd_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    //\
    \ l is at least 3 elements long\n    // first, sort the even indicies\n    for\
    \ i := 0; i < len(l) - 2; i += 2 {\n        if l[i] > l[i + 2] {\n           \
    \ l[i], l[i + 2] = l[i + 2], l[i]\n        }\n    }\n    // now, sort the odd\
    \ indicies\n    for i := 1; i < len(l) - 2; i += 2 {\n        if l[i] > l[i +\
    \ 2] {\n            l[i], l[i + 2] = l[i + 2], l[i]\n        }\n    }\n    //\
    \ now, sort the even indicies again\n    for i := 0; i < len(l) - 2; i += 2 {\n\
    \        if l[i] > l[i + 2] {\n            l[i], l[i + 2] = l[i + 2], l[i]\n \
    \       }\n    }\n    // now, sort the odd indicies again\n    for i := 1; i <\
    \ len(l) - 2; i += 2 {\n        if l[i] > l[i + 2] {\n            l[i], l[i +\
    \ 2] = l[i + 2], l[i]\n        }\n    }\n    // now, sort the even indicies again\n\
    \    for i := 0; i < len(l) - 2; i += 2 {\n        if l[i] > l[i + 2] {\n    \
    \        l[i], l[i + 2] = l[i + 2], l[i]\n        }\n    }\n    // now, sort the\
    \ odd indicies again\n    for i := 1; i < len(l) - 2; i += 2 {\n        if l[i]\
    \ > l[i +\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvmn408__test.go:58:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list l' of the same length as l.\n    l_prime :=\
    \ make([]int, len(l))\n    // Copy the odd indicies of l into l'.\n    for i :=\
    \ 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    // Sort the even\
    \ indicies of l.\n    for i := 1; i < len(l); i += 2 {\n        for j := i + 2;\
    \ j < len(l); j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j]\
    \ = l[j], l[i]\n            }\n        }\n    }\n    // Copy the even indicies\
    \ of l into l'.\n    for i := 1; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp3pf27y71_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp3pf27y71_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    var evens []int\n    var odds []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        } else\
    \ {\n            odds = append(odds, v)\n        }\n    }\n    for i, v := range\
    \ evens {\n        for j := i + 1; j < len(evens); j++ {\n            if evens[j]\
    \ < v {\n                evens[i], evens[j] = evens[j], evens[i]\n           \
    \ }\n        }\n    }\n    var result []int\n    for i, v := range odds {\n  \
    \      result = append(result, evens[i])\n        result = append(result, v)\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpi3dns_42_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n\
    \        tmpi3dns_42_test.go:51: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2) %!s(int=-5)\
    \ %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestSort_Even/test_num__2\
    \ (0.00s)\n        tmpi3dns_42_test.go:51: expected '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]', got '[%!s(int=3) %!s(int=8) %!s(int=-12) %!s(int=4) %!s(int=12)\
    \ %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmprw0rsy4q_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmprw0rsy4q_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprw0rsy4q_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    if len(l) == 0 {\n        return l\n    }\n    if len(l) == 1 {\n\
    \        return l\n    }\n    if len(l) == 2 {\n        if l[0] > l[1] {\n   \
    \         l[0], l[1] = l[1], l[0]\n        }\n        return l\n    }\n    if\
    \ len(l) == 3 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        return l\n    }\n    if len(l) == 4 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        return l\n    }\n   \
    \ if len(l) == 5 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n  \
    \      }\n        return l\n    }\n    if len(l) == 6 {\n        if l[0] > l[1]\
    \ {\n            l[0], l[1] = l[1], l[0]\n        }\n        if l[2] > l[3] {\n\
    \            l[2], l[3] = l[3], l[2]\n        }\n        if l[4] > l[5] {\n  \
    \          l[4], l[5] = l[5], l[4]\n        }\n        return l\n    }\n    if\
    \ len(l) == 7 {\n        if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n\
    \        }\n        if l[2] > l[3] {\n            l[2], l[3] = l[3], l[2]\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzdhid7k7_test.go:67:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073910
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // This is the list we will return.\n    var ret []int\n\n    //\
    \ This is the list of even indicies of l.\n    var even []int\n\n    // This is\
    \ the list of odd indicies of l.\n    var odd []int\n\n    // This is the list\
    \ of even indicies of l, sorted.\n    var even_sorted []int\n\n    // This is\
    \ the list of odd indicies of l, sorted.\n    var odd_sorted []int\n\n    // This\
    \ is the list of even indicies of l, sorted, but with the even indicies of l.\n\
    \    var even_sorted_with_even []int\n\n    // This is the list of odd indicies\
    \ of l, sorted, but with the odd indicies of l.\n    var odd_sorted_with_odd []int\n\
    \n    // This is the list of even indicies of l, sorted, but with the even indicies\
    \ of l, sorted.\n    var even_sorted_with_even_sorted []int\n\n    // This is\
    \ the list of odd indicies of l, sorted, but with the odd indicies of l, sorted.\n\
    \    var odd_sorted_with_odd_sorted []int\n\n    // This is the list of even indicies\
    \ of l, sorted, but with the even indicies of l, sorted, but with the even indicies\
    \ of l.\n    var even_sorted_with_even_sorted_with_even []int\n\n    // This is\
    \ the list of odd indicies of l, sorted, but with the odd indicies of l, sorted,\
    \ but with the odd indicies of l.\n    var odd_sorted_with_odd_sorted_with_odd\
    \ []int\n\n    // This is the list of even indicies of l, sorted, but with the\
    \ even indicies of l, sorted, but with the even indicies of l, sorted.\n    var\
    \ even_sorted_with_even_sorted_with_even_sorted []int\n\n    // This is the list\
    \ of odd indicies of l, sorted, but with the odd indicies of l, sorted, but with\
    \ the odd indicies of l, sorted.\n    var odd_sorted_with_odd_sorted_with_odd_sorted\
    \ []int\n\n    // This is the list of even\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpel00gn_p_test.go:52:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Create a new list to store the result\n    result := make([]int,\
    \ len(l))\n    // Copy the odd indicies of l into result\n    for i := 0; i <\
    \ len(l); i += 2 {\n        result[i] = l[i]\n    }\n    // Sort the even indicies\
    \ of l\n    for i := 1; i < len(l); i += 2 {\n        for j := i + 2; j < len(l);\
    \ j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    // Copy the sorted even indicies of l into\
    \ result\n    for i := 1; i < len(l); i += 2 {\n        result[i] = l[i]\n   \
    \ }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpjtir090w_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpjtir090w_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073915
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement me!\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpknjhwzlh_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpknjhwzlh_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpue0fqc31_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpue0fqc31_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmppazeqfx9_test.go:31: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmppazeqfx9_test.go:31:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppazeqfx9_test.go:31: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073911
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Copy the list\n    l_prime := make([]int, len(l))\n    copy(l_prime,\
    \ l)\n\n    // Sort the even indicies\n    for i := 0; i < len(l_prime); i +=\
    \ 2 {\n        for j := i + 2; j < len(l_prime); j += 2 {\n            if l_prime[i]\
    \ > l_prime[j] {\n                l_prime[i], l_prime[j] = l_prime[j], l_prime[i]\n\
    \            }\n        }\n    }\n\n    return l_prime\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073915
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // Make a copy of the list\n    l_copy := make([]int, len(l))\n\
    \    copy(l_copy, l)\n\n    // Sort the even indicies\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        for j := i + 2; j < len(l_copy); j += 2 {\n            if\
    \ l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n\
    \            }\n        }\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073911
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\nfunc sort_even(l []int)\
    \ []int {\n    // TODO: Implement this function\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp41gzzylj_test.go:31: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp41gzzylj_test.go:31:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073911
