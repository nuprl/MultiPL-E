language: go_test.go
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    result = append(result, n)\n    for\
    \ n > 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n\
    \            n = (n + 1) / 2\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptk3if0z2_test.go:47:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := n; i > 0; i-- {\n        res =\
    \ append(res, i)\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzngrwk9b_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzngrwk9b_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzngrwk9b_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzngrwk9b_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzngrwk9b_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm589g0ri_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := 0; i < n; i++ {\n        pile\
    \ = append(pile, n)\n        if n % 2 == 0 {\n            n = n + 1\n        }\
    \ else {\n            n = n + 2\n        }\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            res = append(res, n)\n        } else {\n            if res[i-1]\
    \ % 2 == 0 {\n                res = append(res, res[i-1]+1)\n            } else\
    \ {\n                res = append(res, res[i-1]+2)\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpw6yucjec_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpw6yucjec_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpw6yucjec_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, n)\n    pile[0] = n\n    for i := 1; i\
    \ < n; i++ {\n        if pile[i-1] % 2 == 0 {\n            pile[i] = pile[i-1]\
    \ + 1\n        } else {\n            pile[i] = pile[i-1] + 2\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpy083ikm0_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpy083ikm0_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpy083ikm0_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, n)\n    pile[0] = n\n    for i := 1; i\
    \ < n; i++ {\n        if pile[i-1] % 2 == 0 {\n            pile[i] = pile[i-1]\
    \ + 1\n        } else {\n            pile[i] = pile[i-1] + 2\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpy083ikm0_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpy083ikm0_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpy083ikm0_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        result\
    \ = append(result, n)\n        if n % 2 == 0 {\n            n = n + 1\n      \
    \  } else {\n            n = n + 2\n        }\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := 0; i < n; i++ {\n        pile\
    \ = append(pile, n)\n        if n % 2 == 0 {\n            n = n + 1\n        }\
    \ else {\n            n = n + 2\n        }\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, n)\n        } else {\n   \
    \         result = append(result, n-1)\n        }\n        n--\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpjlfipp6f_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmpjlfipp6f_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmpjlfipp6f_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpjlfipp6f_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpjlfipp6f_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=6) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073328
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            res = append(res, n)\n        } else {\n            if res[i-1]\
    \ % 2 == 0 {\n                res = append(res, res[i-1] + 1)\n            } else\
    \ {\n                res = append(res, res[i-1] + 2)\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_obkgil5_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp_obkgil5_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_obkgil5_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := n; i > 0; i-- {\n        if i\
    \ % 2 == 0 {\n            res = append(res, i + 1)\n        } else {\n       \
    \     res = append(res, i - 1)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzkpt3h1y_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, n)\n    pile[0] = n\n    for i := 1; i\
    \ < n; i++ {\n        if pile[i-1] % 2 == 0 {\n            pile[i] = pile[i-1]\
    \ + 1\n        } else {\n            pile[i] = pile[i-1] + 2\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpy083ikm0_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpy083ikm0_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpy083ikm0_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    pile = append(pile, n)\n    for n > 0\
    \ {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n      \
    \      n = (n + 1) / 2\n        }\n        pile = append(pile, n)\n    }\n   \
    \ return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        pile\
    \ = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa64_0o3__test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, n)\n        } else {\n   \
    \         result = append(result, n + 1)\n        }\n        n--\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp098fw8x3_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp098fw8x3_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp098fw8x3_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=5) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp098fw8x3_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=4)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp098fw8x3_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=8) %!s(int=6) %!s(int=6)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        if i\
    \ % 2 == 0 {\n            pile = append(pile, i + 1)\n        } else {\n     \
    \       pile = append(pile, i - 1)\n        }\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpudz1qd0t_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpudz1qd0t_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpudz1qd0t_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpudz1qd0t_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpudz1qd0t_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        result\
    \ = append(result, n)\n        if n % 2 == 0 {\n            n = n + 1\n      \
    \  } else {\n            n = n + 2\n        }\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := 0; i < n; i++ {\n        pile\
    \ = append(pile, n)\n        if n % 2 == 0 {\n            n = n + 1\n        }\
    \ else {\n            n = n + 2\n        }\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i%2 == 0 {\n            result = append(result, i+1)\n        } else {\n   \
    \         result = append(result, i-1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcha8qdzz_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcha8qdzz_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcha8qdzz_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcha8qdzz_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcha8qdzz_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, n)\n    pile[0] = n\n    for i := 1; i\
    \ < n; i++ {\n        if n % 2 == 0 {\n            pile[i] = pile[i-1] + 2\n \
    \       } else {\n            pile[i] = pile[i-1] + 1\n        }\n    }\n    return\
    \ pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpy29vwvhx_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpy29vwvhx_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, n - i)\n        } else {\n\
    \            result = append(result, n - i - 1)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_7e6ewyi_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=6) %!s(int=6) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i -= 2 {\n      \
    \  result = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp5mkcx6tt_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp5mkcx6tt_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp5mkcx6tt_test.go:41: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp5mkcx6tt_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp5mkcx6tt_test.go:41:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            res = append(res, n)\n        } else {\n            if res[i-1]\
    \ % 2 == 0 {\n                res = append(res, res[i-1]+1)\n            } else\
    \ {\n                res = append(res, res[i-1]+2)\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpw6yucjec_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpw6yucjec_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpw6yucjec_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    pile = append(pile, n)\n    for i := 1;\
    \ i < n; i++ {\n        if n % 2 == 0 {\n            pile = append(pile, n + i)\n\
    \        } else {\n            pile = append(pile, n + i + 1)\n        }\n   \
    \ }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpv58uib6k_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpv58uib6k_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpv58uib6k_test.go:46: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpv58uib6k_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpv58uib6k_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl0ekkcro_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl0ekkcro_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl0ekkcro_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := 0; i < n; i++ {\n        pile\
    \ = append(pile, n)\n        if n % 2 == 0 {\n            n = n + 1\n        }\
    \ else {\n            n = n + 2\n        }\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        pile\
    \ = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa64_0o3__test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return append([]int{n}, make_a_pile(n-1)...)\n    }\n    return\
    \ append([]int{n}, make_a_pile(n+1)...)\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.make_a_pile(0x3?)\n\
    \t/tmp/tmpq_7n_yfs_test.go:16 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0x"
  timestamp: 1660073334
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    var i int\n    for i = n; i > 0; i-- {\n\
    \        pile = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpr0f224ui_test.go:42: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpr0f224ui_test.go:42: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpr0f224ui_test.go:42: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpr0f224ui_test.go:42: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpr0f224ui_test.go:42: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i = i - 2 {\n   \
    \     result = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3d_l1ith_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp3d_l1ith_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp3d_l1ith_test.go:41: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3d_l1ith_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp3d_l1ith_test.go:41:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    pile = append(pile, n)\n    for n > 0\
    \ {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n      \
    \      n = (n + 1) / 2\n        }\n        pile = append(pile, n)\n    }\n   \
    \ return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    result = append(result, n)\n    for\
    \ n > 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n\
    \            n = (n + 1) / 2\n        }\n        result = append(result, n)\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmptk3if0z2_test.go:47:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptk3if0z2_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i = i - 2 {\n   \
    \     result = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3d_l1ith_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp3d_l1ith_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp3d_l1ith_test.go:41: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3d_l1ith_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp3d_l1ith_test.go:41:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        pile\
    \ = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa64_0o3__test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, n)\n    pile[0] = n\n    for i := 1; i\
    \ < n; i++ {\n        if pile[i-1] % 2 == 0 {\n            pile[i] = pile[i-1]\
    \ + 1\n        } else {\n            pile[i] = pile[i-1] + 2\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpy083ikm0_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpy083ikm0_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpy083ikm0_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            res = append(res, n)\n        } else {\n            if res[i-1]\
    \ % 2 == 0 {\n                res = append(res, res[i-1]+1)\n            } else\
    \ {\n                res = append(res, res[i-1]+2)\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpw6yucjec_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpw6yucjec_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpw6yucjec_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if n % 2 == 0 {\n            result[i] = result[i-1]\
    \ + 2\n        } else {\n            result[i] = result[i-1] + 1\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpq3ahxzwf_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpq3ahxzwf_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073329
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        result\
    \ = append(result, n)\n        if n % 2 == 0 {\n            n = n + 1\n      \
    \  } else {\n            n = n + 2\n        }\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm589g0ri_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl0ekkcro_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl0ekkcro_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl0ekkcro_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    res := make([]int, n)\n    res[0] = n\n    for i := 1; i <\
    \ n; i++ {\n        if n % 2 == 0 {\n            res[i] = res[i-1] + 2\n     \
    \   } else {\n            res[i] = res[i-1] + 1\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpju2nbgkm_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpju2nbgkm_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm589g0ri_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm589g0ri_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i = i - 2 {\n   \
    \     result = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3d_l1ith_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp3d_l1ith_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp3d_l1ith_test.go:41: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3d_l1ith_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp3d_l1ith_test.go:41:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl0ekkcro_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl0ekkcro_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl0ekkcro_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := n; i > 0; i-- {\n        if i\
    \ % 2 == 0 {\n            res = append(res, i + 1)\n        } else {\n       \
    \     res = append(res, i - 1)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzkpt3h1y_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl0ekkcro_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl0ekkcro_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl0ekkcro_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i+1)\n        } else {\n \
    \           result = append(result, i-1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa065porw_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        result\
    \ = append(result, n)\n        if n % 2 == 0 {\n            n = n + 1\n      \
    \  } else {\n            n = n + 2\n        }\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return append([]int{n}, make_a_pile(n-1)...)\n    }\n    return\
    \ append([]int{n}, make_a_pile(n+1)...)\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.make_a_pile(0x3?)\n\
    \t/tmp/tmpq_7n_yfs_test.go:16 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0x"
  timestamp: 1660073334
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := 0; i < n; i++ {\n        pile\
    \ = append(pile, n)\n        if n % 2 == 0 {\n            n = n + 1\n        }\
    \ else {\n            n = n + 2\n        }\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, n - i)\n        } else {\n\
    \            result = append(result, n - i - 1)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_7e6ewyi_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=6) %!s(int=6) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl0ekkcro_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl0ekkcro_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl0ekkcro_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return append([]int{n}, make_a_pile(n - 1)...)\n    }\n    return\
    \ append([]int{n}, make_a_pile(n + 1)...)\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x3?)\n\
    \t/tmp/tmp2repksl2_test.go:16 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc"
  timestamp: 1660073334
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i+1)\n        } else {\n \
    \           result = append(result, i-1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa065porw_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm589g0ri_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if n % 2 == 0 {\n            result[i] = result[i-1]\
    \ + 2\n        } else {\n            result[i] = result[i-1] + 1\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpq3ahxzwf_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpq3ahxzwf_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073329
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            pile = append(pile, n)\n        } else {\n            if\
    \ pile[i-1] % 2 == 0 {\n                pile = append(pile, pile[i-1] + 1)\n \
    \           } else {\n                pile = append(pile, pile[i-1] + 2)\n   \
    \         }\n        }\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_gk35g4e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp_gk35g4e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_gk35g4e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl0ekkcro_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl0ekkcro_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl0ekkcro_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        pile\
    \ = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa64_0o3__test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return append([]int{n}, make_a_pile(n-1)...)\n    }\n    return\
    \ append([]int{n}, make_a_pile(n+1)...)\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.make_a_pile(0x3?)\n\
    \t/tmp/tmpq_7n_yfs_test.go:16 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0x"
  timestamp: 1660073334
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return append([]int{n}, make_a_pile(n - 1)...)\n    }\n    return\
    \ append([]int{n}, make_a_pile(n + 1)...)\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.make_a_pile(0x3?)\n\
    \t/tmp/tmp2repksl2_test.go:16 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmp2repksl2_test.go:21 +0x45\
    \ fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmp2repksl2_test.go:23 +0xe5 fp=0xc"
  timestamp: 1660073334
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        result\
    \ = append(result, n)\n        if n % 2 == 0 {\n            n = n + 1\n      \
    \  } else {\n            n = n + 2\n        }\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm589g0ri_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            res = append(res, n)\n        } else {\n            if res[i-1]\
    \ % 2 == 0 {\n                res = append(res, res[i-1]+1)\n            } else\
    \ {\n                res = append(res, res[i-1]+2)\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpw6yucjec_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpw6yucjec_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpw6yucjec_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := n; i > 0; i-- {\n        if i\
    \ % 2 == 0 {\n            res = append(res, i - 1)\n        } else {\n       \
    \     res = append(res, i + 1)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_5ycf_h6_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_5ycf_h6_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_5ycf_h6_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_5ycf_h6_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_5ycf_h6_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i+1)\n        } else {\n \
    \           result = append(result, i-1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa065porw_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa065porw_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073332
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    pile = append(pile, n)\n    for i := n;\
    \ i > 0; {\n        if i % 2 == 0 {\n            i = i / 2\n        } else {\n\
    \            i = (i + 1) / 2\n        }\n        pile = append(pile, i)\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073341
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    // your code here\n    return nil\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpu_wm8i___test.go:38: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpu_wm8i___test.go:38:\
    \ expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpu_wm8i___test.go:38: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[]'\n   \
    \ --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpu_wm8i___test.go:38:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpu_wm8i___test.go:38:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, 0)\n    for i := n; i > 0; i-- {\n \
    \       result = append(result, i)\n        if i % 2 == 0 {\n            i--\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpe88mfflm_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmpe88mfflm_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmpe88mfflm_test.go:44: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpe88mfflm_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpe88mfflm_test.go:44:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            res = append(res, n)\n        } else {\n            if res[i-1]\
    \ % 2 == 0 {\n                res = append(res, res[i-1]+1)\n            } else\
    \ {\n                res = append(res, res[i-1]+2)\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpw6yucjec_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpw6yucjec_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpw6yucjec_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        pile\
    \ = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa64_0o3__test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if n % 2 == 0 {\n            result[i] = result[i-1]\
    \ + 2\n        } else {\n            result[i] = result[i-1] + 1\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpq3ahxzwf_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpq3ahxzwf_test.go:46: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073329
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := 0; i < n; i++ {\n        pile\
    \ = append(pile, n)\n        if n % 2 == 0 {\n            n = n + 1\n        }\
    \ else {\n            n = n + 2\n        }\n    }\n    return pile\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073336
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, n)\n    pile[0] = n\n    for i := 1; i\
    \ < n; i++ {\n        if pile[i-1] % 2 == 0 {\n            pile[i] = pile[i-1]\
    \ + 1\n        } else {\n            pile[i] = pile[i-1] + 2\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpy083ikm0_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpy083ikm0_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpy083ikm0_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, 0)\n    for i := n; i > 0; i-- {\n   \
    \     pile = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpyqbbd5e7_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpyqbbd5e7_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpyqbbd5e7_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpyqbbd5e7_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpyqbbd5e7_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := n; i > 0; i-- {\n        if i\
    \ % 2 == 0 {\n            res = append(res, i + 1)\n        } else {\n       \
    \     res = append(res, i - 1)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzkpt3h1y_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    result = append(result, n)\n    for n > 1 {\n        if n % 2 ==\
    \ 0 {\n            n = n / 2\n        } else {\n            n = (n + 1) / 2\n\
    \        }\n        result = append(result, n)\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpmvqwg4b1_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpmvqwg4b1_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpmvqwg4b1_test.go:50: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpmvqwg4b1_test.go:50:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpmvqwg4b1_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073330
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := 0; i < n; i++ {\n        if i\
    \ == 0 {\n            res = append(res, n)\n        } else {\n            if n\
    \ % 2 == 0 {\n                res = append(res, n + 2)\n            } else {\n\
    \                res = append(res, n + 1)\n            }\n        }\n    }\n \
    \   return res\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptzplwamt_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptzplwamt_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptzplwamt_test.go:49: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptzplwamt_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptzplwamt_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10) %!s(int=10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073331
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    res := make([]int, 0)\n    for i := n; i > 0; {\n        res\
    \ = append(res, i)\n        if i % 2 == 0 {\n            i = i / 2\n        }\
    \ else {\n            i = i / 2 + 1\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073342
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i -= 2 {\n      \
    \  result = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp5mkcx6tt_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp5mkcx6tt_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmp5mkcx6tt_test.go:41: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp5mkcx6tt_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp5mkcx6tt_test.go:41:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        pile\
    \ = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa64_0o3__test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var res []int\n    for i := n; i > 0; i-- {\n        if i\
    \ % 2 == 0 {\n            res = append(res, i + 1)\n        } else {\n       \
    \     res = append(res, i - 1)\n        }\n    }\n    return res\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzkpt3h1y_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzkpt3h1y_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        result\
    \ = append(result, i)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpm589g0ri_test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpm589g0ri_test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i)\n        } else {\n   \
    \         result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzg9p6m4f_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzg9p6m4f_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzg9p6m4f_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzg9p6m4f_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzg9p6m4f_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=6) %!s(int=6) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    pile := make([]int, n)\n    pile[0] = n\n    for i := 1; i\
    \ < n; i++ {\n        if pile[i-1] % 2 == 0 {\n            pile[i] = pile[i-1]\
    \ + 1\n        } else {\n            pile[i] = pile[i-1] + 2\n        }\n    }\n\
    \    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpy083ikm0_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpy083ikm0_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpy083ikm0_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    for i := n; i > 0; i-- {\n        pile\
    \ = append(pile, i)\n    }\n    return pile\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa64_0o3__test.go:41: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa64_0o3__test.go:41: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var pile []int\n    pile = append(pile, n)\n    for n > 1\
    \ {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n      \
    \      n = n / 2 + 1\n        }\n        pile = append(pile, n)\n    }\n    return\
    \ pile\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.23s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpehinxcd5_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpehinxcd5_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpehinxcd5_test.go:47: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpehinxcd5_test.go:47:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=6) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpehinxcd5_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.236s\n\
    FAIL\n"
  timestamp: 1660073331
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            result = append(result, n - i)\n        } else {\n\
    \            result = append(result, n - i - 1)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_7e6ewyi_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=4) %!s(int=4)\
    \ %!s(int=2) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_7e6ewyi_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=6) %!s(int=6) %!s(int=4) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n)\n    result[0] = n\n    for i :=\
    \ 1; i < n; i++ {\n        if result[i-1] % 2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl0ekkcro_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl0ekkcro_test.go:46: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl0ekkcro_test.go:46:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073333
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    if n % 2 == 0 {\n        result = append(result,\
    \ n)\n        result = append(result, make_a_pile(n + 1)...)\n    } else {\n \
    \       result = append(result, n)\n        result = append(result, make_a_pile(n\
    \ - 1)...)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0378\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 4 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201e0388 sp=0xc0201e0380 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x8?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e03f0 sp=0xc0201e0388 pc=0x44a0ec\ncommand-line-arguments_test.make_a_pile(0x2)\n\
    \t/tmp/tmp80e9u9k5_test.go:23 +0x54 fp=0xc0201e0470 sp=0xc0201e03f0 pc=0x4ef6b4\n\
    command-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmp80e9u9k5_test.go:27 +0x14b\
    \ fp=0xc0201e04f0 sp=0xc0201e0470 pc=0x4ef7ab\ncommand-line-arguments_test.make_a_pile(0x2)\n\
    \t/tmp/tmp80e9u9k5_test.go:24 +0x79 fp=0xc0201e0570 sp=0xc0201e04f0 pc=0x4ef6d9\n\
    command-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmp80e9u9k5_test.go:27 +0x14b\
    \ fp=0xc0201e05f0 sp=0xc0201e0570 pc=0x4ef7ab\ncommand-line-arguments_test.make_a_pile(0x2)\n\
    \t/tmp/tmp80e9u9k5_test.go:24 +0x79 fp=0xc0201e0670 sp=0xc0201e05f0 pc=0x4ef6d9\n\
    command-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmp80e9u9k5_test.go:27 +0x14b\
    \ fp=0xc0201e06f0 sp=0xc0201e0670 pc=0x4ef7ab\ncommand-line-arguments_test.make_a_pile(0x2)\n\
    \t/tmp/tmp80e9u9k5_test.go:24 +0x79 fp=0xc0201e0770 sp=0xc0201e06f0 pc=0x4ef6d9\n\
    command-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmp80e9u9k5_test.go:27 +0x14b\
    \ fp=0xc0201e07f0 sp=0xc0201e0770 pc=0x4ef7ab\ncommand-line-arguments_test.make_a_pile(0x2)\n\
    \t/tmp/tmp80e9u9k5_test.go:24 +0x79 fp=0xc0201e0870 sp=0xc0201e07f0 pc=0x4ef6d9\n\
    command-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmp80e9u9k5_test.go:27 +0x14b\
    \ fp=0xc0201e08f0 sp=0xc0201e0870 pc=0x4ef7ab\ncommand-line"
  timestamp: 1660073334
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]+1)\n\
    \            } else {\n                result = append(result, result[i-1]+2)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7jcb749e_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmp7jcb749e_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp7jcb749e_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i - 1)\n        } else {\n\
    \            result = append(result, i + 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpaejy58vx_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=4) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpaejy58vx_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=7)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073327
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return append([]int{n}, make_a_pile(n-1)...)\n    }\n    return\
    \ append([]int{n}, make_a_pile(n+1)...)\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0350\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520548?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.make_a_pile(0x3?)\n\
    \t/tmp/tmpq_7n_yfs_test.go:16 +0x1a8 fp=0xc0201e0360 sp=0xc0201e0358 pc=0x4ef808\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e03b8 sp=0xc0201e0360 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0410 sp=0xc0201e03b8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0468 sp=0xc0201e0410 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e04c0 sp=0xc0201e0468 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0518 sp=0xc0201e04c0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0570 sp=0xc0201e0518 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e05c8 sp=0xc0201e0570 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e0620 sp=0xc0201e05c8 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0678 sp=0xc0201e0620 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0xc0201e06d0 sp=0xc0201e0678 pc=0x4ef745\n\
    command-line-arguments_test.make_a_pile(0x4)\n\t/tmp/tmpq_7n_yfs_test.go:21 +0x45\
    \ fp=0xc0201e0728 sp=0xc0201e06d0 pc=0x4ef6a5\ncommand-line-arguments_test.make_a_pile(0x3)\n\
    \t/tmp/tmpq_7n_yfs_test.go:23 +0xe5 fp=0x"
  timestamp: 1660073334
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := n; i > 0; i-- {\n        if\
    \ i % 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n\
    \            result = append(result, i - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmporuq8_re_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=4) %!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmporuq8_re_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073326
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    var result []int\n    for i := 0; i < n; i++ {\n        if\
    \ i == 0 {\n            result = append(result, n)\n        } else {\n       \
    \     if result[i-1] % 2 == 0 {\n                result = append(result, result[i-1]\
    \ + 1)\n            } else {\n                result = append(result, result[i-1]\
    \ + 2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl4e2911u_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpl4e2911u_test.go:49: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)]'\n \
    \   --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpl4e2911u_test.go:49:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=11) %!s(int=13)\
    \ %!s(int=15) %!s(int=17) %!s(int=19) %!s(int=21)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073326
