language: go_test.go
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histo = make(map[string]int)\n\
    \    for _, c := range test {\n        histo[string(c)] += 1\n    }\n    return\
    \ histo\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp1ffrryxi_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp1ffrryxi_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp1ffrryxi_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp1ffrryxi_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp1ffrryxi_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp1ffrryxi_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, char := range test {\n        count := result[string(char)]\n\
    \        result[string(char)] = count + 1\n        if count + 1 > max {\n    \
    \        max = count + 1\n        }\n    }\n    var max_letters = make(map[string]int)\n\
    \    for letter, count := range result {\n        if count == max {\n        \
    \    max_letters[letter] = count\n        }\n    }\n    return max_letters\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqu3ns0vb_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpqu3ns0vb_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpqu3ns0vb_test.go:51: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqu3ns0vb_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqu3ns0vb_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpqu3ns0vb_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = []string{}\n    for _, letter := range\
    \ test {\n        result[string(letter)]++\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n            max_letters =\
    \ []string{string(letter)}\n        } else if result[string(letter)] == max {\n\
    \            max_letters = append(max_letters, string(letter))\n        }\n  \
    \  }\n    return map[string]int{\n        \"max\": max,\n        \"letters\":\
    \ max_letters,\n    }\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1wewyl3f_test.go:27:20: cannot use max_letters (variable of type []string)
    as type int in map literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        if _, ok := hist[string(char)]; ok {\n\
    \            hist[string(char)] += 1\n        } else {\n            hist[string(char)]\
    \ = 1\n        }\n    }\n    return hist\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp486trksi_test.go:44: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp486trksi_test.go:44: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp486trksi_test.go:44: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp486trksi_test.go:44:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp486trksi_test.go:44: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp486trksi_test.go:44: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpdkpavj52_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpdkpavj52_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpdkpavj52_test.go:49: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpdkpavj52_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpdkpavj52_test.go:49: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpdkpavj52_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, v := range test {\n        hist[string(v)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpod78j_74_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpod78j_74_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmphhts882l_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmphhts882l_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmphhts882l_test.go:49: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmphhts882l_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmphhts882l_test.go:49: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmphhts882l_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n\n    for _, letter := range test\
    \ {\n        result[string(letter)]++\n        if result[string(letter)] > max\
    \ {\n            max = result[string(letter)]\n            max_letters = []string{string(letter)}\n\
    \        } else if result[string(letter)] == max {\n            max_letters =\
    \ append(max_letters, string(letter))\n        }\n    }\n\n    for _, letter :=\
    \ range max_letters {\n        result[letter] = max\n    }\n\n    return result\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpib9lf3dx_test.go:54: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpib9lf3dx_test.go:54: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpib9lf3dx_test.go:54: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpib9lf3dx_test.go:54:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpib9lf3dx_test.go:54: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpib9lf3dx_test.go:54: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp7sfm2qad_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp7sfm2qad_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp7sfm2qad_test.go:49: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp7sfm2qad_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp7sfm2qad_test.go:49: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp7sfm2qad_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, char := range test {\n        result[string(char)]++\n    }\n    return\
    \ result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpalecdgsh_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpalecdgsh_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, v := range test {\n        hist[string(v)] += 1\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpgf771nn2_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpgf771nn2_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpgf771nn2_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpgf771nn2_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpgf771nn2_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpgf771nn2_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, char := range test {\n        histogram[string(char)]++\n    }\n \
    \   return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpiw6v5qzo_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpiw6v5qzo_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, char := range test {\n        result[string(char)]++\n    }\n    return\
    \ result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpalecdgsh_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpalecdgsh_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpm8hb8fqx_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpm8hb8fqx_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)] += 1\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpc7fp4onq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpc7fp4onq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, char := range test {\n        if _, ok := result[string(char)]; ok\
    \ {\n            result[string(char)] += 1\n        } else {\n            result[string(char)]\
    \ = 1\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpol5yiqve_test.go:44: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpol5yiqve_test.go:44: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpol5yiqve_test.go:44: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpol5yiqve_test.go:44:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpol5yiqve_test.go:44: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpol5yiqve_test.go:44: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpepkjrrgm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpepkjrrgm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpepkjrrgm_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpepkjrrgm_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpepkjrrgm_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpepkjrrgm_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, r := range test {\n        hist[string(r)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmposkr2m81_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmposkr2m81_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmposkr2m81_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmposkr2m81_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmposkr2m81_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmposkr2m81_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074674
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, char := range test {\n        result[string(char)]\
    \ += 1\n        if result[string(char)] > max {\n            max = result[string(char)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkn8f39dd_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpkn8f39dd_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpkn8f39dd_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpkn8f39dd_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkn8f39dd_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpkn8f39dd_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var hist = make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpcmlul2kq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpcmlul2kq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    var max_letters []string\n\n    for _, letter := range test\
    \ {\n        if _, ok := result[string(letter)]; ok {\n            result[string(letter)]\
    \ += 1\n        } else {\n            result[string(letter)] = 1\n        }\n\
    \    }\n\n    for letter, count := range result {\n        if count > max {\n\
    \            max = count\n            max_letters = []string{letter}\n       \
    \ } else if count == max {\n            max_letters = append(max_letters, letter)\n\
    \        }\n    }\n\n    return map[string]int{\"max\": max, \"letters\": len(max_letters)}\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn0hrvf5q_test.go:57: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[letters:%!s(int=1) max:%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpn0hrvf5q_test.go:57: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[letters:%!s(int=1) max:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn0hrvf5q_test.go:57: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[letters:%!s(int=1) max:%!s(int=4)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpn0hrvf5q_test.go:57:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[letters:%!s(int=1)\
    \ max:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n        tmpn0hrvf5q_test.go:57:\
    \ expected 'map[b:%!s(int=4)]', got 'map[letters:%!s(int=2) max:%!s(int=4)]'\n\
    \    --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn0hrvf5q_test.go:57:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[letters:%!s(int=1)\
    \ max:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__6 (0.00s)\n        tmpn0hrvf5q_test.go:57:\
    \ expected 'map[]', got 'map[letters:%!s(int=0) max:%!s(int=0)]'\n    --- FAIL:\
    \ TestHistogram/test_num__7 (0.00s)\n        tmpn0hrvf5q_test.go:57: expected\
    \ 'map[a:%!s(int=1)]', got 'map[letters:%!s(int=1) max:%!s(int=1)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp9nmq_gfb_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp9nmq_gfb_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, char := range test {\n        result[string(char)]++\n\
    \        if result[string(char)] > max {\n            max = result[string(char)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4ovjeus7_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp4ovjeus7_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp4ovjeus7_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4ovjeus7_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4ovjeus7_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp4ovjeus7_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmppoasm3q0_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmppoasm3q0_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make([]string, 0)\n    for _, letter :=\
    \ range test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n            max_letters =\
    \ []string{string(letter)}\n        } else if result[string(letter)] == max {\n\
    \            max_letters = append(max_letters, string(letter))\n        }\n  \
    \  }\n    return map[string]int{\"max\": max, \"letters\": max_letters}\n}\n\n\
    func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73fkfbew_test.go:25:50: cannot use max_letters (variable of type []string)
    as type int in map literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpm8hb8fqx_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpm8hb8fqx_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp9nmq_gfb_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp9nmq_gfb_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpm8hb8fqx_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpm8hb8fqx_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp9nmq_gfb_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp9nmq_gfb_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var max_letters = make(map[string]int)\n    for key, value\
    \ := range result {\n        if value == max {\n            max_letters[key] =\
    \ value\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpzm09229t_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpzm09229t_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpzm09229t_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpzm09229t_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpzm09229t_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpzm09229t_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var m map[string]int\n    m\
    \ = make(map[string]int)\n    for _, v := range test {\n        m[string(v)]++\n\
    \    }\n    return m\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpgharm1nh_test.go:41: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpgharm1nh_test.go:41: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpgharm1nh_test.go:41: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpgharm1nh_test.go:41:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpgharm1nh_test.go:41: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpgharm1nh_test.go:41: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var hist = make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpcmlul2kq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpcmlul2kq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, char := range test {\n        result[string(char)]++\n    }\n    return\
    \ result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpalecdgsh_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpalecdgsh_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, char := range test {\n        result[string(char)]\
    \ += 1\n        if result[string(char)] > max {\n            max = result[string(char)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkn8f39dd_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpkn8f39dd_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpkn8f39dd_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpkn8f39dd_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkn8f39dd_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpkn8f39dd_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var hist = make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpcmlul2kq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpcmlul2kq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpcmlul2kq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmppoasm3q0_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmppoasm3q0_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, char := range test {\n        histogram[string(char)]++\n    }\n \
    \   return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4qauep_m_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp4qauep_m_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp4qauep_m_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp4qauep_m_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4qauep_m_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp4qauep_m_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ ok {\n            result[string(letter)] += 1\n        } else {\n          \
    \  result[string(letter)] = 1\n        }\n        if result[string(letter)] >\
    \ max {\n            max = result[string(letter)]\n        }\n    }\n    var keys\
    \ []string\n    for key, value := range result {\n        if value == max {\n\
    \            keys = append(keys, key)\n        }\n    }\n    return map[string]int{\n\
    \        \"count\": max,\n        \"letters\": keys,\n    }\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdm3fzqvy_test.go:33:20: cannot use keys (variable of type []string) as
    type int in map literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    // Create a map to hold the\
    \ results\n    result := make(map[string]int)\n    // Iterate through the string\n\
    \    for _, char := range test {\n        // If the character is in the map, increment\
    \ the value\n        if _, ok := result[string(char)]; ok {\n            result[string(char)]\
    \ += 1\n        } else {\n            // If the character is not in the map, add\
    \ it with a value of 1\n            result[string(char)] = 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpi9fvvqdz_test.go:48: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpi9fvvqdz_test.go:48: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpi9fvvqdz_test.go:48: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpi9fvvqdz_test.go:48:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpi9fvvqdz_test.go:48: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpi9fvvqdz_test.go:48: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var max_letters = make(map[string]int)\n    for letter,\
    \ count := range result {\n        if count == max {\n            max_letters[letter]\
    \ = count\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpzfytkusm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpzfytkusm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpzfytkusm_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpzfytkusm_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpzfytkusm_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpzfytkusm_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp9nmq_gfb_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp9nmq_gfb_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    result := make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpzw_uovxf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpzw_uovxf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmphhts882l_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmphhts882l_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmphhts882l_test.go:49: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmphhts882l_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmphhts882l_test.go:49: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmphhts882l_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, v := range test {\n        hist[string(v)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpod78j_74_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpod78j_74_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpod78j_74_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    result := make(map[string]int)\n\
    \    for _, char := range test {\n        result[string(char)] += 1\n    }\n \
    \   return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpar34s4tp_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpar34s4tp_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpar34s4tp_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpar34s4tp_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpar34s4tp_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpar34s4tp_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var hist = make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpljfq6xos_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpljfq6xos_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpm8hb8fqx_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpm8hb8fqx_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpm8hb8fqx_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpm8hb8fqx_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpm8hb8fqx_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpwtb0g380_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpwtb0g380_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpwtb0g380_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpwtb0g380_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpwtb0g380_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpwtb0g380_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp9nmq_gfb_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp9nmq_gfb_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp9nmq_gfb_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpijhf_56m_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpijhf_56m_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpijhf_56m_test.go:49: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpijhf_56m_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpijhf_56m_test.go:49: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpijhf_56m_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, char := range test {\n        result[string(char)]++\n    }\n    return\
    \ result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpalecdgsh_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpalecdgsh_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    // Create a map of strings to\
    \ ints\n    hist := make(map[string]int)\n    // Split the string into an array\
    \ of strings\n    letters := strings.Split(test, \" \")\n    // Loop over the\
    \ array of strings\n    for _, letter := range letters {\n        // If the letter\
    \ is not in the map, add it with a count of 1\n        if _, ok := hist[letter];\
    \ !ok {\n            hist[letter] = 1\n        } else {\n            // If the\
    \ letter is in the map, increment the count\n            hist[letter]++\n    \
    \    }\n    }\n    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmperiyjeyy_test.go:16:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmppoasm3q0_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmppoasm3q0_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, char := range test {\n        result[string(char)]++\n    }\n    return\
    \ result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpalecdgsh_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpalecdgsh_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpalecdgsh_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmppoasm3q0_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmppoasm3q0_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, char := range test {\n        histogram[string(char)]++\n    }\n \
    \   return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpiw6v5qzo_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpiw6v5qzo_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpiw6v5qzo_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpvrv3j0gf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpvrv3j0gf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpvrv3j0gf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)] += 1\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpi0kxcx8z_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpi0kxcx8z_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpi0kxcx8z_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpi0kxcx8z_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpi0kxcx8z_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpi0kxcx8z_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var max_letters = make(map[string]int)\n    for k, v :=\
    \ range result {\n        if v == max {\n            max_letters[k] = v\n    \
    \    }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp7px9j40o_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp7px9j40o_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp7px9j40o_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp7px9j40o_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp7px9j40o_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp7px9j40o_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpc64lzz0q_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpc64lzz0q_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpc64lzz0q_test.go:49: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpc64lzz0q_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpc64lzz0q_test.go:49: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpc64lzz0q_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmppoasm3q0_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmppoasm3q0_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmppoasm3q0_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, char := range test {\n        if\
    \ _, ok := result[string(char)]; ok {\n            result[string(char)] += 1\n\
    \        } else {\n            result[string(char)] = 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_n92nops_test.go:45: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp_n92nops_test.go:45: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp_n92nops_test.go:45: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp_n92nops_test.go:45:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp_n92nops_test.go:45: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp_n92nops_test.go:45: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var hist = make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpljfq6xos_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpljfq6xos_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var hist = make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpljfq6xos_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpljfq6xos_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpljfq6xos_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnb5t7a22_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnb5t7a22_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnb5t7a22_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnkojwuud_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnkojwuud_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnkojwuud_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        if _, ok := histogram[string(letter)];\
    \ ok {\n            histogram[string(letter)] += 1\n        } else {\n       \
    \     histogram[string(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpld9vsdic_test.go:44: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpld9vsdic_test.go:44: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpld9vsdic_test.go:44: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpld9vsdic_test.go:44:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpld9vsdic_test.go:44: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpld9vsdic_test.go:44: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpsn9037a7_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpsn9037a7_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpsn9037a7_test.go:50: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpsn9037a7_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpsn9037a7_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpsn9037a7_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpqd89r876_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpqd89r876_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpqd89r876_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpc64lzz0q_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpc64lzz0q_test.go:49: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpc64lzz0q_test.go:49: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpc64lzz0q_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpc64lzz0q_test.go:49: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpc64lzz0q_test.go:49: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)] += 1\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpc7fp4onq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpc7fp4onq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpc7fp4onq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplyc9eunq_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplyc9eunq_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplyc9eunq_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpif5uzpaf_test.go:41: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpif5uzpaf_test.go:41: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpif5uzpaf_test.go:41: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpif5uzpaf_test.go:41:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpif5uzpaf_test.go:41: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpif5uzpaf_test.go:41: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    result := make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpzw_uovxf_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpzw_uovxf_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpzw_uovxf_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074675
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpu5ke9iyt_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpu5ke9iyt_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpu5ke9iyt_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpds0mh54f_test.go:40: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpds0mh54f_test.go:40:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpds0mh54f_test.go:40: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074673
