name: HumanEval_69_search
language: go_test.go
prompt: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ are given a non-empty list of positive integers. Return the greatest integer that\
  \ is greater than \n// zero, and has a frequency greater than or equal to the value\
  \ of the integer itself. \n// The frequency of an integer is the number of times\
  \ it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n\
  func search(lst []int) int {\n"
tests: "func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
  \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
  \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
  \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n\
  \     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}),\
  \ expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3,\
  \ 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected:\
  \ -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
  \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7,\
  \ 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n \
  \    { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
  \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
  \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
  \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5,\
  \ 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual:\
  \ candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected:\
  \ 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10,\
  \ 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}),\
  \ expected: -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7,\
  \ 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10,\
  \ 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4,\
  \ 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
  \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // your code here\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    for _, v := range lst {\n        if m[v] >=\
    \ v {\n            return v\n        }\n    }\n    return -1\n}\n", "    // create\
    \ a map of int -> int\n    // iterate through the list\n    // for each element,\
    \ increment the value in the map\n    // iterate through the map\n    // if the\
    \ value is greater than or equal to the key, return the key\n    // return -1\n\
    \    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n   \
    \ }\n    for k, v := range m {\n        if v >= k {\n            return k\n  \
    \      }\n    }\n    return -1\n}\n", "    // create a map of int to int\n   \
    \ // iterate through the list\n    // if the map contains the int, increment the\
    \ value\n    // if the map does not contain the int, add it to the map with a\
    \ value of 1\n    // iterate through the map\n    // if the value is greater than\
    \ or equal to the key, return the key\n    // if no key is found, return -1\n\
    \    m := make(map[int]int)\n    for _, v := range lst {\n        if _, ok :=\
    \ m[v]; ok {\n            m[v]++\n        } else {\n            m[v] = 1\n   \
    \     }\n    }\n    for k, v := range m {\n        if v >= k {\n            return\
    \ k\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst {\n  \
    \      if m[v] >= v {\n            return v\n        }\n    }\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    // create a map\
    \ of int to int\n    // iterate through the list\n    // if the int is not in\
    \ the map, add it with a value of 1\n    // if the int is in the map, increment\
    \ the value\n    // iterate through the map\n    // if the value is greater than\
    \ or equal to the key, return the key\n    // return -1\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        if _, ok := m[v]; ok {\n            m[v]++\n\
    \        } else {\n            m[v] = 1\n        }\n    }\n    for k, v := range\
    \ m {\n        if v >= k {\n            return k\n        }\n    }\n    return\
    \ -1\n}\n", "    // Write your code here\n    return 0\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v <= m[v] {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    // create a map of int to int\n    // iterate through the list\n  \
    \  // for each element, add it to the map\n    // if the value is greater than\
    \ the key, return the key\n    // if no such value exists, return -1\n    m :=\
    \ make(map[int]int)\n    for _, v := range lst {\n        m[v] += 1\n    }\n \
    \   for k, v := range m {\n        if v >= k {\n            return k\n       \
    \ }\n    }\n    return -1\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range lst {\n        if v == freq[v] {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    // Write your code here\n   \
    \ return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Write your code here\n    return 0\n}\n", "    // Write your code here\n   \
    \ return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // Write your code here\n  \
    \  // To print results to the standard output you can use fmt.Println()\n    //\
    \ Example: fmt.Println(\"Hello world!\")\n    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst {\n  \
    \      if v <= m[v] {\n            return v\n        }\n    }\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    // create a map of the frequency of each integer\n\
    \    freq := make(map[int]int)\n    for _, val := range lst {\n        freq[val]++\n\
    \    }\n    // iterate through the list and return the first integer that has\
    \ a frequency greater than or equal to the integer itself\n    for _, val := range\
    \ lst {\n        if freq[val] >= val {\n            return val\n        }\n  \
    \  }\n    return -1\n}\n", "    // Write your code here\n    return 0\n}\n", " \
    \   // Write your code here\n    return -1\n}\n", "    // create a map of int\
    \ to int\n    // iterate through the list\n    // if the int is in the map, increment\
    \ the value\n    // if the int is not in the map, add it to the map with a value\
    \ of 1\n    // iterate through the map\n    // if the value is greater than or\
    \ equal to the key, return the key\n    // if no key is found, return -1\n   \
    \ m := make(map[int]int)\n    for _, v := range lst {\n        if _, ok := m[v];\
    \ ok {\n            m[v]++\n        } else {\n            m[v] = 1\n        }\n\
    \    }\n    for k, v := range m {\n        if v >= k {\n            return k\n\
    \        }\n    }\n    return -1\n}\n", "    // Write your code here\n    return\
    \ -1\n}\n", "    // Your code here\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    // Write your code here\n    return -1\n}\n",
  "    // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    var m = make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if m[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v] += 1\n    }\n    for i := len(lst)\
    \ - 1; i >= 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n\
    \    }\n    return -1\n}\n", "    // Your code here\n    return -1\n}\n", "  \
    \  // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    // Write your code here\n   \
    \ return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    if\
    \ len(lst) == 0 {\n        return -1\n    }\n    freq := make(map[int]int)\n \
    \   for _, v := range lst {\n        freq[v]++\n    }\n    for k, v := range freq\
    \ {\n        if k <= v {\n            return k\n        }\n    }\n    return -1\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    max := 0\n    for k,\
    \ v := range m {\n        if v >= k && k > max {\n            max = k\n      \
    \  }\n    }\n    if max == 0 {\n        return -1\n    }\n    return max\n}\n",
  "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n\
    \    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst {\n  \
    \      if v <= m[v] {\n            return v\n        }\n    }\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    // Write your code here\n    return -1\n}\n",
  "    // create a map of ints to ints\n    // iterate through the list\n    // if\
    \ the int is in the map, increment the value\n    // if the int is not in the\
    \ map, add it to the map with a value of 1\n    // iterate through the map\n \
    \   // if the value is greater than or equal to the key, return the key\n    //\
    \ return -1\n    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ if _, ok := m[v]; ok {\n            m[v] += 1\n        } else {\n          \
    \  m[v] = 1\n        }\n    }\n    for k, v := range m {\n        if v >= k {\n\
    \            return k\n        }\n    }\n    return -1\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    // Write your code\
    \ here\n    return 0\n}\n", "    // Write your code here\n    return -1\n}\n",
  "    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range lst {\n        if freq[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    var m = make(map[int]int)\n \
    \   for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v <= m[v] {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    // create\
    \ a map of int to int\n    // iterate through the list\n    // for each item in\
    \ the list, increment the value in the map\n    // iterate through the map\n \
    \   // for each key/value pair, if the key is greater than the value, return the\
    \ key\n    // return -1\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    for k, v := range m {\n        if k > v {\n  \
    \          return k\n        }\n    }\n    return -1\n}\n", "    // create a map\
    \ of integers to frequencies\n    freq := make(map[int]int)\n    for _, v := range\
    \ lst {\n        freq[v]++\n    }\n    // create a map of frequencies to integers\n\
    \    freq2 := make(map[int][]int)\n    for k, v := range freq {\n        freq2[v]\
    \ = append(freq2[v], k)\n    }\n    // find the largest frequency\n    var max\
    \ int\n    for k := range freq2 {\n        if k > max {\n            max = k\n\
    \        }\n    }\n    // find the largest integer with that frequency\n    var\
    \ max2 int\n    for _, v := range freq2[max] {\n        if v > max2 {\n      \
    \      max2 = v\n        }\n    }\n    return max2\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    // Write your code here\n    return 0\n}\n",
  "    // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return 0\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Create a map of integers to frequencies\n    freq := make(map[int]int)\n   \
    \ for _, v := range lst {\n        freq[v]++\n    }\n    // Find the greatest\
    \ integer that is greater than zero, and has a frequency greater than or equal\
    \ to the value of the integer itself.\n    for _, v := range lst {\n        if\
    \ v > 0 && freq[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    // Write your\
    \ code here\n    if len(lst) == 0 {\n        return -1\n    }\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    for _, v := range\
    \ lst {\n        if freq[v] >= v {\n            return v\n        }\n    }\n \
    \   return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    m := make(map[int]int)\n   \
    \ for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst {\n\
    \        if m[v] >= v {\n            return v\n        }\n    }\n    return -1\n\
    }\n", "    // create a map of the numbers and their frequencies\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    // create a map of\
    \ the frequencies and the numbers\n    freq2 := make(map[int][]int)\n    for k,\
    \ v := range freq {\n        freq2[v] = append(freq2[v], k)\n    }\n    // sort\
    \ the frequencies\n    keys := make([]int, 0, len(freq2))\n    for k := range\
    \ freq2 {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n    //\
    \ find the first frequency that is greater than or equal to the number\n    for\
    \ i := len(keys) - 1; i >= 0; i-- {\n        for _, v := range freq2[keys[i]]\
    \ {\n            if v >= keys[i] {\n                return v\n            }\n\
    \        }\n    }\n    return -1\n}\n", "    // Write your code here\n    return\
    \ 0\n}\n", "    // Write your code here\n    return -1\n}\n", "    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    for _, v := range\
    \ lst {\n        if v <= freq[v] {\n            return v\n        }\n    }\n \
    \   return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // Write your code here\n  \
    \  return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ your code here\n    return -1\n}\n", "    // your code here\n    return 0\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    // Write your code here\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // create a map to store the frequency of each number\n\
    \    freq := make(map[int]int)\n    for _, n := range lst {\n        freq[n]++\n\
    \    }\n    // iterate through the list and find the greatest number that has\
    \ a frequency greater than or equal to itself\n    for _, n := range lst {\n \
    \       if freq[n] >= n {\n            return n\n        }\n    }\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    for i := len(lst)\
    \ - 1; i >= 0; i-- {\n        if freq[i] >= i {\n            return i\n      \
    \  }\n    }\n    return -1\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    // Write your code here\n    return -1\n}\n",
  "    // Write your code here\n    return -1\n}\n", "    // TODO: Implement\n   \
    \ return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // Write your code here\n  \
    \  return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   for _, v := range lst {\n        if v <= m[v] {\n            return v\n  \
    \      }\n    }\n    return -1\n}\n", "    // your code here\n    return -1\n\
    }\n", "    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range lst {\n        if freq[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    // Write your code here\n   \
    \ return -1\n}\n", "    // Write your code here\n    return 0\n}\n", "    // Write\
    \ your code here\n    return -1\n}\n", "    // Write your code here\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    for k, v := range\
    \ freq {\n        if k <= v {\n            return k\n        }\n    }\n    return\
    \ -1\n}\n", "    // create a map of the frequency of each number\n    freq :=\
    \ make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n \
    \   // iterate through the map and find the first number that has a frequency\
    \ greater than or equal to itself\n    for k, v := range freq {\n        if k\
    \ <= v {\n            return k\n        }\n    }\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // create a map of integers\
    \ to their frequency\n    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    // iterate through the map and find the greatest integer\
    \ that is greater than zero, and has a frequency\n    // greater than or equal\
    \ to the value of the integer itself\n    var max int\n    for k, v := range m\
    \ {\n        if k > 0 && k <= v && k > max {\n            max = k\n        }\n\
    \    }\n    if max > 0 {\n        return max\n    }\n    return -1\n}\n", "  \
    \  // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // your code here\n    return\
    \ -1\n}\n", "    // create a map of integers and their frequencies\n    freq :=\
    \ make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n \
    \   // loop through the list\n    for _, v := range lst {\n        // if the frequency\
    \ of the integer is greater than or equal to the value of the integer itself\n\
    \        if freq[v] >= v {\n            // return the integer\n            return\
    \ v\n        }\n    }\n    // if no such a value exist, return -1\n    return\
    \ -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    for _, v := range lst {\n        if m[v] >= v {\n       \
    \     return v\n        }\n    }\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    // Write your code here\n    return -1\n}\n",
  "    // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for _, v := range lst {\n        if m[v] >= v {\n\
    \            return v\n        }\n    }\n    return -1\n}\n", "    // create a\
    \ map to store the frequency of each integer\n    freq := make(map[int]int)\n\
    \    // iterate through the list and store the frequency of each integer\n   \
    \ for _, v := range lst {\n        freq[v]++\n    }\n    // iterate through the\
    \ list again and find the greatest integer that is greater than zero, and has\
    \ a frequency greater than or equal to the value of the integer itself\n    for\
    \ _, v := range lst {\n        if v > 0 && freq[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    freq := make(map[int]int)\n \
    \   for _, v := range lst {\n        freq[v]++\n    }\n    for _, v := range lst\
    \ {\n        if freq[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    // create a map of integers to frequencies\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    // create a map of\
    \ frequencies to integers\n    freq2 := make(map[int][]int)\n    for k, v := range\
    \ freq {\n        freq2[v] = append(freq2[v], k)\n    }\n    // find the maximum\
    \ frequency\n    maxFreq := 0\n    for k, _ := range freq2 {\n        if k > maxFreq\
    \ {\n            maxFreq = k\n        }\n    }\n    // find the maximum integer\
    \ with that frequency\n    maxInt := -1\n    for _, v := range freq2[maxFreq]\
    \ {\n        if v > maxInt {\n            maxInt = v\n        }\n    }\n    return\
    \ maxInt\n}\n", "    // Write your code here\n    return 0\n}\n", "    // Your\
    \ code here\n    return -1\n}\n", "    // Write your code here\n    return 0\n\
    }\n", "    // 1. Create a map of integers to their frequencies.\n    freq := make(map[int]int)\n\
    \    for _, n := range lst {\n        freq[n]++\n    }\n    // 2. Iterate over\
    \ the map, and return the first integer that has a frequency greater than or equal\
    \ to itself.\n    for k, v := range freq {\n        if k <= v {\n            return\
    \ k\n        }\n    }\n    // 3. If no such integer exists, return -1.\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n", "    // create a map of\
    \ frequencies\n    freq := make(map[int]int)\n    for _, v := range lst {\n  \
    \      freq[v]++\n    }\n    // iterate through the map and find the greatest\
    \ value\n    // that is greater than zero, and has a frequency greater than or\
    \ equal to the value of the integer itself.\n    max := -1\n    for k, v := range\
    \ freq {\n        if k > 0 && k <= v && k > max {\n            max = k\n     \
    \   }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    // Create a map of the frequency of each value\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    // Find the greatest\
    \ value that has a frequency greater than or equal to itself\n    for i := len(lst);\
    \ i > 0; i-- {\n        if freq[i] >= i {\n            return i\n        }\n \
    \   }\n    return -1\n}\n", "    // your code here\n    return -1\n}\n", "   \
    \ // create a map of frequencies\n    freq := make(map[int]int)\n    for _, v\
    \ := range lst {\n        freq[v]++\n    }\n    // find the greatest value that\
    \ is greater than zero, and has a frequency greater than or equal to the value\
    \ of the integer itself\n    for _, v := range lst {\n        if v > 0 && freq[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    if len(lst) == 0 {\n       \
    \ return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if m[i]\
    \ >= i {\n            return i\n        }\n    }\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // Write your code here\n  \
    \  return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // Write your code here\n  \
    \  return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // Write your code here\n  \
    \  return 0\n}\n", "    // Write your code here\n    return -1\n}\n", "    var\
    \ m = make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n\
    \    for _, v := range lst {\n        if v <= m[v] {\n            return v\n \
    \       }\n    }\n    return -1\n}\n", "    var max int\n    var count int\n \
    \   var result int\n    for _, v := range lst {\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    for i := 1; i <= max; i++ {\n        count\
    \ = 0\n        for _, v := range lst {\n            if v == i {\n            \
    \    count++\n            }\n        }\n        if count >= i {\n            result\
    \ = i\n        }\n    }\n    if result == 0 {\n        return -1\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    return -1\n}\n", "    // Write\
    \ your code here\n    return -1\n}\n", "    // create a map of int to int\n  \
    \  // iterate through the list\n    // if the value is not in the map, add it\
    \ to the map\n    // if the value is in the map, increment the value\n    // iterate\
    \ through the map\n    // if the value is greater than or equal to the key, return\
    \ the key\n    // return -1\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        if _, ok := m[v]; ok {\n            m[v]++\n        } else {\n\
    \            m[v] = 1\n        }\n    }\n    for k, v := range m {\n        if\
    \ v >= k {\n            return k\n        }\n    }\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // your code here\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    // map of int to int\n    // key is the int, value is the frequency\n\
    \    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    // loop through the map\n    // if the value is greater than or equal\
    \ to the key, return the key\n    for k, v := range freq {\n        if v >= k\
    \ {\n            return k\n        }\n    }\n    return -1\n}\n", "    // Write\
    \ your code here\n    return -1\n}\n", "    // TODO\n    return -1\n}\n", "  \
    \  // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v <= m[v] {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    // Create\
    \ a map of the frequencies of the integers in the list\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    // Iterate through\
    \ the list and return the first integer that has a frequency greater than or equal\
    \ to the value of the integer itself\n    for _, v := range lst {\n        if\
    \ freq[v] >= v {\n            return v\n        }\n    }\n    // If no such a\
    \ value exist, return -1\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    freq := make(map[int]int)\n    for _, v := range lst\
    \ {\n        freq[v]++\n    }\n    for _, v := range lst {\n        if freq[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    // Write your code here\n  \
    \  return -1\n}\n", "    // TODO: implement\n    return -1\n}\n", "    // Write\
    \ your code here\n    return 0\n}\n", "    // create a map of integers to their\
    \ frequencies\n    freq := make(map[int]int)\n    for _, v := range lst {\n  \
    \      freq[v]++\n    }\n    // iterate over the list and find the greatest integer\
    \ that has a frequency greater than or equal to itself\n    for _, v := range\
    \ lst {\n        if freq[v] >= v {\n            return v\n        }\n    }\n \
    \   return -1\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
