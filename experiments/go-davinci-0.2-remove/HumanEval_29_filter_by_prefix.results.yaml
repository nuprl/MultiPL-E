language: go_test.go
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    result := []string{}\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var output []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[:len(prefix)] == prefix {\n            output = append(output,\
    \ s)\n        }\n    }\n    return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ < len(prefix) {\n            continue\n        }\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    result := []string{}\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ < len(prefix) {\n            continue\n        }\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ < len(prefix) {\n            continue\n        }\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ < len(prefix) {\n            continue\n        }\n        if s[:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) <\
    \ len(prefix) {\n            continue\n        }\n        if s[:len(prefix)] ==\
    \ prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ < len(prefix) {\n            continue\n        }\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ < len(prefix) {\n            continue\n        }\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ < len(prefix) {\n            continue\n        }\n        if s[:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if s[0:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var out []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            out = append(out, s)\n        }\n\
    \    }\n    return out\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    result := []string{}\n    for _, str := range strings {\n        if len(str)\
    \ < len(prefix) {\n            continue\n        }\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    result := []string{}\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ < len(prefix) {\n            continue\n        }\n        if s[:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) >=\
    \ len(prefix) && s[0:len(prefix)] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ < len(prefix) {\n            continue\n        }\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var filtered []string\n    for _, s := range strings {\n        if len(s)\
    \ >= len(prefix) && s[0:len(prefix)] == prefix {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, s := range strings {\n        if len(s) <\
    \ len(prefix) {\n            continue\n        }\n        if s[:len(prefix)] ==\
    \ prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if len(str)\
    \ >= len(prefix) && str[0:len(prefix)] == prefix {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunc filter_by_prefix(strings []string, prefix string) []string {\n\
    \    var result []string\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073434
