name: HumanEval_76_is_simple_power
language: go_test.go
prompt: "package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\nfunc is_simple_power(x int, n int) bool {\n"
tests: "func TestIs_Simple_Power(t *testing.T) {\n  candidate := is_simple_power\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(16, 2), expected: true },\n     {\
  \ actual: candidate(143214, 16), expected: false },\n     { actual: candidate(4,\
  \ 2), expected: true },\n     { actual: candidate(9, 3), expected: true },\n   \
  \  { actual: candidate(16, 4), expected: true },\n     { actual: candidate(24, 2),\
  \ expected: false },\n     { actual: candidate(128, 4), expected: false },\n   \
  \  { actual: candidate(12, 6), expected: false },\n     { actual: candidate(1, 1),\
  \ expected: true },\n     { actual: candidate(1, 12), expected: true },\n   }\n\n\
  \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
