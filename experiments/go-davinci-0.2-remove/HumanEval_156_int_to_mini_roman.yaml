name: HumanEval_156_int_to_mini_roman
language: go_test.go
prompt: "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  func int_to_mini_roman(number int) string {\n"
tests: "func TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     {\
  \ actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251),\
  \ expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n\
  \     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1),\
  \ expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual:\
  \ candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected:\
  \ \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual:\
  \ candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected:\
  \ \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual:\
  \ candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result string\n    var roman_numerals = []string{\"i\", \"\
    v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    var roman_numerals_values = []int{1,\
    \ 5, 10, 50, 100, 500, 1000}\n    var roman_numerals_values_len = len(roman_numerals_values)\n\
    \    var roman_numerals_len = len(roman_numerals)\n    var i, j, k, l, m, n, o,\
    \ p, q, r, s, t, u, v, w, x, y, z int\n    var a, b, c, d, e, f, g, h, i1, j1,\
    \ k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1 int\n    var\
    \ a1, b1, c1, d1, e1, f1, g1, h1, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2,\
    \ t2, u2, v2, w2, x2, y2, z2 int\n    var a2, b2, c2, d2, e2, f2, g2, h2, i3,\
    \ j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3 int\n   \
    \ var a3, b3, c3, d3, e3, f3, g3, h3, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4,\
    \ s4, t4, u4, v4, w4, x4, y4, z4 int\n    var a4, b4, c4, d4, e4, f4, g4, h4,\
    \ i5, j5, k5, l5, m5, n5, o", "    var result string\n    var i int\n    var roman_numerals\
    \ = []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"}\n    var numbers = []int{1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1}\n\n    for i = 0; i < len(numbers); i++ {\n\
    \        for number >= numbers[i] {\n            result += roman_numerals[i]\n\
    \            number -= numbers[i]\n        }\n    }\n\n    return result\n}\n",
  "    // TODO: Implement this function\n    return \"\"\n}\n", "    // Create a map\
    \ of roman numerals\n    roman_numerals := map[int]string{\n        1: \"i\",\n\
    \        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\"\
    ,\n        500: \"d\",\n        1000: \"m\",\n    }\n\n    // Create a map of\
    \ roman numeral values\n    roman_values := map[string]int{\n        \"i\": 1,\n\
    \        \"v\": 5,\n        \"x\": 10,\n        \"l\": 50,\n        \"c\": 100,\n\
    \        \"d\": 500,\n        \"m\": 1000,\n    }\n\n    // Create a map of roman\
    \ numeral values\n    roman_subtractives := map[string]int{\n        \"iv\": 4,\n\
    \        \"ix\": 9,\n        \"xl\": 40,\n        \"xc\": 90,\n        \"cd\"\
    : 400,\n        \"cm\": 900,\n    }\n\n    // Create a map of roman numeral values\n\
    \    roman_subtractive_values := map[int]string{\n        4: \"iv\",\n       \
    \ 9: \"ix\",\n        40: \"xl\",\n        90: \"xc\",\n        400: \"cd\",\n\
    \        900: \"cm\",\n    }\n\n    // Create a map of roman numeral values\n\
    \    roman_subtractive_keys := map[string]int{\n        \"iv\": 4,\n        \"\
    ix\": 9,\n        \"xl\": 40,\n        \"xc\": 90,\n        \"cd\": 400,\n   \
    \     \"cm\": 900,\n    }\n\n    // Create a map of roman numeral values\n   \
    \ roman_subtractive_keys_reverse := map[int]string{\n        4: \"iv\",\n    \
    \    9: \"ix\",\n        40: \"xl\",\n        90: \"xc\",\n        400: \"cd\"\
    ,\n        900: \"cm\",\n    }\n\n    // Create a map of roman numeral values\n\
    \    roman_subtractive_values_reverse := map[string]int{\n        \"iv\": 4,\n\
    \        \"ix\": 9,\n        \"xl\": 40,\n        \"", "    var result string\n\
    \    var i int\n    var roman_numerals = []string{\"i\", \"v\", \"x\", \"l\",\
    \ \"c\", \"d\", \"m\"}\n    var roman_numerals_values = []int{1, 5, 10, 50, 100,\
    \ 500, 1000}\n    var roman_numerals_values_length = len(roman_numerals_values)\n\
    \    var roman_numerals_length = len(roman_numerals)\n    var roman_numerals_index\
    \ int\n    var roman_numerals_values_index int\n    var roman_numerals_values_index_prev\
    \ int\n    var roman_numerals_values_index_next int\n    var roman_numerals_values_index_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next int\n    var roman_numerals_values_index_next_next_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next_next_next int\n    var\
    \ roman_numerals_values_index_next_next_next_next_next_next int\n    var roman_numerals_values_index_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_values_index_next_next_next_next_next_next_next_next_",
  "    // TODO: implement\n    return \"\"\n}\n", "    // TODO: implement this function\n\
    \    return \"\"\n}\n", "    var result string\n    var roman_numerals = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ decimal_values = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, decimal_value\
    \ := range decimal_values {\n        if number >= decimal_value {\n          \
    \  result += roman_numerals[decimal_value]\n            number -= decimal_value\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var i\
    \ int\n    var digit int\n    var roman_digit string\n    var roman_digits = []string{\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n\n    for i = 0; i < 3; i++ {\n\
    \        digit = number % 10\n        number = number / 10\n        roman_digit\
    \ = roman_digits[i * 2]\n        if digit == 4 {\n            result = roman_digit\
    \ + roman_digits[i * 2 + 1] + result\n        } else if digit == 9 {\n       \
    \     result = roman_digit + roman_digits[i * 2 + 2] + result\n        } else\
    \ {\n            if digit >= 5 {\n                result = roman_digits[i * 2\
    \ + 1] + result\n                digit -= 5\n            }\n            for ;\
    \ digit > 0; digit-- {\n                result = roman_digit + result\n      \
    \      }\n        }\n    }\n    for ; number > 0; number-- {\n        result =\
    \ roman_digits[6] + result\n    }\n    return result\n}\n", "    var result string\n\
    \    if number < 1 || number > 1000 {\n        return result\n    }\n    roman_numerals\
    \ := []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    for i := 0;\
    \ i < 7; i += 2 {\n        digit := number % 10\n        if digit < 4 {\n    \
    \        for j := 0; j < digit; j++ {\n                result = roman_numerals[i]\
    \ + result\n            }\n        } else if digit == 4 {\n            result\
    \ = roman_numerals[i] + roman_numerals[i+1] + result\n        } else if digit\
    \ < 9 {\n            for j := 0; j < digit - 5; j++ {\n                result\
    \ = roman_numerals[i] + result\n            }\n            result = roman_numerals[i+1]\
    \ + result\n        } else {\n            result = roman_numerals[i] + roman_numerals[i+2]\
    \ + result\n        }\n        number /= 10\n    }\n    return result\n}\n", " \
    \   // TODO: implement\n    return \"\"\n}\n", "    var result string\n    var\
    \ roman_map = map[int]string{\n        1: \"i\",\n        5: \"v\",\n        10:\
    \ \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n     \
    \   1000: \"m\",\n    }\n    var roman_map_keys = []int{1000, 500, 100, 50, 10,\
    \ 5, 1}\n    var roman_map_keys_len = len(roman_map_keys)\n    var i int\n   \
    \ var key int\n    var value string\n    var quotient int\n    var remainder int\n\
    \    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n \
    \   var o int\n    var p int\n    var q int\n    var r int\n    var s int\n  \
    \  var t int\n    var u int\n    var v int\n    var w int\n    var x int\n   \
    \ var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n \
    \   var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n\
    \    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n\
    \    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n\
    \    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n\
    \    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb\
    \ int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n  \
    \  var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk\
    \ int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n  \
    \  var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt\
    \ int\n    var uuu int\n    var vvv int\n    var www int", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    var result string\n    var roman_numerals = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ roman_numerals_order = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, numeral\
    \ := range roman_numerals_order {\n        for number >= numeral {\n         \
    \   result += roman_numerals[numeral]\n            number -= numeral\n       \
    \ }\n    }\n    return result\n}\n", "    var result string\n    for number >\
    \ 0 {\n        if number >= 1000 {\n            result += \"m\"\n            number\
    \ -= 1000\n        } else if number >= 900 {\n            result += \"cm\"\n \
    \           number -= 900\n        } else if number >= 500 {\n            result\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         result += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            result += \"c\"\n            number -= 100\n        }\
    \ else if number >= 90 {\n            result += \"xc\"\n            number -=\
    \ 90\n        } else if number >= 50 {\n            result += \"l\"\n        \
    \    number -= 50\n        } else if number >= 40 {\n            result += \"\
    xl\"\n            number -= 40\n        } else if number >= 10 {\n           \
    \ result += \"x\"\n            number -= 10\n        } else if number >= 9 {\n\
    \            result += \"ix\"\n            number -= 9\n        } else if number\
    \ >= 5 {\n            result += \"v\"\n            number -= 5\n        } else\
    \ if number >= 4 {\n            result += \"iv\"\n            number -= 4\n  \
    \      } else if number >= 1 {\n            result += \"i\"\n            number\
    \ -= 1\n        }\n    }\n    return result\n}\n", "    var result string\n  \
    \  var i int\n    var digit int\n    var roman_digit string\n    var roman_digits\
    \ = []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n\n    for i = 0;\
    \ i < 4; i++ {\n        digit = number % 10\n        number = number / 10\n  \
    \      switch digit {\n            case 1:\n                roman_digit = roman_digits[i\
    \ * 2]\n            case 2:\n                roman_digit = roman_digits[i * 2]\
    \ + roman_digits[i * 2]\n            case 3:\n                roman_digit = roman_digits[i\
    \ * 2] + roman_digits[i * 2] + roman_digits[i * 2]\n            case 4:\n    \
    \            roman_digit = roman_digits[i * 2] + roman_digits[i * 2 + 1]\n   \
    \         case 5:\n                roman_digit = roman_digits[i * 2 + 1]\n   \
    \         case 6:\n                roman_digit = roman_digits[i * 2 + 1] + roman_digits[i\
    \ * 2]\n            case 7:\n                roman_digit = roman_digits[i * 2\
    \ + 1] + roman_digits[i * 2] + roman_digits[i * 2]\n            case 8:\n    \
    \            roman_digit = roman_digits[i * 2 + 1] + roman_digits[i * 2] + roman_digits[i\
    \ * 2] + roman_digits[i * 2]\n            case 9:\n                roman_digit\
    \ = roman_digits[i * 2] + roman_digits[i * 2 + 2]\n            default:\n    \
    \            roman_digit = \"\"\n        }\n        result = roman_digit + result\n\
    \    }\n    return result\n}\n", "    var result string\n    var i int\n    var\
    \ roman_numerals = []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var numbers = []int{1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n\n    for i = 0; i < len(numbers);\
    \ i++ {\n        for number >= numbers[i] {\n            result += roman_numerals[i]\n\
    \            number -= numbers[i]\n        }\n    }\n\n    return result\n}\n",
  "    var result string\n    var roman_numerals = map[int]string{\n        1: \"\
    i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"\
    x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100:\
    \ \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n  \
    \      1000: \"m\",\n    }\n    var keys = []int{1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1}\n    for _, key := range keys {\n        for number\
    \ >= key {\n            result += roman_numerals[key]\n            number -= key\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement the function\n\
    \    return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    //\
    \ TODO: implement\n    return \"\"\n}\n", "    // TODO: implement\n    return\
    \ \"\"\n}\n", "    var result string\n    var roman_map = map[int]string{\n  \
    \      1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ roman_keys = []int{1000, 500, 100, 50, 10, 5, 1}\n    var roman_index int\n\
    \    var roman_value int\n    var roman_count int\n    var roman_char string\n\
    \    var roman_next_char string\n    var roman_next_value int\n    var roman_next_count\
    \ int\n    for number > 0 {\n        roman_index = 0\n        for number >= roman_keys[roman_index]\
    \ {\n            roman_index++\n        }\n        roman_index--\n        roman_value\
    \ = roman_keys[roman_index]\n        roman_count = number / roman_value\n    \
    \    roman_char = roman_map[roman_value]\n        if roman_index > 0 {\n     \
    \       roman_next_value = roman_keys[roman_index - 1]\n            roman_next_count\
    \ = number / roman_next_value\n            roman_next_char = roman_map[roman_next_value]\n\
    \            if roman_next_count == 4 {\n                roman_char = roman_next_char\
    \ + roman_char\n                roman_count = 1\n            }\n        }\n  \
    \      for i := 0; i < roman_count; i++ {\n            result += roman_char\n\
    \        }\n        number -= roman_value * roman_count\n    }\n    return result\n\
    }\n", "    var result string\n    var roman_map = map[int]string{\n        1:\
    \ \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100:\
    \ \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_keys\
    \ = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, key := range roman_keys {\n\
    \        for number >= key {\n            result += roman_map[key]\n         \
    \   number -= key\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    var roman string\n    for number > 0 {\n        if\
    \ number >= 1000 {\n            roman += \"m\"\n            number -= 1000\n \
    \       } else if number >= 900 {\n            roman += \"cm\"\n            number\
    \ -= 900\n        } else if number >= 500 {\n            roman += \"d\"\n    \
    \        number -= 500\n        } else if number >= 400 {\n            roman +=\
    \ \"cd\"\n            number -= 400\n        } else if number >= 100 {\n     \
    \       roman += \"c\"\n            number -= 100\n        } else if number >=\
    \ 90 {\n            roman += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            roman += \"l\"\n            number -= 50\n  \
    \      } else if number >= 40 {\n            roman += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            roman += \"x\"\n      \
    \      number -= 10\n        } else if number >= 9 {\n            roman += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            roman\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     roman += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            roman += \"i\"\n            number -= 1\n        }\n    }\n \
    \   return roman\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", " \
    \   var result string\n    var i int\n    var roman_numerals = []string{\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"}\n    var values = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1}\n\n    for i = 0; i < len(values); i++ {\n        for number >=\
    \ values[i] {\n            number -= values[i]\n            result += roman_numerals[i]\n\
    \        }\n    }\n\n    return result\n}\n", "    // TODO: Implement this function\n\
    \    return \"\"\n}\n", "    var result string\n    var roman_numerals = map[int]string{\n\
    \        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n\
    \        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\"\
    ,\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900:\
    \ \"cm\",\n        1000: \"m\",\n    }\n    var keys []int\n    for k := range\
    \ roman_numerals {\n        keys = append(keys, k)\n    }\n    for i := len(keys)\
    \ - 1; i >= 0; i-- {\n        for number >= keys[i] {\n            result += roman_numerals[keys[i]]\n\
    \            number -= keys[i]\n        }\n    }\n    return result\n}\n", " \
    \   var roman string\n    var roman_map = map[int]string{\n        1: \"i\",\n\
    \        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\"\
    ,\n        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_map_keys =\
    \ []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, key := range roman_map_keys\
    \ {\n        for number >= key {\n            roman += roman_map[key]\n      \
    \      number -= key\n        }\n    }\n    return roman\n}\n", "    // TODO:\
    \ Implement this function\n    return \"\"\n}\n", "    // TODO: implement\n  \
    \  return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    var\
    \ roman string\n    if number < 1 || number > 1000 {\n        return \"\"\n  \
    \  }\n    for number > 0 {\n        if number >= 1000 {\n            roman +=\
    \ \"m\"\n            number -= 1000\n        } else if number >= 900 {\n     \
    \       roman += \"cm\"\n            number -= 900\n        } else if number >=\
    \ 500 {\n            roman += \"d\"\n            number -= 500\n        } else\
    \ if number >= 400 {\n            roman += \"cd\"\n            number -= 400\n\
    \        } else if number >= 100 {\n            roman += \"c\"\n            number\
    \ -= 100\n        } else if number >= 90 {\n            roman += \"xc\"\n    \
    \        number -= 90\n        } else if number >= 50 {\n            roman +=\
    \ \"l\"\n            number -= 50\n        } else if number >= 40 {\n        \
    \    roman += \"xl\"\n            number -= 40\n        } else if number >= 10\
    \ {\n            roman += \"x\"\n            number -= 10\n        } else if number\
    \ >= 9 {\n            roman += \"ix\"\n            number -= 9\n        } else\
    \ if number >= 5 {\n            roman += \"v\"\n            number -= 5\n    \
    \    } else if number >= 4 {\n            roman += \"iv\"\n            number\
    \ -= 4\n        } else if number >= 1 {\n            roman += \"i\"\n        \
    \    number -= 1\n        }\n    }\n    return roman\n}\n", "    var result string\n\
    \    var roman_map = map[int]string{\n        1: \"i\",\n        5: \"v\",\n \
    \       10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"d\"\
    ,\n        1000: \"m\",\n    }\n    var roman_map_keys = []int{1000, 500, 100,\
    \ 50, 10, 5, 1}\n    var roman_map_keys_len = len(roman_map_keys)\n    var i int\n\
    \    var key int\n    var value string\n    var num_of_key int\n    var num_of_key_str\
    \ string\n    var num_of_key_str_len int\n    var num_of_key_str_last_char string\n\
    \    var num_of_key_str_last_char_index int\n    var num_of_key_str_last_char_value\
    \ string\n    var num_of_key_str_last_char_value_index int\n    var num_of_key_str_last_char_value_index_in_roman_map_keys\
    \ int\n    var num_of_key_str_last_char_value_index_in_roman_map_keys_next int\n\
    \    var num_of_key_str_last_char_value_index_in_roman_map_keys_next_value string\n\
    \    var num_of_key_str_last_char_value_index_in_roman_map_keys_next_value_index\
    \ int\n    var num_of_key_str_last_char_value_index_in_roman_map_keys_next_value_index_in_roman_map_keys\
    \ int\n    var num_of_key_str_last_char_value_index_in_roman_map_keys_next_value_index_in_roman_map_keys_next\
    \ int\n    var num_of_key_str_last_char_value_index_in_roman_map_keys_next_value_index_in_roman_map_keys_next_value\
    \ string\n    var num_of_key_str_last_char_value_index_in_roman_map_keys_next_",
  "    var result string\n    if number >= 1000 {\n        result += \"m\"\n     \
    \   number -= 1000\n    }\n    if number >= 900 {\n        result += \"cm\"\n\
    \        number -= 900\n    }\n    if number >= 500 {\n        result += \"d\"\
    \n        number -= 500\n    }\n    if number >= 400 {\n        result += \"cd\"\
    \n        number -= 400\n    }\n    if number >= 100 {\n        result += \"c\"\
    \n        number -= 100\n    }\n    if number >= 90 {\n        result += \"xc\"\
    \n        number -= 90\n    }\n    if number >= 50 {\n        result += \"l\"\n\
    \        number -= 50\n    }\n    if number >= 40 {\n        result += \"xl\"\n\
    \        number -= 40\n    }\n    if number >= 10 {\n        result += \"x\"\n\
    \        number -= 10\n    }\n    if number >= 9 {\n        result += \"ix\"\n\
    \        number -= 9\n    }\n    if number >= 5 {\n        result += \"v\"\n \
    \       number -= 5\n    }\n    if number >= 4 {\n        result += \"iv\"\n \
    \       number -= 4\n    }\n    if number >= 1 {\n        result += \"i\"\n  \
    \      number -= 1\n    }\n    return result\n}\n", "    var result string\n \
    \   var numeral_map = map[int]string{\n        1: \"i\",\n        5: \"v\",\n\
    \        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"\
    d\",\n        1000: \"m\",\n    }\n    var numeral_order = []int{1000, 500, 100,\
    \ 50, 10, 5, 1}\n    var numeral_order_len = len(numeral_order)\n    var numeral_order_index\
    \ int\n    var numeral_order_value int\n    var numeral_order_value_string string\n\
    \    var numeral_order_value_next int\n    var numeral_order_value_next_string\
    \ string\n    var numeral_order_value_next_next int\n    var numeral_order_value_next_next_string\
    \ string\n    var numeral_order_value_next_next_next int\n    var numeral_order_value_next_next_next_string\
    \ string\n    var numeral_order_value_next_next_next_next int\n    var numeral_order_value_next_next_next_next_string\
    \ string\n    var numeral_order_value_next_next_next_next_next int\n    var numeral_order_value_next_next_next_next_next_string\
    \ string\n    var numeral_order_value_next_next_next_next_next_next int\n    var\
    \ numeral_order_value_next_next_next_next_next_next_string string\n    var numeral_order_value_next_next_next_next_next_next_next\
    \ int\n    var numeral_order_value_next_next_next_next_next_next_next_string string\n\
    \    var numeral_order_value_next_next_next_next_next_next_next_next int\n   \
    \ var numeral_order_value_next_next_next_next_next_next_next_next_string string\n\
    \    var numeral_order_value_next_next_next_next_next_next_next_next_next int\n\
    \    var numeral_order_value_next_next_next_next_next", "    var result string\n\
    \    var numeral string\n    var count int\n    var i int\n\n    for i = 0; i\
    \ < len(numerals); i++ {\n        numeral = numerals[i]\n        count = number\
    \ / values[i]\n        number = number % values[i]\n        result += repeat(numeral,\
    \ count)\n    }\n\n    return result\n}\n", "    // TODO: implement\n    return\
    \ \"\"\n}\n", "    // TODO\n    return \"\"\n}\n", "    var result string\n  \
    \  var i int\n    var roman_numeral_map = map[int]string{\n        1: \"i\",\n\
    \        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\"\
    ,\n        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_numeral_map_keys\
    \ []int\n    for k := range roman_numeral_map {\n        roman_numeral_map_keys\
    \ = append(roman_numeral_map_keys, k)\n    }\n    for i = len(roman_numeral_map_keys)\
    \ - 1; i >= 0; i-- {\n        if number >= roman_numeral_map_keys[i] {\n     \
    \       break\n        }\n    }\n    for number > 0 {\n        if number >= roman_numeral_map_keys[i]\
    \ {\n            result += roman_numeral_map[roman_numeral_map_keys[i]]\n    \
    \        number -= roman_numeral_map_keys[i]\n        } else {\n            i--\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var roman_numerals\
    \ = map[int]string{\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n\
    \        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\"\
    ,\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500:\
    \ \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n    var keys = []int{1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for _, key := range keys\
    \ {\n        for number >= key {\n            result += roman_numerals[key]\n\
    \            number -= key\n        }\n    }\n    return result\n}\n", "    //\
    \ TODO: implement this function\n    return \"\"\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    // TODO: implement this function\n    return \"\"\
    \n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    var result string\n\
    \    if number < 1 || number > 1000 {\n        return result\n    }\n    if number\
    \ >= 1000 {\n        result += \"m\"\n        number -= 1000\n    }\n    if number\
    \ >= 900 {\n        result += \"cm\"\n        number -= 900\n    }\n    if number\
    \ >= 500 {\n        result += \"d\"\n        number -= 500\n    }\n    if number\
    \ >= 400 {\n        result += \"cd\"\n        number -= 400\n    }\n    if number\
    \ >= 100 {\n        result += \"c\"\n        number -= 100\n    }\n    if number\
    \ >= 90 {\n        result += \"xc\"\n        number -= 90\n    }\n    if number\
    \ >= 50 {\n        result += \"l\"\n        number -= 50\n    }\n    if number\
    \ >= 40 {\n        result += \"xl\"\n        number -= 40\n    }\n    if number\
    \ >= 10 {\n        result += \"x\"\n        number -= 10\n    }\n    if number\
    \ >= 9 {\n        result += \"ix\"\n        number -= 9\n    }\n    if number\
    \ >= 5 {\n        result += \"v\"\n        number -= 5\n    }\n    if number >=\
    \ 4 {\n        result += \"iv\"\n        number -= 4\n    }\n    if number >=\
    \ 1 {\n        result += \"i\"\n        number -= 1\n    }\n    return result\n\
    }\n", "    var roman string\n    if number >= 1000 {\n        roman += \"m\"\n\
    \        number -= 1000\n    }\n    if number >= 900 {\n        roman += \"cm\"\
    \n        number -= 900\n    }\n    if number >= 500 {\n        roman += \"d\"\
    \n        number -= 500\n    }\n    if number >= 400 {\n        roman += \"cd\"\
    \n        number -= 400\n    }\n    if number >= 100 {\n        roman += \"c\"\
    \n        number -= 100\n    }\n    if number >= 90 {\n        roman += \"xc\"\
    \n        number -= 90\n    }\n    if number >= 50 {\n        roman += \"l\"\n\
    \        number -= 50\n    }\n    if number >= 40 {\n        roman += \"xl\"\n\
    \        number -= 40\n    }\n    if number >= 10 {\n        roman += \"x\"\n\
    \        number -= 10\n    }\n    if number >= 9 {\n        roman += \"ix\"\n\
    \        number -= 9\n    }\n    if number >= 5 {\n        roman += \"v\"\n  \
    \      number -= 5\n    }\n    if number >= 4 {\n        roman += \"iv\"\n   \
    \     number -= 4\n    }\n    if number >= 1 {\n        roman += \"i\"\n     \
    \   number -= 1\n    }\n    return roman\n}\n", "    var result string\n    var\
    \ roman_numerals = map[int]string{\n        1: \"i\",\n        5: \"v\",\n   \
    \     10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"d\"\
    ,\n        1000: \"m\",\n    }\n    var roman_numerals_order = []int{1000, 500,\
    \ 100, 50, 10, 5, 1}\n    var roman_numerals_subtract = map[int]int{\n       \
    \ 1: 5,\n        10: 50,\n        100: 500,\n    }\n    var roman_numerals_add\
    \ = map[int]int{\n        1: 1,\n        10: 10,\n        100: 100,\n    }\n \
    \   var roman_numerals_subtract_order = []int{100, 10, 1}\n    var roman_numerals_add_order\
    \ = []int{1, 10, 100}\n\n    for _, numeral := range roman_numerals_order {\n\
    \        for number >= numeral {\n            result += roman_numerals[numeral]\n\
    \            number -= numeral\n        }\n    }\n\n    for _, numeral := range\
    \ roman_numerals_subtract_order {\n        for number >= (numeral - roman_numerals_subtract[numeral])\
    \ {\n            result += roman_numerals[roman_numerals_subtract[numeral]] +\
    \ roman_numerals[numeral]\n            number -= numeral - roman_numerals_subtract[numeral]\n\
    \        }\n    }\n\n    for _, numeral := range roman_numerals_add_order {\n\
    \        for number >= (numeral + roman_numerals_add[numeral]) {\n           \
    \ result += roman_numerals[numeral] + roman_numerals[roman_numerals_add[numeral]]\n\
    \            number -= numeral + roman_numerals_add[numeral]\n        }\n    }\n\
    \n    return result\n}\n", "    // TODO: implement this function\n    return \"\
    \"\n}\n", "    // TODO: Implement this function\n    return \"\"\n}\n", "    var\
    \ result string\n    for number > 0 {\n        if number >= 1000 {\n         \
    \   result += \"m\"\n            number -= 1000\n        } else if number >= 900\
    \ {\n            result += \"cm\"\n            number -= 900\n        } else if\
    \ number >= 500 {\n            result += \"d\"\n            number -= 500\n  \
    \      } else if number >= 400 {\n            result += \"cd\"\n            number\
    \ -= 400\n        } else if number >= 100 {\n            result += \"c\"\n   \
    \         number -= 100\n        } else if number >= 90 {\n            result\
    \ += \"xc\"\n            number -= 90\n        } else if number >= 50 {\n    \
    \        result += \"l\"\n            number -= 50\n        } else if number >=\
    \ 40 {\n            result += \"xl\"\n            number -= 40\n        } else\
    \ if number >= 10 {\n            result += \"x\"\n            number -= 10\n \
    \       } else if number >= 9 {\n            result += \"ix\"\n            number\
    \ -= 9\n        } else if number >= 5 {\n            result += \"v\"\n       \
    \     number -= 5\n        } else if number >= 4 {\n            result += \"iv\"\
    \n            number -= 4\n        } else if number >= 1 {\n            result\
    \ += \"i\"\n            number -= 1\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement this function\n    return \"\"\n}\n", "    var result string\n\
    \    var roman_numerals = map[int]string{\n        1: \"i\",\n        4: \"iv\"\
    ,\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\"\
    ,\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400:\
    \ \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n \
    \   }\n    var keys []int\n    for k := range roman_numerals {\n        keys =\
    \ append(keys, k)\n    }\n    for i := len(keys) - 1; i >= 0; i-- {\n        for\
    \ number >= keys[i] {\n            result += roman_numerals[keys[i]]\n       \
    \     number -= keys[i]\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var i int\n    for i = 0; i < number; i++ {\n        result += \"\
    i\"\n    }\n    return result\n}\n", "    // TODO: implement this function\n \
    \   return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    //\
    \ TODO: implement\n    return \"\"\n}\n", "    if number < 1 || number > 1000\
    \ {\n        return \"Invalid number\"\n    }\n    var roman string\n    for number\
    \ > 0 {\n        if number >= 1000 {\n            roman += \"m\"\n           \
    \ number -= 1000\n        } else if number >= 900 {\n            roman += \"cm\"\
    \n            number -= 900\n        } else if number >= 500 {\n            roman\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         roman += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            roman += \"c\"\n            number -= 100\n        } else\
    \ if number >= 90 {\n            roman += \"xc\"\n            number -= 90\n \
    \       } else if number >= 50 {\n            roman += \"l\"\n            number\
    \ -= 50\n        } else if number >= 40 {\n            roman += \"xl\"\n     \
    \       number -= 40\n        } else if number >= 10 {\n            roman += \"\
    x\"\n            number -= 10\n        } else if number >= 9 {\n            roman\
    \ += \"ix\"\n            number -= 9\n        } else if number >= 5 {\n      \
    \      roman += \"v\"\n            number -= 5\n        } else if number >= 4\
    \ {\n            roman += \"iv\"\n            number -= 4\n        } else if number\
    \ >= 1 {\n            roman += \"i\"\n            number -= 1\n        }\n   \
    \ }\n    return roman\n}\n", "    var result string\n    var roman_numerals =\
    \ []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\",\
    \ \"ix\", \"v\", \"iv\", \"i\"}\n    var arabic_numerals = []int{1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i := 0; i < len(arabic_numerals);\
    \ i++ {\n        for number >= arabic_numerals[i] {\n            number -= arabic_numerals[i]\n\
    \            result += roman_numerals[i]\n        }\n    }\n    return result\n\
    }\n", "    roman := \"\"\n    for number > 0 {\n        if number >= 1000 {\n\
    \            roman += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            roman += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            roman += \"d\"\n            number -= 500\n\
    \        } else if number >= 400 {\n            roman += \"cd\"\n            number\
    \ -= 400\n        } else if number >= 100 {\n            roman += \"c\"\n    \
    \        number -= 100\n        } else if number >= 90 {\n            roman +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     roman += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            roman += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            roman += \"x\"\n            number -= 10\n     \
    \   } else if number >= 9 {\n            roman += \"ix\"\n            number -=\
    \ 9\n        } else if number >= 5 {\n            roman += \"v\"\n           \
    \ number -= 5\n        } else if number >= 4 {\n            roman += \"iv\"\n\
    \            number -= 4\n        } else if number >= 1 {\n            roman +=\
    \ \"i\"\n            number -= 1\n        }\n    }\n    return roman\n}\n", " \
    \   var result string\n    var roman_numerals = map[int]string{\n        1: \"\
    i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100:\
    \ \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_numerals_order\
    \ = []int{1000, 500, 100, 50, 10, 5, 1}\n    var number_copy = number\n    for\
    \ _, roman_numeral := range roman_numerals_order {\n        for number_copy >=\
    \ roman_numeral {\n            result += roman_numerals[roman_numeral]\n     \
    \       number_copy -= roman_numeral\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement\n    return \"\"\n}\n", "    // TODO: Implement int_to_mini_roman\n\
    \    return \"\"\n}\n", "    var result string\n    var roman_numerals = map[int]string{\n\
    \        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n\
    \        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\"\
    ,\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900:\
    \ \"cm\",\n        1000: \"m\",\n    }\n    var keys []int\n    for k := range\
    \ roman_numerals {\n        keys = append(keys, k)\n    }\n    for i := len(keys)\
    \ - 1; i >= 0; i-- {\n        for number >= keys[i] {\n            result += roman_numerals[keys[i]]\n\
    \            number -= keys[i]\n        }\n    }\n    return result\n}\n", " \
    \   if number < 1 || number > 1000 {\n        return \"\"\n    }\n    var result\
    \ string\n    var roman_numerals = []string{\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var arabic_numerals\
    \ = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i :=\
    \ 0; i < len(arabic_numerals); i++ {\n        for number >= arabic_numerals[i]\
    \ {\n            result += roman_numerals[i]\n            number -= arabic_numerals[i]\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement\n    return\
    \ \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    var result\
    \ string\n    var i int\n    var roman_numerals = []string{\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n\
    \    var values = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n\
    \n    for i = 0; i < len(values); i++ {\n        for number >= values[i] {\n \
    \           result += roman_numerals[i]\n            number -= values[i]\n   \
    \     }\n    }\n    return result\n}\n", "    roman_numerals := map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    roman_numerals_order\
    \ := []int{1000, 500, 100, 50, 10, 5, 1}\n    roman_numeral := \"\"\n    for _,\
    \ roman_numeral_value := range roman_numerals_order {\n        for number >= roman_numeral_value\
    \ {\n            roman_numeral += roman_numerals[roman_numeral_value]\n      \
    \      number -= roman_numeral_value\n        }\n    }\n    return roman_numeral\n\
    }\n", "    // TODO: Implement me!\n    return \"\"\n}\n", "    var result string\n\
    \    if number < 1 || number > 1000 {\n        return result\n    }\n    var roman_numerals\
    \ = map[int]string{\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n\
    \        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"\
    m\",\n    }\n    var roman_numerals_subtract = map[int]string{\n        4: \"\
    iv\",\n        9: \"ix\",\n        40: \"xl\",\n        90: \"xc\",\n        400:\
    \ \"cd\",\n        900: \"cm\",\n    }\n    var keys []int\n    for k := range\
    \ roman_numerals {\n        keys = append(keys, k)\n    }\n    for k := range\
    \ roman_numerals_subtract {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n\
    \    for i := len(keys) - 1; i >= 0; i-- {\n        if number >= keys[i] {\n \
    \           if _, ok := roman_numerals_subtract[keys[i]]; ok {\n             \
    \   result += roman_numerals_subtract[keys[i]]\n            } else {\n       \
    \         result += roman_numerals[keys[i]]\n            }\n            number\
    \ -= keys[i]\n            i++\n        }\n    }\n    return result\n}\n", "  \
    \  // TODO: Implement this function\n    return \"\"\n}\n", "    // TODO: Implement\n\
    \    return \"\"\n}\n", "    var result string\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ roman_values = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, value := range\
    \ roman_values {\n        for number >= value {\n            result += roman_map[value]\n\
    \            number -= value\n        }\n    }\n    return result\n}\n", "   \
    \ var result string\n    for number > 0 {\n        if number >= 1000 {\n     \
    \       result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    for number > 0 {\n        if number\
    \ >= 1000 {\n            result += \"m\"\n            number -= 1000\n       \
    \ } else if number >= 900 {\n            result += \"cm\"\n            number\
    \ -= 900\n        } else if number >= 500 {\n            result += \"d\"\n   \
    \         number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "  \
    \  var result string\n    var numeral_map = map[int]string{\n        1: \"i\"\
    ,\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"\
    c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var numeral_values\
    \ = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, numeral_value := range numeral_values\
    \ {\n        if number >= numeral_value {\n            result += numeral_map[numeral_value]\n\
    \            number -= numeral_value\n        }\n    }\n    return result\n}\n",
  "    // TODO: Implement\n    return \"\"\n}\n", "    var result string\n    var\
    \ i int\n    for i = 0; i < number; i++ {\n        result += \"i\"\n    }\n  \
    \  return result\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    var\
    \ result string\n    var roman_map = map[int]string{\n        1: \"i\",\n    \
    \    5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n\
    \        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_keys = []int{1000,\
    \ 500, 100, 50, 10, 5, 1}\n    var roman_value string\n    var roman_key int\n\
    \    var roman_index int\n    var roman_count int\n    var roman_next_key int\n\
    \    var roman_next_value string\n    var roman_next_count int\n    var roman_next_index\
    \ int\n    var roman_next_key_index int\n    var roman_next_key_value string\n\
    \    var roman_next_key_count int\n    var roman_next_key_index int\n    var roman_next_key_next_key\
    \ int\n    var roman_next_key_next_value string\n    var roman_next_key_next_count\
    \ int\n    var roman_next_key_next_index int\n    var roman_next_key_next_key_index\
    \ int\n    var roman_next_key_next_key_value string\n    var roman_next_key_next_key_count\
    \ int\n    var roman_next_key_next_key_index int\n    var roman_next_key_next_key_next_key\
    \ int\n    var roman_next_key_next_key_next_value string\n    var roman_next_key_next_key_next_count\
    \ int\n    var roman_next_key_next_key_next_index int\n    var roman_next_key_next_key_next_key_index\
    \ int\n    var roman_next_key_next_key_next_key_value string\n    var roman_next_key_next_key_next_key_count\
    \ int\n    var roman_next_key_next_key_next_key_index int\n    var roman_next_key_next_key_next_key_next_key\
    \ int\n   ", "    if number < 1 || number > 1000 {\n        return \"\"\n    }\n\
    \    var result string\n    for number > 0 {\n        if number >= 1000 {\n  \
    \          result += \"m\"\n            number -= 1000\n        } else if number\
    \ >= 900 {\n            result += \"cm\"\n            number -= 900\n        }\
    \ else if number >= 500 {\n            result += \"d\"\n            number -=\
    \ 500\n        } else if number >= 400 {\n            result += \"cd\"\n     \
    \       number -= 400\n        } else if number >= 100 {\n            result +=\
    \ \"c\"\n            number -= 100\n        } else if number >= 90 {\n       \
    \     result += \"xc\"\n            number -= 90\n        } else if number >=\
    \ 50 {\n            result += \"l\"\n            number -= 50\n        } else\
    \ if number >= 40 {\n            result += \"xl\"\n            number -= 40\n\
    \        } else if number >= 10 {\n            result += \"x\"\n            number\
    \ -= 10\n        } else if number >= 9 {\n            result += \"ix\"\n     \
    \       number -= 9\n        } else if number >= 5 {\n            result += \"\
    v\"\n            number -= 5\n        } else if number >= 4 {\n            result\
    \ += \"iv\"\n            number -= 4\n        } else if number >= 1 {\n      \
    \      result += \"i\"\n            number -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var numeral string\n    var numeral_value\
    \ int\n    var numeral_count int\n    var numeral_map = map[int]string{\n    \
    \    1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n  \
    \      100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ numeral_values = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, numeral_value\
    \ = range numeral_values {\n        numeral_count = number / numeral_value\n \
    \       number = number % numeral_value\n        numeral = numeral_map[numeral_value]\n\
    \        if numeral_count == 4 {\n            result += numeral + numeral_map[numeral_value\
    \ * 5]\n        } else {\n            for i := 0; i < numeral_count; i++ {\n \
    \               result += numeral\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    // TODO:\
    \ implement\n    return \"\"\n}\n", "    var result string\n    var roman_map\
    \ = map[int]string{\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n\
    \        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"\
    m\",\n    }\n    var roman_map_keys = []int{1000, 500, 100, 50, 10, 5, 1}\n  \
    \  var number_copy = number\n    for _, key := range roman_map_keys {\n      \
    \  if number_copy >= key {\n            result += roman_map[key]\n           \
    \ number_copy -= key\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var roman_map = map[int]string{\n        1: \"i\",\n        4: \"\
    iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40:\
    \ \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n    \
    \    400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"\
    m\",\n    }\n    var keys []int\n    for k := range roman_map {\n        keys\
    \ = append(keys, k)\n    }\n    for i := len(keys) - 1; i >= 0; i-- {\n      \
    \  for number >= keys[i] {\n            result += roman_map[keys[i]]\n       \
    \     number -= keys[i]\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    for number > 0 {\n        if number >= 1000 {\n            result\
    \ += \"m\"\n            number -= 1000\n        } else if number >= 900 {\n  \
    \          result += \"cm\"\n            number -= 900\n        } else if number\
    \ >= 500 {\n            result += \"d\"\n            number -= 500\n        }\
    \ else if number >= 400 {\n            result += \"cd\"\n            number -=\
    \ 400\n        } else if number >= 100 {\n            result += \"c\"\n      \
    \      number -= 100\n        } else if number >= 90 {\n            result +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     result += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            result += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            result += \"x\"\n            number -= 10\n    \
    \    } else if number >= 9 {\n            result += \"ix\"\n            number\
    \ -= 9\n        } else if number >= 5 {\n            result += \"v\"\n       \
    \     number -= 5\n        } else if number >= 4 {\n            result += \"iv\"\
    \n            number -= 4\n        } else if number >= 1 {\n            result\
    \ += \"i\"\n            number -= 1\n        }\n    }\n    return result\n}\n",
  "    var result string\n    var i int\n\n    if number < 1 || number > 1000 {\n\
    \        return \"\"\n    }\n\n    for i = 0; i < number / 1000; i++ {\n     \
    \   result += \"m\"\n    }\n\n    number = number % 1000\n    if number >= 900\
    \ {\n        result += \"cm\"\n        number -= 900\n    }\n\n    if number >=\
    \ 500 {\n        result += \"d\"\n        number -= 500\n    }\n\n    if number\
    \ >= 400 {\n        result += \"cd\"\n        number -= 400\n    }\n\n    for\
    \ i = 0; i < number / 100; i++ {\n        result += \"c\"\n    }\n\n    number\
    \ = number % 100\n    if number >= 90 {\n        result += \"xc\"\n        number\
    \ -= 90\n    }\n\n    if number >= 50 {\n        result += \"l\"\n        number\
    \ -= 50\n    }\n\n    if number >= 40 {\n        result += \"xl\"\n        number\
    \ -= 40\n    }\n\n    for i = 0; i < number / 10; i++ {\n        result += \"\
    x\"\n    }\n\n    number = number % 10\n    if number >= 9 {\n        result +=\
    \ \"ix\"\n        number -= 9\n    }\n\n    if number >= 5 {\n        result +=\
    \ \"v\"\n        number -= 5\n    }\n\n    if number >= 4 {\n        result +=\
    \ \"iv\"\n        number -= 4\n    }\n\n    for i = 0; i < number; i++ {\n   \
    \     result += \"i\"\n    }\n\n    return result\n}\n", "    var result string\n\
    \    var i int\n    var roman_numerals = []string{\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var\
    \ values = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n\n   \
    \ for i = 0; i < len(values); i++ {\n        for number >= values[i] {\n     \
    \       result += roman_numerals[i]\n            number -= values[i]\n       \
    \ }\n    }\n    return result\n}\n", "    var result string\n    for number >\
    \ 0 {\n        if number >= 1000 {\n            result += \"m\"\n            number\
    \ -= 1000\n        } else if number >= 900 {\n            result += \"cm\"\n \
    \           number -= 900\n        } else if number >= 500 {\n            result\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         result += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            result += \"c\"\n            number -= 100\n        }\
    \ else if number >= 90 {\n            result += \"xc\"\n            number -=\
    \ 90\n        } else if number >= 50 {\n            result += \"l\"\n        \
    \    number -= 50\n        } else if number >= 40 {\n            result += \"\
    xl\"\n            number -= 40\n        } else if number >= 10 {\n           \
    \ result += \"x\"\n            number -= 10\n        } else if number >= 9 {\n\
    \            result += \"ix\"\n            number -= 9\n        } else if number\
    \ >= 5 {\n            result += \"v\"\n            number -= 5\n        } else\
    \ if number >= 4 {\n            result += \"iv\"\n            number -= 4\n  \
    \      } else if number >= 1 {\n            result += \"i\"\n            number\
    \ -= 1\n        }\n    }\n    return result\n}\n", "    var result string\n  \
    \  var roman_map = map[int]string{\n        1: \"i\",\n        5: \"v\",\n   \
    \     10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"d\"\
    ,\n        1000: \"m\",\n    }\n    var roman_numbers = []int{1000, 500, 100,\
    \ 50, 10, 5, 1}\n    for _, roman_number := range roman_numbers {\n        if\
    \ number >= roman_number {\n            result += roman_map[roman_number]\n  \
    \          number -= roman_number\n        }\n    }\n    return result\n}\n",
  "    var result string\n    var i int\n    for i = 0; i < number; i++ {\n      \
    \  result += \"i\"\n    }\n    return result\n}\n", "    if number < 1 || number\
    \ > 1000 {\n        return \"\"\n    }\n    var result string\n    for number\
    \ > 0 {\n        if number >= 1000 {\n            result += \"m\"\n          \
    \  number -= 1000\n        } else if number >= 900 {\n            result += \"\
    cm\"\n            number -= 900\n        } else if number >= 500 {\n         \
    \   result += \"d\"\n            number -= 500\n        } else if number >= 400\
    \ {\n            result += \"cd\"\n            number -= 400\n        } else if\
    \ number >= 100 {\n            result += \"c\"\n            number -= 100\n  \
    \      } else if number >= 90 {\n            result += \"xc\"\n            number\
    \ -= 90\n        } else if number >= 50 {\n            result += \"l\"\n     \
    \       number -= 50\n        } else if number >= 40 {\n            result +=\
    \ \"xl\"\n            number -= 40\n        } else if number >= 10 {\n       \
    \     result += \"x\"\n            number -= 10\n        } else if number >= 9\
    \ {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    if number < 1 || number > 1000 {\n        return\
    \ \"\"\n    }\n    var result string\n    for number > 0 {\n        if number\
    \ >= 1000 {\n            result += \"m\"\n            number -= 1000\n       \
    \ } else if number >= 900 {\n            result += \"cm\"\n            number\
    \ -= 900\n        } else if number >= 500 {\n            result += \"d\"\n   \
    \         number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ roman_values = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, value := range\
    \ roman_values {\n        for number >= value {\n            result += roman_map[value]\n\
    \            number -= value\n        }\n    }\n    return result\n}\n", "   \
    \ var result string\n    var remainder int\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n\n   \
    \ if number < 1 || number > 1000 {\n        return \"\"\n    }\n\n    if number\
    \ < 4 {\n        for i := 0; i < number; i++ {\n            result += roman_map[1]\n\
    \        }\n        return result\n    }\n\n    if number < 10 {\n        if number\
    \ == 4 {\n            return roman_map[1] + roman_map[5]\n        }\n        if\
    \ number == 9 {\n            return roman_map[1] + roman_map[10]\n        }\n\
    \        result = roman_map[5]\n        remainder = number - 5\n        for i\
    \ := 0; i < remainder; i++ {\n            result += roman_map[1]\n        }\n\
    \        return result\n    }\n\n    if number < 40 {\n        if number == 40\
    \ {\n            return roman_map[10] + roman_map[50]\n        }\n        if number\
    \ == 90 {\n            return roman_map[10] + roman_map[100]\n        }\n    \
    \    result = roman_map[10]\n        remainder = number - 10\n        for i :=\
    \ 0; i < remainder; i++ {\n            result += roman_map[1]\n        }\n   \
    \     return result\n    }\n\n    if number < 100 {\n        if number == 40 {\n\
    \            return roman_map[10] + roman_map[50]\n        }\n        if number\
    \ == 90 {\n            return roman_map[10] + roman_map[100]\n        }\n    \
    \    result = roman_map[50]\n        remainder = number - 50\n        for i :=\
    \ 0; i < remainder; i++ {\n            result += roman_map[10]\n        }\n  \
    \      return result\n    }\n\n    if number < 400 {\n        if number == 400\
    \ {\n            return roman_map[100] + roman_", "    var result string\n   \
    \ var numeral_map = map[int]string{\n        1: \"i\",\n        5: \"v\",\n  \
    \      10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"d\"\
    ,\n        1000: \"m\",\n    }\n    var numeral_values = []int{1000, 500, 100,\
    \ 50, 10, 5, 1}\n    var numeral_index int\n    var numeral_value int\n    var\
    \ numeral_string string\n    var numeral_count int\n    var numeral_next_value\
    \ int\n    var numeral_next_string string\n    var numeral_next_count int\n  \
    \  var numeral_next_index int\n    for number > 0 {\n        numeral_index = 0\n\
    \        for number >= numeral_values[numeral_index] {\n            numeral_index++\n\
    \        }\n        numeral_value = numeral_values[numeral_index]\n        numeral_string\
    \ = numeral_map[numeral_value]\n        numeral_count = number / numeral_value\n\
    \        number = number % numeral_value\n        if numeral_index < len(numeral_values)\
    \ - 1 {\n            numeral_next_index = numeral_index + 1\n            numeral_next_value\
    \ = numeral_values[numeral_next_index]\n            numeral_next_string = numeral_map[numeral_next_value]\n\
    \            numeral_next_count = number / numeral_next_value\n            if\
    \ numeral_next_count == 4 {\n                result += numeral_next_string + numeral_string\n\
    \                number = number % numeral_next_value\n            } else {\n\
    \                for i := 0; i < numeral_count; i++ {\n                    result\
    \ += numeral_string\n                }\n            }\n        } else {\n    \
    \        for i := 0; i < numeral_count; i++ {\n                result += numeral_string\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var i int\n    var num int\n    var roman_numerals = [][]string{\n      \
    \  {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"\
    IX\"},\n        {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\"\
    , \"LXXX\", \"XC\"},\n        {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"\
    DC\", \"DCC\", \"DCCC\", \"CM\"},\n        {\"\", \"M\", \"MM\", \"MMM\", \"\"\
    , \"\", \"\", \"\", \"\", \"\"},\n    }\n\n    for i = 0; i < 4; i++ {\n     \
    \   num = number % 10\n        number /= 10\n        result = roman_numerals[i][num]\
    \ + result\n    }\n\n    return result\n}\n", "    var result string\n    for\
    \ number > 0 {\n        if number >= 1000 {\n            result += \"m\"\n   \
    \         number -= 1000\n        } else if number >= 900 {\n            result\
    \ += \"cm\"\n            number -= 900\n        } else if number >= 500 {\n  \
    \          result += \"d\"\n            number -= 500\n        } else if number\
    \ >= 400 {\n            result += \"cd\"\n            number -= 400\n        }\
    \ else if number >= 100 {\n            result += \"c\"\n            number -=\
    \ 100\n        } else if number >= 90 {\n            result += \"xc\"\n      \
    \      number -= 90\n        } else if number >= 50 {\n            result += \"\
    l\"\n            number -= 50\n        } else if number >= 40 {\n            result\
    \ += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n    \
    \        result += \"x\"\n            number -= 10\n        } else if number >=\
    \ 9 {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    // TODO: Implement\n\
    \    return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    //\
    \ TODO: implement\n    return \"\"\n}\n", "    // TODO: Implement me!\n    return\
    \ \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    var result\
    \ string\n    var roman_numerals = map[int]string{\n        1: \"i\",\n      \
    \  4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n   \
    \     40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\"\
    ,\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000:\
    \ \"m\",\n    }\n    var keys = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1}\n    for _, key := range keys {\n        for number >= key {\n \
    \           result += roman_numerals[key]\n            number -= key\n       \
    \ }\n    }\n    return result\n}\n", "    var roman string\n    for number > 0\
    \ {\n        if number >= 1000 {\n            roman += \"m\"\n            number\
    \ -= 1000\n        } else if number >= 900 {\n            roman += \"cm\"\n  \
    \          number -= 900\n        } else if number >= 500 {\n            roman\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         roman += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            roman += \"c\"\n            number -= 100\n        } else\
    \ if number >= 90 {\n            roman += \"xc\"\n            number -= 90\n \
    \       } else if number >= 50 {\n            roman += \"l\"\n            number\
    \ -= 50\n        } else if number >= 40 {\n            roman += \"xl\"\n     \
    \       number -= 40\n        } else if number >= 10 {\n            roman += \"\
    x\"\n            number -= 10\n        } else if number >= 9 {\n            roman\
    \ += \"ix\"\n            number -= 9\n        } else if number >= 5 {\n      \
    \      roman += \"v\"\n            number -= 5\n        } else if number >= 4\
    \ {\n            roman += \"iv\"\n            number -= 4\n        } else if number\
    \ >= 1 {\n            roman += \"i\"\n            number -= 1\n        }\n   \
    \ }\n    return roman\n}\n", "    var result string\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ roman_map_keys = []int{1000, 500, 100, 50, 10, 5, 1}\n    var roman_map_keys_len\
    \ = len(roman_map_keys)\n    var i int\n    var key int\n    var value string\n\
    \    var count int\n    var remainder int\n    for i = 0; i < roman_map_keys_len;\
    \ i++ {\n        key = roman_map_keys[i]\n        value = roman_map[key]\n   \
    \     count = number / key\n        remainder = number % key\n        if count\
    \ > 0 {\n            result += value\n            if count > 1 {\n           \
    \     result += value\n            }\n            if count > 2 {\n           \
    \     result += value\n            }\n            if count > 3 {\n           \
    \     result += value\n            }\n            if count > 4 {\n           \
    \     result += value\n            }\n            if count > 5 {\n           \
    \     result += value\n            }\n            if count > 6 {\n           \
    \     result += value\n            }\n            if count > 7 {\n           \
    \     result += value\n            }\n            if count > 8 {\n           \
    \     result += value\n            }\n            if count > 9 {\n           \
    \     result += value\n            }\n        }\n        number = remainder\n\
    \    }\n    return result\n}\n", "    var result string\n    if number < 1 ||\
    \ number > 1000 {\n        return result\n    }\n    var roman_numerals = []string{\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"}\n    var values = []int{1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1}\n    for i := 0; i < len(values); i++ {\n        for number\
    \ >= values[i] {\n            result += roman_numerals[i]\n            number\
    \ -= values[i]\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var i int\n    for i = 0; i < number; i++ {\n        result += \"i\"\n  \
    \  }\n    return result\n}\n", "    // TODO: implement\n    return \"\"\n}\n",
  "    var result string\n    var i int\n    var roman_numerals = []string{\"i\",\
    \ \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    var roman_values = []int{1, 5,\
    \ 10, 50, 100, 500, 1000}\n    var roman_values_length = len(roman_values)\n \
    \   var roman_numerals_length = len(roman_numerals)\n    var roman_values_index\
    \ int\n    var roman_numerals_index int\n    var roman_values_index_next int\n\
    \    var roman_numerals_index_next int\n    var roman_values_index_next_next int\n\
    \    var roman_numerals_index_next_next int\n    var roman_values_index_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next int\n    var roman_values_index_next_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next_next int\n    var roman_values_index_next_next_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next_next_next int\n    var roman_values_index_next_next_next_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next_next_next_next int\n    var\
    \ roman_values_index_next_next_next_next_next_next_next int\n    var roman_numerals_index_next_next_next_next_next_next_next\
    \ int\n    var roman_values_index_next_next_next_next_next_next_next_next int\n\
    \    var roman_numerals_index_next_next_next_next_next_next_next_next int\n  \
    \  var roman_values_index_next_next_next_next_next_next_next_next_next int\n \
    \   var roman_numerals_index_next_next_next_next_next_next_next_next_next int\n\
    \    var roman_values_", "    // TODO: Implement\n    return \"\"\n}\n", "   \
    \ // TODO: implement this function\n    return \"\"\n}\n", "    var result string\n\
    \    var numeral = []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n\
    \    var value = []int{1, 5, 10, 50, 100, 500, 1000}\n    var index = 0\n    for\
    \ number > 0 {\n        if number >= value[index] {\n            result += numeral[index]\n\
    \            number -= value[index]\n        } else if index > 0 && number >=\
    \ value[index] - value[index - 1] {\n            result += numeral[index - 1]\
    \ + numeral[index]\n            number -= value[index] - value[index - 1]\n  \
    \      } else {\n            index += 1\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    if number >= 1000 {\n        result += \"m\"\
    \n        number -= 1000\n    }\n    if number >= 900 {\n        result += \"\
    cm\"\n        number -= 900\n    }\n    if number >= 500 {\n        result +=\
    \ \"d\"\n        number -= 500\n    }\n    if number >= 400 {\n        result\
    \ += \"cd\"\n        number -= 400\n    }\n    if number >= 100 {\n        result\
    \ += \"c\"\n        number -= 100\n    }\n    if number >= 90 {\n        result\
    \ += \"xc\"\n        number -= 90\n    }\n    if number >= 50 {\n        result\
    \ += \"l\"\n        number -= 50\n    }\n    if number >= 40 {\n        result\
    \ += \"xl\"\n        number -= 40\n    }\n    if number >= 10 {\n        result\
    \ += \"x\"\n        number -= 10\n    }\n    if number >= 9 {\n        result\
    \ += \"ix\"\n        number -= 9\n    }\n    if number >= 5 {\n        result\
    \ += \"v\"\n        number -= 5\n    }\n    if number >= 4 {\n        result +=\
    \ \"iv\"\n        number -= 4\n    }\n    if number >= 1 {\n        result +=\
    \ \"i\"\n        number -= 1\n    }\n    return result\n}\n", "    var result\
    \ string\n    for number > 0 {\n        switch {\n        case number >= 1000:\n\
    \            result += \"m\"\n            number -= 1000\n        case number\
    \ >= 900:\n            result += \"cm\"\n            number -= 900\n        case\
    \ number >= 500:\n            result += \"d\"\n            number -= 500\n   \
    \     case number >= 400:\n            result += \"cd\"\n            number -=\
    \ 400\n        case number >= 100:\n            result += \"c\"\n            number\
    \ -= 100\n        case number >= 90:\n            result += \"xc\"\n         \
    \   number -= 90\n        case number >= 50:\n            result += \"l\"\n  \
    \          number -= 50\n        case number >= 40:\n            result += \"\
    xl\"\n            number -= 40\n        case number >= 10:\n            result\
    \ += \"x\"\n            number -= 10\n        case number >= 9:\n            result\
    \ += \"ix\"\n            number -= 9\n        case number >= 5:\n            result\
    \ += \"v\"\n            number -= 5\n        case number >= 4:\n            result\
    \ += \"iv\"\n            number -= 4\n        case number >= 1:\n            result\
    \ += \"i\"\n            number -= 1\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement\n    return \"\"\n}\n", "    // TODO: implement\n    return\
    \ \"\"\n}\n", "    var result string\n    var roman_numerals = [13]string{\"I\"\
    , \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"\
    CM\", \"M\"}\n    var arabic_numerals = [13]int{1, 4, 5, 9, 10, 40, 50, 90, 100,\
    \ 400, 500, 900, 1000}\n    for i := 12; i >= 0; i-- {\n        for number >=\
    \ arabic_numerals[i] {\n            result += roman_numerals[i]\n            number\
    \ -= arabic_numerals[i]\n        }\n    }\n    return result\n}\n", "    var roman\
    \ string\n    for number > 0 {\n        if number >= 1000 {\n            roman\
    \ += \"m\"\n            number -= 1000\n        } else if number >= 900 {\n  \
    \          roman += \"cm\"\n            number -= 900\n        } else if number\
    \ >= 500 {\n            roman += \"d\"\n            number -= 500\n        } else\
    \ if number >= 400 {\n            roman += \"cd\"\n            number -= 400\n\
    \        } else if number >= 100 {\n            roman += \"c\"\n            number\
    \ -= 100\n        } else if number >= 90 {\n            roman += \"xc\"\n    \
    \        number -= 90\n        } else if number >= 50 {\n            roman +=\
    \ \"l\"\n            number -= 50\n        } else if number >= 40 {\n        \
    \    roman += \"xl\"\n            number -= 40\n        } else if number >= 10\
    \ {\n            roman += \"x\"\n            number -= 10\n        } else if number\
    \ >= 9 {\n            roman += \"ix\"\n            number -= 9\n        } else\
    \ if number >= 5 {\n            roman += \"v\"\n            number -= 5\n    \
    \    } else if number >= 4 {\n            roman += \"iv\"\n            number\
    \ -= 4\n        } else if number >= 1 {\n            roman += \"i\"\n        \
    \    number -= 1\n        }\n    }\n    return roman\n}\n", "    var result string\n\
    \    var roman_numerals = []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"\
    m\"}\n    var roman_numerals_values = []int{1, 5, 10, 50, 100, 500, 1000}\n  \
    \  var roman_numerals_values_len = len(roman_numerals_values)\n    var roman_numerals_len\
    \ = len(roman_numerals)\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n\
    \    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n\
    \    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n\
    \    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n\
    \    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n\
    \    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n\
    \    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee\
    \ int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n  \
    \  var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn\
    \ int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n  \
    \  var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www\
    \ int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n \
    \   var b", "    // TODO: implement this function\n    return \"\"\n}\n", "  \
    \  var result string\n    var i int\n    for i = 0; i < number; i++ {\n      \
    \  result += \"i\"\n    }\n    return result\n}\n", "    var result string\n \
    \   var roman_numerals = []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var values = []int{1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i := 0; i < len(values);\
    \ i++ {\n        for number >= values[i] {\n            result += roman_numerals[i]\n\
    \            number -= values[i]\n        }\n    }\n    return result\n}\n", " \
    \   // TODO: Implement this function\n    return \"\"\n}\n", "    var result string\n\
    \    var roman_numerals = map[int]string{\n        1: \"i\",\n        4: \"iv\"\
    ,\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\"\
    ,\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400:\
    \ \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n \
    \   }\n    var keys []int\n    for k := range roman_numerals {\n        keys =\
    \ append(keys, k)\n    }\n    for i := len(keys) - 1; i >= 0; i-- {\n        for\
    \ number >= keys[i] {\n            result += roman_numerals[keys[i]]\n       \
    \     number -= keys[i]\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ implement\n    return \"\"\n}\n", "    var result string\n    for number > 0\
    \ {\n        if number >= 1000 {\n            result += \"m\"\n            number\
    \ -= 1000\n        } else if number >= 900 {\n            result += \"cm\"\n \
    \           number -= 900\n        } else if number >= 500 {\n            result\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         result += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            result += \"c\"\n            number -= 100\n        }\
    \ else if number >= 90 {\n            result += \"xc\"\n            number -=\
    \ 90\n        } else if number >= 50 {\n            result += \"l\"\n        \
    \    number -= 50\n        } else if number >= 40 {\n            result += \"\
    xl\"\n            number -= 40\n        } else if number >= 10 {\n           \
    \ result += \"x\"\n            number -= 10\n        } else if number >= 9 {\n\
    \            result += \"ix\"\n            number -= 9\n        } else if number\
    \ >= 5 {\n            result += \"v\"\n            number -= 5\n        } else\
    \ if number >= 4 {\n            result += \"iv\"\n            number -= 4\n  \
    \      } else if number >= 1 {\n            result += \"i\"\n            number\
    \ -= 1\n        }\n    }\n    return result\n}\n", "    var result string\n  \
    \  var roman_numerals = map[int]string{\n        1: \"i\",\n        5: \"v\",\n\
    \        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"\
    d\",\n        1000: \"m\",\n    }\n    var roman_numerals_order = []int{1000,\
    \ 500, 100, 50, 10, 5, 1}\n    var current_number int = number\n    for _, value\
    \ := range roman_numerals_order {\n        for current_number >= value {\n   \
    \         result += roman_numerals[value]\n            current_number -= value\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    if number\
    \ < 1 || number > 1000 {\n        return result\n    }\n    for number > 0 {\n\
    \        if number >= 1000 {\n            result += \"m\"\n            number\
    \ -= 1000\n        } else if number >= 900 {\n            result += \"cm\"\n \
    \           number -= 900\n        } else if number >= 500 {\n            result\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         result += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            result += \"c\"\n            number -= 100\n        }\
    \ else if number >= 90 {\n            result += \"xc\"\n            number -=\
    \ 90\n        } else if number >= 50 {\n            result += \"l\"\n        \
    \    number -= 50\n        } else if number >= 40 {\n            result += \"\
    xl\"\n            number -= 40\n        } else if number >= 10 {\n           \
    \ result += \"x\"\n            number -= 10\n        } else if number >= 9 {\n\
    \            result += \"ix\"\n            number -= 9\n        } else if number\
    \ >= 5 {\n            result += \"v\"\n            number -= 5\n        } else\
    \ if number >= 4 {\n            result += \"iv\"\n            number -= 4\n  \
    \      } else if number >= 1 {\n            result += \"i\"\n            number\
    \ -= 1\n        }\n    }\n    return result\n}\n", "    var result string\n  \
    \  if number >= 1000 {\n        result += \"m\"\n        number -= 1000\n    }\n\
    \    if number >= 900 {\n        result += \"cm\"\n        number -= 900\n   \
    \ }\n    if number >= 500 {\n        result += \"d\"\n        number -= 500\n\
    \    }\n    if number >= 400 {\n        result += \"cd\"\n        number -= 400\n\
    \    }\n    if number >= 100 {\n        result += \"c\"\n        number -= 100\n\
    \    }\n    if number >= 90 {\n        result += \"xc\"\n        number -= 90\n\
    \    }\n    if number >= 50 {\n        result += \"l\"\n        number -= 50\n\
    \    }\n    if number >= 40 {\n        result += \"xl\"\n        number -= 40\n\
    \    }\n    if number >= 10 {\n        result += \"x\"\n        number -= 10\n\
    \    }\n    if number >= 9 {\n        result += \"ix\"\n        number -= 9\n\
    \    }\n    if number >= 5 {\n        result += \"v\"\n        number -= 5\n \
    \   }\n    if number >= 4 {\n        result += \"iv\"\n        number -= 4\n \
    \   }\n    if number >= 1 {\n        result += \"i\"\n        number -= 1\n  \
    \  }\n    return result\n}\n", "    // TODO: implement\n    return \"\"\n}\n",
  "    // TODO: implement\n    return \"\"\n}\n", "    var roman string\n    for number\
    \ > 0 {\n        if number >= 1000 {\n            roman += \"m\"\n           \
    \ number -= 1000\n        } else if number >= 900 {\n            roman += \"cm\"\
    \n            number -= 900\n        } else if number >= 500 {\n            roman\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         roman += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            roman += \"c\"\n            number -= 100\n        } else\
    \ if number >= 90 {\n            roman += \"xc\"\n            number -= 90\n \
    \       } else if number >= 50 {\n            roman += \"l\"\n            number\
    \ -= 50\n        } else if number >= 40 {\n            roman += \"xl\"\n     \
    \       number -= 40\n        } else if number >= 10 {\n            roman += \"\
    x\"\n            number -= 10\n        } else if number >= 9 {\n            roman\
    \ += \"ix\"\n            number -= 9\n        } else if number >= 5 {\n      \
    \      roman += \"v\"\n            number -= 5\n        } else if number >= 4\
    \ {\n            roman += \"iv\"\n            number -= 4\n        } else if number\
    \ >= 1 {\n            roman += \"i\"\n            number -= 1\n        }\n   \
    \ }\n    return roman\n}\n", "    // TODO: implement\n    return \"\"\n}\n", " \
    \   roman := \"\"\n    for number > 0 {\n        if number >= 1000 {\n       \
    \     roman += \"m\"\n            number -= 1000\n        } else if number >=\
    \ 900 {\n            roman += \"cm\"\n            number -= 900\n        } else\
    \ if number >= 500 {\n            roman += \"d\"\n            number -= 500\n\
    \        } else if number >= 400 {\n            roman += \"cd\"\n            number\
    \ -= 400\n        } else if number >= 100 {\n            roman += \"c\"\n    \
    \        number -= 100\n        } else if number >= 90 {\n            roman +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     roman += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            roman += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            roman += \"x\"\n            number -= 10\n     \
    \   } else if number >= 9 {\n            roman += \"ix\"\n            number -=\
    \ 9\n        } else if number >= 5 {\n            roman += \"v\"\n           \
    \ number -= 5\n        } else if number >= 4 {\n            roman += \"iv\"\n\
    \            number -= 4\n        } else if number >= 1 {\n            roman +=\
    \ \"i\"\n            number -= 1\n        }\n    }\n    return roman\n}\n", " \
    \   // TODO: implement\n    return \"\"\n}\n", "    var result string\n    var\
    \ numeral_map = map[int]string{\n        1: \"i\",\n        5: \"v\",\n      \
    \  10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n\
    \        1000: \"m\",\n    }\n    var numeral_order = []int{1000, 500, 100, 50,\
    \ 10, 5, 1}\n    var numeral_order_len = len(numeral_order)\n    var numeral_order_index\
    \ int\n    var numeral_order_value int\n    var numeral_order_value_str string\n\
    \    var numeral_order_value_str_len int\n    var numeral_order_value_str_index\
    \ int\n    var numeral_order_value_str_value string\n    var numeral_order_value_str_value_int\
    \ int\n    var numeral_order_value_str_value_int_next int\n    var numeral_order_value_str_value_int_next_str\
    \ string\n    var numeral_order_value_str_value_int_next_str_len int\n    var\
    \ numeral_order_value_str_value_int_next_str_index int\n    var numeral_order_value_str_value_int_next_str_value\
    \ string\n    var numeral_order_value_str_value_int_next_str_value_int int\n \
    \   var numeral_order_value_str_value_int_next_str_value_int_next int\n    var\
    \ numeral_order_value_str_value_int_next_str_value_int_next_str string\n    var\
    \ numeral_order_value_str_value_int_next_str_value_int_next_str_len int\n    var\
    \ numeral_order_value_str_value_int_next_str_value_int_next_str_index int\n  \
    \  var numeral_order_value_str_value_int_next_str_value_int_next_str_value string\n\
    \    var numeral_order_value_str_value_int_next_str_value_int_next_str_value_int\
    \ int\n    var numeral", "    // TODO: implement\n    return \"\"\n}\n", "   \
    \ // TODO: implement\n    return \"\"\n}\n", "    if number < 1 || number > 1000\
    \ {\n        return \"\"\n    }\n    var result string\n    for number > 0 {\n\
    \        if number >= 1000 {\n            result += \"m\"\n            number\
    \ -= 1000\n        } else if number >= 900 {\n            result += \"cm\"\n \
    \           number -= 900\n        } else if number >= 500 {\n            result\
    \ += \"d\"\n            number -= 500\n        } else if number >= 400 {\n   \
    \         result += \"cd\"\n            number -= 400\n        } else if number\
    \ >= 100 {\n            result += \"c\"\n            number -= 100\n        }\
    \ else if number >= 90 {\n            result += \"xc\"\n            number -=\
    \ 90\n        } else if number >= 50 {\n            result += \"l\"\n        \
    \    number -= 50\n        } else if number >= 40 {\n            result += \"\
    xl\"\n            number -= 40\n        } else if number >= 10 {\n           \
    \ result += \"x\"\n            number -= 10\n        } else if number >= 9 {\n\
    \            result += \"ix\"\n            number -= 9\n        } else if number\
    \ >= 5 {\n            result += \"v\"\n            number -= 5\n        } else\
    \ if number >= 4 {\n            result += \"iv\"\n            number -= 4\n  \
    \      } else if number >= 1 {\n            result += \"i\"\n            number\
    \ -= 1\n        }\n    }\n    return result\n}\n", "    var result string\n  \
    \  for number > 0 {\n        if number >= 1000 {\n            result += \"m\"\n\
    \            number -= 1000\n        } else if number >= 900 {\n            result\
    \ += \"cm\"\n            number -= 900\n        } else if number >= 500 {\n  \
    \          result += \"d\"\n            number -= 500\n        } else if number\
    \ >= 400 {\n            result += \"cd\"\n            number -= 400\n        }\
    \ else if number >= 100 {\n            result += \"c\"\n            number -=\
    \ 100\n        } else if number >= 90 {\n            result += \"xc\"\n      \
    \      number -= 90\n        } else if number >= 50 {\n            result += \"\
    l\"\n            number -= 50\n        } else if number >= 40 {\n            result\
    \ += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n    \
    \        result += \"x\"\n            number -= 10\n        } else if number >=\
    \ 9 {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var roman_numerals = []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var decimal_numbers\
    \ = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i :=\
    \ 0; i < len(decimal_numbers); i++ {\n        for number >= decimal_numbers[i]\
    \ {\n            result += roman_numerals[i]\n            number -= decimal_numbers[i]\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement\n    return\
    \ \"\"\n}\n", "    var result string\n    var roman_numerals = []string{\"i\"\
    , \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    var roman_values = []int{1, 5,\
    \ 10, 50, 100, 500, 1000}\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n\
    \    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n\
    \    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n\
    \    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n\
    \    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n\
    \    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj\
    \ int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n  \
    \  var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss\
    \ int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n  \
    \  var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb\
    \ int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n  \
    \  var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkk",
  "    var result string\n    var roman_numerals = map[int]string{\n        1: \"\
    i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100:\
    \ \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_numerals_order\
    \ = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, numeral := range roman_numerals_order\
    \ {\n        for number >= numeral {\n            result += roman_numerals[numeral]\n\
    \            number -= numeral\n        }\n    }\n    return result\n}\n", " \
    \   // TODO: Implement me!\n    return \"\"\n}\n", "    var roman string\n   \
    \ var roman_map = map[int]string{\n        1: \"i\",\n        4: \"iv\",\n   \
    \     5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n\
    \        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"\
    cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\",\n    }\n\
    \    var roman_keys = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1}\n    for _, key := range roman_keys {\n        for number >= key {\n    \
    \        roman += roman_map[key]\n            number -= key\n        }\n    }\n\
    \    return roman\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "   \
    \ var result string\n    var roman_numerals = map[int]string{\n        1: \"i\"\
    ,\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"\
    c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var keys = []int{1000,\
    \ 500, 100, 50, 10, 5, 1}\n    var i int\n    for number > 0 {\n        if number\
    \ >= keys[i] {\n            result += roman_numerals[keys[i]]\n            number\
    \ -= keys[i]\n        } else {\n            i++\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    // TODO:\
    \ implement\n    return \"\"\n}\n", "    var result string\n    var roman_numerals\
    \ = []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"}\n    var numbers = []int{1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i := 0; i < len(numbers); i++ {\n\
    \        for number >= numbers[i] {\n            result += roman_numerals[i]\n\
    \            number -= numbers[i]\n        }\n    }\n    return result\n}\n",
  "    // TODO: Implement\n    return \"\"\n}\n", "    // TODO: implement\n    return\
    \ \"\"\n}\n", "    var result string\n    var i int\n    var roman_numerals =\
    \ []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    var roman_values\
    \ = []int{1, 5, 10, 50, 100, 500, 1000}\n    var roman_values_length = len(roman_values)\n\
    \    var roman_numerals_length = len(roman_numerals)\n    var roman_values_index\
    \ int\n    var roman_numerals_index int\n    var roman_values_index_next int\n\
    \    var roman_numerals_index_next int\n    var roman_values_index_next_next int\n\
    \    var roman_numerals_index_next_next int\n    var roman_values_index_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next int\n    var roman_values_index_next_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next_next int\n    var roman_values_index_next_next_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next_next_next int\n    var roman_values_index_next_next_next_next_next_next\
    \ int\n    var roman_numerals_index_next_next_next_next_next_next int\n    var\
    \ roman_values_index_next_next_next_next_next_next_next int\n    var roman_numerals_index_next_next_next_next_next_next_next\
    \ int\n    var roman_values_index_next_next_next_next_next_next_next_next int\n\
    \    var roman_numerals_index_next_next_next_next_next_next_next_next int\n  \
    \  var roman_values_index_next_next_next_next_next_next_next_next_next int\n \
    \   var roman_numerals_index_next_next_next_next_next_next_next_next_next int\n\
    \    var roman_values_", "    var result string\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n\
    \        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\"\
    ,\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900:\
    \ \"cm\",\n        1000: \"m\",\n    }\n    var keys []int\n    for k := range\
    \ roman_map {\n        keys = append(keys, k)\n    }\n    for i := len(keys) -\
    \ 1; i >= 0; i-- {\n        for number >= keys[i] {\n            result += roman_map[keys[i]]\n\
    \            number -= keys[i]\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var numeral = []string{\"i\", \"v\", \"x\", \"l\",\
    \ \"c\", \"d\", \"m\"}\n    var numeral_values = []int{1, 5, 10, 50, 100, 500,\
    \ 1000}\n    var numeral_index int\n    var numeral_value int\n    var numeral_count\
    \ int\n    var numeral_next_value int\n    var numeral_next_count int\n    var\
    \ numeral_next_index int\n    var numeral_next_next_value int\n    var numeral_next_next_count\
    \ int\n    var numeral_next_next_index int\n    var numeral_next_next_next_value\
    \ int\n    var numeral_next_next_next_count int\n    var numeral_next_next_next_index\
    \ int\n    var numeral_next_next_next_next_value int\n    var numeral_next_next_next_next_count\
    \ int\n    var numeral_next_next_next_next_index int\n    var numeral_next_next_next_next_next_value\
    \ int\n    var numeral_next_next_next_next_next_count int\n    var numeral_next_next_next_next_next_index\
    \ int\n    var numeral_next_next_next_next_next_next_value int\n    var numeral_next_next_next_next_next_next_count\
    \ int\n    var numeral_next_next_next_next_next_next_index int\n    var numeral_next_next_next_next_next_next_next_value\
    \ int\n    var numeral_next_next_next_next_next_next_next_count int\n    var numeral_next_next_next_next_next_next_next_index\
    \ int\n    var numeral_next_next_next_next_next_next_next_next_value int\n   \
    \ var numeral_next_next_next_next_next_next_next_next_count int\n    var numeral_next_next_next_next_next_next_next_next_index\
    \ int\n    var numeral_next_next_next_next_next_next_next_next", "    // TODO:\
    \ Implement the function\n    return \"\"\n}\n", "    var result string\n    if\
    \ number < 1 || number > 1000 {\n        return \"invalid number\"\n    }\n  \
    \  for number > 0 {\n        if number >= 1000 {\n            result += \"m\"\n\
    \            number -= 1000\n        } else if number >= 900 {\n            result\
    \ += \"cm\"\n            number -= 900\n        } else if number >= 500 {\n  \
    \          result += \"d\"\n            number -= 500\n        } else if number\
    \ >= 400 {\n            result += \"cd\"\n            number -= 400\n        }\
    \ else if number >= 100 {\n            result += \"c\"\n            number -=\
    \ 100\n        } else if number >= 90 {\n            result += \"xc\"\n      \
    \      number -= 90\n        } else if number >= 50 {\n            result += \"\
    l\"\n            number -= 50\n        } else if number >= 40 {\n            result\
    \ += \"xl\"\n            number -= 40\n        } else if number >= 10 {\n    \
    \        result += \"x\"\n            number -= 10\n        } else if number >=\
    \ 9 {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    var roman string\n\
    \    var numeral = []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n\
    \    var i = 0\n    for number > 0 {\n        var digit = number % 10\n      \
    \  if digit == 9 {\n            roman = numeral[i] + numeral[i+2] + roman\n  \
    \      } else if digit == 4 {\n            roman = numeral[i] + numeral[i+1] +\
    \ roman\n        } else {\n            if digit >= 5 {\n                roman\
    \ = numeral[i+1] + roman\n                digit -= 5\n            }\n        \
    \    for ; digit > 0; digit-- {\n                roman = numeral[i] + roman\n\
    \            }\n        }\n        number /= 10\n        i += 2\n    }\n    return\
    \ roman\n}\n", "    var roman string\n    for number > 0 {\n        switch {\n\
    \        case number >= 1000:\n            roman += \"m\"\n            number\
    \ -= 1000\n        case number >= 900:\n            roman += \"cm\"\n        \
    \    number -= 900\n        case number >= 500:\n            roman += \"d\"\n\
    \            number -= 500\n        case number >= 400:\n            roman +=\
    \ \"cd\"\n            number -= 400\n        case number >= 100:\n           \
    \ roman += \"c\"\n            number -= 100\n        case number >= 90:\n    \
    \        roman += \"xc\"\n            number -= 90\n        case number >= 50:\n\
    \            roman += \"l\"\n            number -= 50\n        case number >=\
    \ 40:\n            roman += \"xl\"\n            number -= 40\n        case number\
    \ >= 10:\n            roman += \"x\"\n            number -= 10\n        case number\
    \ >= 9:\n            roman += \"ix\"\n            number -= 9\n        case number\
    \ >= 5:\n            roman += \"v\"\n            number -= 5\n        case number\
    \ >= 4:\n            roman += \"iv\"\n            number -= 4\n        case number\
    \ >= 1:\n            roman += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return roman\n}\n", "    var result string\n    for number > 0 {\n      \
    \  if number >= 1000 {\n            result += \"m\"\n            number -= 1000\n\
    \        } else if number >= 900 {\n            result += \"cm\"\n           \
    \ number -= 900\n        } else if number >= 500 {\n            result += \"d\"\
    \n            number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var numeral_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ numeral_values = []int{1000, 500, 100, 50, 10, 5, 1}\n    var numeral_index\
    \ = 0\n    var numeral_value = numeral_values[numeral_index]\n    var numeral_string\
    \ = numeral_map[numeral_value]\n    var numeral_count = 0\n    for number > 0\
    \ {\n        if number >= numeral_value {\n            number -= numeral_value\n\
    \            numeral_count++\n        } else {\n            if numeral_count >\
    \ 0 {\n                result += numeral_string\n                numeral_count--\n\
    \            }\n            numeral_index++\n            numeral_value = numeral_values[numeral_index]\n\
    \            numeral_string = numeral_map[numeral_value]\n        }\n    }\n \
    \   for numeral_count > 0 {\n        result += numeral_string\n        numeral_count--\n\
    \    }\n    return result\n}\n", "    // TODO - Add your code here\n    return\
    \ \"\"\n}\n", "    var result string\n    for number > 0 {\n        if number\
    \ >= 1000 {\n            result += \"m\"\n            number -= 1000\n       \
    \ } else if number >= 900 {\n            result += \"cm\"\n            number\
    \ -= 900\n        } else if number >= 500 {\n            result += \"d\"\n   \
    \         number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "  \
    \  var result string\n    var roman_numerals = map[int]string{\n        1: \"\
    i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100:\
    \ \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_numerals_order\
    \ = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, numeral := range roman_numerals_order\
    \ {\n        for number >= numeral {\n            result += roman_numerals[numeral]\n\
    \            number -= numeral\n        }\n    }\n    return result\n}\n", " \
    \   // TODO: implement this function\n    return \"\"\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    // TODO: implement\n    return \"\"\n}\n", "    var\
    \ roman string\n    for number > 0 {\n        if number >= 1000 {\n          \
    \  roman += \"m\"\n            number -= 1000\n        } else if number >= 900\
    \ {\n            roman += \"cm\"\n            number -= 900\n        } else if\
    \ number >= 500 {\n            roman += \"d\"\n            number -= 500\n   \
    \     } else if number >= 400 {\n            roman += \"cd\"\n            number\
    \ -= 400\n        } else if number >= 100 {\n            roman += \"c\"\n    \
    \        number -= 100\n        } else if number >= 90 {\n            roman +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     roman += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            roman += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            roman += \"x\"\n            number -= 10\n     \
    \   } else if number >= 9 {\n            roman += \"ix\"\n            number -=\
    \ 9\n        } else if number >= 5 {\n            roman += \"v\"\n           \
    \ number -= 5\n        } else if number >= 4 {\n            roman += \"iv\"\n\
    \            number -= 4\n        } else if number >= 1 {\n            roman +=\
    \ \"i\"\n            number -= 1\n        }\n    }\n    return roman\n}\n", " \
    \   // TODO: implement\n    return \"\"\n}\n", "    var result string\n    var\
    \ remainder int\n    var numeral string\n    var numeral_value int\n\n    // 1000\n\
    \    numeral = \"m\"\n    numeral_value = 1000\n    remainder = number % numeral_value\n\
    \    result += numeral_value_to_string(numeral, number, numeral_value)\n\n   \
    \ // 500\n    numeral = \"d\"\n    numeral_value = 500\n    remainder = number\
    \ % numeral_value\n    result += numeral_value_to_string(numeral, number, numeral_value)\n\
    \n    // 100\n    numeral = \"c\"\n    numeral_value = 100\n    remainder = number\
    \ % numeral_value\n    result += numeral_value_to_string(numeral, number, numeral_value)\n\
    \n    // 50\n    numeral = \"l\"\n    numeral_value = 50\n    remainder = number\
    \ % numeral_value\n    result += numeral_value_to_string(numeral, number, numeral_value)\n\
    \n    // 10\n    numeral = \"x\"\n    numeral_value = 10\n    remainder = number\
    \ % numeral_value\n    result += numeral_value_to_string(numeral, number, numeral_value)\n\
    \n    // 5\n    numeral = \"v\"\n    numeral_value = 5\n    remainder = number\
    \ % numeral_value\n    result += numeral_value_to_string(numeral, number, numeral_value)\n\
    \n    // 1\n    numeral = \"i\"\n    numeral_value = 1\n    remainder = number\
    \ % numeral_value\n    result += numeral_value_to_string(numeral, number, numeral_value)\n\
    \n    return result\n}\n", "    var result string\n    for number > 0 {\n    \
    \    if number >= 1000 {\n            result += \"m\"\n            number -= 1000\n\
    \        } else if number >= 900 {\n            result += \"cm\"\n           \
    \ number -= 900\n        } else if number >= 500 {\n            result += \"d\"\
    \n            number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ roman_map_keys = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, key := range\
    \ roman_map_keys {\n        for number >= key {\n            result += roman_map[key]\n\
    \            number -= key\n        }\n    }\n    return result\n}\n", "    //\
    \ TODO: implement\n    return \"\"\n}\n", "    var result string\n    for number\
    \ > 0 {\n        if number >= 1000 {\n            result += \"m\"\n          \
    \  number -= 1000\n        } else if number >= 900 {\n            result += \"\
    cm\"\n            number -= 900\n        } else if number >= 500 {\n         \
    \   result += \"d\"\n            number -= 500\n        } else if number >= 400\
    \ {\n            result += \"cd\"\n            number -= 400\n        } else if\
    \ number >= 100 {\n            result += \"c\"\n            number -= 100\n  \
    \      } else if number >= 90 {\n            result += \"xc\"\n            number\
    \ -= 90\n        } else if number >= 50 {\n            result += \"l\"\n     \
    \       number -= 50\n        } else if number >= 40 {\n            result +=\
    \ \"xl\"\n            number -= 40\n        } else if number >= 10 {\n       \
    \     result += \"x\"\n            number -= 10\n        } else if number >= 9\
    \ {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var i int\n    var roman_numerals = []string{\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var\
    \ values = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n\n   \
    \ for i = 0; i < len(values); i++ {\n        for number >= values[i] {\n     \
    \       number -= values[i]\n            result += roman_numerals[i]\n       \
    \ }\n    }\n\n    return result\n}\n", "    var result string\n    for number\
    \ > 0 {\n        if number >= 1000 {\n            result += \"m\"\n          \
    \  number -= 1000\n        } else if number >= 900 {\n            result += \"\
    cm\"\n            number -= 900\n        } else if number >= 500 {\n         \
    \   result += \"d\"\n            number -= 500\n        } else if number >= 400\
    \ {\n            result += \"cd\"\n            number -= 400\n        } else if\
    \ number >= 100 {\n            result += \"c\"\n            number -= 100\n  \
    \      } else if number >= 90 {\n            result += \"xc\"\n            number\
    \ -= 90\n        } else if number >= 50 {\n            result += \"l\"\n     \
    \       number -= 50\n        } else if number >= 40 {\n            result +=\
    \ \"xl\"\n            number -= 40\n        } else if number >= 10 {\n       \
    \     result += \"x\"\n            number -= 10\n        } else if number >= 9\
    \ {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return \"\"\n}\n", "    if number < 1 || number > 1000 {\n        return\
    \ \"\"\n    }\n    var result string\n    var i int\n    for i = 0; i < number\
    \ / 1000; i++ {\n        result += \"m\"\n    }\n    number %= 1000\n    if number\
    \ >= 900 {\n        result += \"cm\"\n        number -= 900\n    }\n    if number\
    \ >= 500 {\n        result += \"d\"\n        number -= 500\n    }\n    if number\
    \ >= 400 {\n        result += \"cd\"\n        number -= 400\n    }\n    for i\
    \ = 0; i < number / 100; i++ {\n        result += \"c\"\n    }\n    number %=\
    \ 100\n    if number >= 90 {\n        result += \"xc\"\n        number -= 90\n\
    \    }\n    if number >= 50 {\n        result += \"l\"\n        number -= 50\n\
    \    }\n    if number >= 40 {\n        result += \"xl\"\n        number -= 40\n\
    \    }\n    for i = 0; i < number / 10; i++ {\n        result += \"x\"\n    }\n\
    \    number %= 10\n    if number >= 9 {\n        result += \"ix\"\n        number\
    \ -= 9\n    }\n    if number >= 5 {\n        result += \"v\"\n        number -=\
    \ 5\n    }\n    if number >= 4 {\n        result += \"iv\"\n        number -=\
    \ 4\n    }\n    for i = 0; i < number; i++ {\n        result += \"i\"\n    }\n\
    \    return result\n}\n", "    var result string\n    var roman_numerals = []string{\"\
    i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n    var roman_numerals_values\
    \ = []int{1, 5, 10, 50, 100, 500, 1000}\n    var roman_numerals_values_len = len(roman_numerals_values)\n\
    \    var roman_numerals_len = len(roman_numerals)\n    var roman_numerals_index\
    \ int\n    var roman_numerals_value int\n    var roman_numerals_value_next int\n\
    \    var roman_numerals_value_next_next int\n    var roman_numerals_value_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next int\n    var roman_numerals_value_next_next_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next_next_next int\n    var\
    \ roman_numerals_value_next_next_next_next_next_next_next int\n    var roman_numerals_value_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ int\n    var roman_numerals_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next",
  "    var result string\n    var remainder int\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n\n   \
    \ if number == 0 {\n        return \"\"\n    }\n\n    // find the largest roman\
    \ numeral that is smaller than the number\n    for k, _ := range roman_map {\n\
    \        if k <= number {\n            remainder = number - k\n            result\
    \ = roman_map[k]\n        }\n    }\n\n    // recursively add the remaining roman\
    \ numerals\n    return result + int_to_mini_roman(remainder)\n}\n", "    var result\
    \ string\n    var roman_numerals = []string{\"i\", \"v\", \"x\", \"l\", \"c\"\
    , \"d\", \"m\"}\n    var roman_numerals_map = map[int]string{\n        1: \"i\"\
    ,\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"\
    c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var roman_numerals_map_reverse\
    \ = map[string]int{\n        \"i\": 1,\n        \"v\": 5,\n        \"x\": 10,\n\
    \        \"l\": 50,\n        \"c\": 100,\n        \"d\": 500,\n        \"m\":\
    \ 1000,\n    }\n    var roman_numerals_map_subtraction = map[string]string{\n\
    \        \"i\": \"vx\",\n        \"x\": \"lc\",\n        \"c\": \"dm\",\n    }\n\
    \    var roman_numerals_map_subtraction_reverse = map[string]string{\n       \
    \ \"vx\": \"i\",\n        \"lc\": \"x\",\n        \"dm\": \"c\",\n    }\n    var\
    \ roman_numerals_map_subtraction_value = map[string]int{\n        \"vx\": 4,\n\
    \        \"lc\": 40,\n        \"dm\": 400,\n    }\n    var roman_numerals_map_subtraction_value_reverse\
    \ = map[int]string{\n        4: \"vx\",\n        40: \"lc\",\n        400: \"\
    dm\",\n    }\n    var roman_numerals_map_subtraction_value_reverse_value = map[int]int{\n\
    \        4: 1,\n        40: 10,\n        400: 100,\n    }\n    var roman_numerals_map_subtraction_value_reverse_value_reverse\
    \ = map[int]int{\n        1: 4,\n        10: 40,\n        100: 400,\n    }\n \
    \   var roman_numerals_map_subtraction_value_reverse_value_reverse_value = map[int]",
  "    var result string\n    var i int\n    var roman_numerals = []string{\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"}\n    var values = []int{1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1}\n\n    for i = 0; i < len(values); i++ {\n        for number >=\
    \ values[i] {\n            number -= values[i]\n            result += roman_numerals[i]\n\
    \        }\n    }\n\n    return result\n}\n", "    var result string\n    var\
    \ roman_numerals = []string{\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"}\n\
    \    var roman_values = []int{1, 5, 10, 50, 100, 500, 1000}\n    var roman_values_len\
    \ = len(roman_values)\n    var roman_numerals_len = len(roman_numerals)\n    var\
    \ i, j, k, l, m, n, o int\n    var roman_numeral string\n    var roman_value int\n\
    \    var roman_value_next int\n    var roman_value_next_next int\n    var roman_numeral_next\
    \ string\n    var roman_numeral_next_next string\n    var roman_numeral_next_next_next\
    \ string\n    var roman_numeral_next_next_next_next string\n    var roman_numeral_next_next_next_next_next\
    \ string\n    var roman_numeral_next_next_next_next_next_next string\n    var\
    \ roman_numeral_next_next_next_next_next_next_next string\n    var roman_numeral_next_next_next_next_next_next_next_next\
    \ string\n    var roman_numeral_next_next_next_next_next_next_next_next_next string\n\
    \    var roman_numeral_next_next_next_next_next_next_next_next_next_next string\n\
    \    var roman_numeral_next_next_next_next_next_next_next_next_next_next_next\
    \ string\n    var roman_numeral_next_next_next_next_next_next_next_next_next_next_next_next\
    \ string\n    var roman_numeral_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ string\n    var roman_numeral_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ string\n    var roman_numeral_next_next_next_next_next_next_", "    result :=\
    \ \"\"\n    if number >= 1000 {\n        result += \"m\"\n        number -= 1000\n\
    \    }\n    if number >= 900 {\n        result += \"cm\"\n        number -= 900\n\
    \    }\n    if number >= 500 {\n        result += \"d\"\n        number -= 500\n\
    \    }\n    if number >= 400 {\n        result += \"cd\"\n        number -= 400\n\
    \    }\n    if number >= 100 {\n        result += \"c\"\n        number -= 100\n\
    \    }\n    if number >= 90 {\n        result += \"xc\"\n        number -= 90\n\
    \    }\n    if number >= 50 {\n        result += \"l\"\n        number -= 50\n\
    \    }\n    if number >= 40 {\n        result += \"xl\"\n        number -= 40\n\
    \    }\n    if number >= 10 {\n        result += \"x\"\n        number -= 10\n\
    \    }\n    if number >= 9 {\n        result += \"ix\"\n        number -= 9\n\
    \    }\n    if number >= 5 {\n        result += \"v\"\n        number -= 5\n \
    \   }\n    if number >= 4 {\n        result += \"iv\"\n        number -= 4\n \
    \   }\n    if number >= 1 {\n        result += \"i\"\n        number -= 1\n  \
    \  }\n    return result\n}\n", "    var result string\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ numbers = []int{1000, 500, 100, 50, 10, 5, 1}\n    for _, n := range numbers\
    \ {\n        for number >= n {\n            result += roman_map[n]\n         \
    \   number -= n\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var i int\n    for i = 1; i <= number; i++ {\n        if i == 1 {\n     \
    \       result += \"i\"\n        } else if i == 5 {\n            result += \"\
    v\"\n        } else if i == 10 {\n            result += \"x\"\n        } else\
    \ if i == 50 {\n            result += \"l\"\n        } else if i == 100 {\n  \
    \          result += \"c\"\n        } else if i == 500 {\n            result +=\
    \ \"d\"\n        } else if i == 1000 {\n            result += \"m\"\n        }\
    \ else if i == 4 {\n            result = result[:len(result)-1] + \"iv\"\n   \
    \     } else if i == 9 {\n            result = result[:len(result)-1] + \"ix\"\
    \n        } else if i == 40 {\n            result = result[:len(result)-1] + \"\
    xl\"\n        } else if i == 90 {\n            result = result[:len(result)-1]\
    \ + \"xc\"\n        } else if i == 400 {\n            result = result[:len(result)-1]\
    \ + \"cd\"\n        } else if i == 900 {\n            result = result[:len(result)-1]\
    \ + \"cm\"\n        } else if i > 1000 {\n            return \"invalid number\"\
    \n        } else if i > 500 {\n            result += \"d\"\n            i = i\
    \ - 500\n        } else if i > 100 {\n            result += \"c\"\n          \
    \  i = i - 100\n        } else if i > 50 {\n            result += \"l\"\n    \
    \        i = i - 50\n        } else if i > 10 {\n            result += \"x\"\n\
    \            i = i - 10\n        } else if i > 5 {\n            result += \"v\"\
    \n            i = i - 5\n        } else if i > 1 {\n            result += \"i\"\
    \n            i = i - 1\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var i int\n    var digit int\n    var roman_map = map[int]string{\n\
    \        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n\
    \        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n    var\
    \ roman_map_5 = map[int]string{\n        1: \"iv\",\n        10: \"xl\",\n   \
    \     100: \"cd\",\n    }\n    var roman_map_10 = map[int]string{\n        1:\
    \ \"ix\",\n        10: \"xc\",\n        100: \"cm\",\n    }\n    var roman_map_50\
    \ = map[int]string{\n        1: \"il\",\n        10: \"xv\",\n        100: \"\
    cl\",\n    }\n    var roman_map_100 = map[int]string{\n        1: \"id\",\n  \
    \      10: \"xc\",\n        100: \"cd\",\n    }\n    var roman_map_500 = map[int]string{\n\
    \        1: \"im\",\n        10: \"xm\",\n        100: \"cm\",\n    }\n    var\
    \ roman_map_1000 = map[int]string{\n        1: \"im\",\n        10: \"xm\",\n\
    \        100: \"cm\",\n    }\n    var roman_map_list = []map[int]string{\n   \
    \     roman_map,\n        roman_map_5,\n        roman_map_10,\n        roman_map_50,\n\
    \        roman_map_100,\n        roman_map_500,\n        roman_map_1000,\n   \
    \ }\n    var roman_map_list_len = len(roman_map_list)\n    var roman_map_list_index\
    \ int\n    var roman_map_list_index_max int\n    var roman_map_list_index_min\
    \ int\n    var roman_map_list_index_min_max int\n    var roman_map_list_index_max_min\
    \ int\n    var roman_map_list_index_min_", "    // Convert number to string\n\
    \    // Split string into array of characters\n    // Convert each character to\
    \ int\n    // Convert each int to roman numeral\n    // Join array of roman numerals\n\
    \    // Return string\n    return \"\"\n}\n", "    // TODO: implement this function\n\
    \    return \"\"\n}\n", "    var result string\n    for number > 0 {\n       \
    \ if number >= 1000 {\n            result += \"m\"\n            number -= 1000\n\
    \        } else if number >= 900 {\n            result += \"cm\"\n           \
    \ number -= 900\n        } else if number >= 500 {\n            result += \"d\"\
    \n            number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    result := \"\"\n    for number > 0 {\n        if\
    \ number >= 1000 {\n            result += \"m\"\n            number -= 1000\n\
    \        } else if number >= 900 {\n            result += \"cm\"\n           \
    \ number -= 900\n        } else if number >= 500 {\n            result += \"d\"\
    \n            number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
