name: HumanEval_156_int_to_mini_roman
language: go_test.go
prompt: "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  func int_to_mini_roman(number int) string {\n"
tests: "func TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     {\
  \ actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251),\
  \ expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n\
  \     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1),\
  \ expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual:\
  \ candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected:\
  \ \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual:\
  \ candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected:\
  \ \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual:\
  \ candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
