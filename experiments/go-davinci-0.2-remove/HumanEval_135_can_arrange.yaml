name: HumanEval_135_can_arrange
language: go_test.go
prompt: "package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Create a function which returns the largest index of an element which\n// is\
  \ not greater than or equal to the element immediately preceding it. If\n// no such\
  \ element exists then return -1. The given array will not contain\n// duplicate\
  \ values.\n// Examples:\nfunc can_arrange(arr []int) int {\n"
tests: "func TestCan_Arrange(t *testing.T) {\n  candidate := can_arrange\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 2, 4, 3, 5}), expected: 3 },\n    \
  \ { actual: candidate([]int{1, 2, 4, 5}), expected: -1 },\n     { actual: candidate([]int{1,\
  \ 4, 2, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{4, 8,\
  \ 5, 7, 3}), expected: 4 },\n     { actual: candidate([]int{}), expected: -1 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
