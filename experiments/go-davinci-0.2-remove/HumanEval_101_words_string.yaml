name: HumanEval_101_words_string
language: go_test.go
prompt: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You will be given a string of words separated by commas or spaces. Your task\
  \ is\n// to split the string into words and return an array of the words.\n// For\
  \ example:\nfunc words_string(s string) []string {\n"
tests: "func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
  Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
  \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
  four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
  \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three,\
  \ four, five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\"\
  , \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
  \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\",\
  \ \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    // your code\
    \ here\n    return []string{}\n}\n", "    var words []string\n    for _, word\
    \ := range s {\n        if word == ' ' || word == ',' {\n            continue\n\
    \        }\n        words = append(words, string(word))\n    }\n    return words\n\
    }\n", "    var words []string\n    for _, word := range s {\n        if word ==\
    \ ' ' || word == ',' {\n            continue\n        }\n        words = append(words,\
    \ string(word))\n    }\n    return words\n}\n", "    var words []string\n    var\
    \ word string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n\
    \            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    for _, char := range s {\n        if char == ' ' || char == ','\
    \ {\n            if len(word) > 0 {\n                result = append(result, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(char)\n        }\n    }\n    if len(word) > 0 {\n        result =\
    \ append(result, word)\n    }\n    return result\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                result = append(result, word)\n  \
    \              word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' || c == ',' {\n            words = append(words, word)\n            word =\
    \ \"\"\n        } else {\n            word += string(c)\n        }\n    }\n  \
    \  words = append(words, word)\n    return words\n}\n", "    return nil\n}\n",
  "    var result []string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' || char == ',' {\n            if len(word) > 0 {\n     \
    \           result = append(result, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(char)\n        }\n   \
    \ }\n    if len(word) > 0 {\n        result = append(result, word)\n    }\n  \
    \  return result\n}\n", "    var words []string\n    for _, word := range s {\n\
    \        if word == ' ' || word == ',' {\n            continue\n        }\n  \
    \      words = append(words, string(word))\n    }\n    return words\n}\n", " \
    \   var words []string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' || c == ',' {\n            if len(word) > 0 {\n              \
    \  words = append(words, word)\n                word = \"\"\n            }\n \
    \       } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    var words []string\n    var word string\n    for _,\
    \ c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    var words []string\n    var word string\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    var words []string\n    var word string\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    return words\n}\n", " \
    \   var words []string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' || c == ',' {\n            if len(word) > 0 {\n              \
    \  words = append(words, word)\n                word = \"\"\n            }\n \
    \       } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    var words []string\n    var word string\n    for _,\
    \ c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    var words []string\n    var word string\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    return nil\n}\n", "    var words []string\n    var\
    \ word string\n    for _, char := range s {\n        if char == ' ' || char ==\
    \ ',' {\n            if word != \"\" {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(char)\n        }\n    }\n    if word != \"\" {\n       \
    \ words = append(words, word)\n    }\n    return words\n}\n", "    return nil\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    return nil\n}\n", "    var words []string\n    var word string\n  \
    \  for _, c := range s {\n        if c == ' ' || c == ',' {\n            words\
    \ = append(words, word)\n            word = \"\"\n        } else {\n         \
    \   word += string(c)\n        }\n    }\n    if word != \"\" {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    for _, word\
    \ := range s {\n        if word == ' ' || word == ',' {\n            continue\n\
    \        }\n        words = append(words, string(word))\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    return words\n}\n", "  \
    \  return nil\n}\n", "    var words []string\n    var word string\n    var in_word\
    \ bool\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n       \
    \     if in_word {\n                words = append(words, word)\n            \
    \    word = \"\"\n                in_word = false\n            }\n        } else\
    \ {\n            word += string(c)\n            in_word = true\n        }\n  \
    \  }\n    if in_word {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' || c == ',' {\n            if\
    \ len(word) > 0 {\n                words = append(words, word)\n             \
    \   word = \"\"\n            }\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", " \
    \   return nil\n}\n", "    var words []string\n    var word string\n    for _,\
    \ c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    var words []string\n    var word string\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    words := make([]string, 0)\n    word\
    \ := \"\"\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n    \
    \        if word != \"\" {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if word != \"\" {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                result = append(result, word)\n  \
    \              word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    for _, word\
    \ := range s {\n        if word == ' ' || word == ',' {\n            continue\n\
    \        }\n        words = append(words, string(word))\n    }\n    return words\n\
    }\n", "    return nil\n}\n", "    var words []string\n    for _, word := range\
    \ s {\n        if word == ' ' || word == ',' {\n            words = append(words,\
    \ \"\")\n        } else {\n            words[len(words)-1] += string(word)\n \
    \       }\n    }\n    return words\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    var word string\n    for _, char := range s {\n        if char\
    \ == ' ' || char == ',' {\n            words = append(words, word)\n         \
    \   word = \"\"\n        } else {\n            word += string(char)\n        }\n\
    \    }\n    words = append(words, word)\n    return words\n}\n", "    return nil\n\
    }\n", "    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       result = append(result, word)\n                word = \"\"\n         \
    \   }\n        } else {\n            word += string(c)\n        }\n    }\n   \
    \ if len(word) > 0 {\n        result = append(result, word)\n    }\n    return\
    \ result\n}\n", "    return nil\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' || c == ',' {\n            if\
    \ len(word) > 0 {\n                words = append(words, word)\n             \
    \   word = \"\"\n            }\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    for _, word := range\
    \ s {\n        if word == ' ' || word == ',' {\n            continue\n       \
    \ }\n        words = append(words, string(word))\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' || c == ',' {\n            if len(word) > 0 {\n               \
    \ words = append(words, word)\n                word = \"\"\n            }\n  \
    \      } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    var words []string\n    var word string\n    for _,\
    \ c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    return nil\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            words = append(words, word)\n            word = \"\"\n      \
    \  } else {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    return words\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' || c == ',' {\n            if len(word) > 0 {\n               \
    \ words = append(words, word)\n                word = \"\"\n            }\n  \
    \      } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   var words []string\n    for _, word := range s {\n        if word == ' ' ||\
    \ word == ',' {\n            words = append(words, \"\")\n        } else {\n \
    \           words[len(words)-1] += string(word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    return words\n}\n", "  \
    \  var result []string\n    for _, word := range s {\n        if word == ' ' ||\
    \ word == ',' {\n            continue\n        }\n        result = append(result,\
    \ string(word))\n    }\n    return result\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    // Write your code here\n    return nil\n}\n", "    // your\
    \ code here\n    return nil\n}\n", "    var words []string\n    word := \"\"\n\
    \    for _, c := range s {\n        if c == ' ' || c == ',' {\n            if\
    \ word != \"\" {\n                words = append(words, word)\n              \
    \  word = \"\"\n            }\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    if word != \"\" {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    word := \"\"\n  \
    \  for _, c := range s {\n        if c == ' ' || c == ',' {\n            if word\
    \ != \"\" {\n                words = append(words, word)\n                word\
    \ = \"\"\n            }\n        } else {\n            word += string(c)\n   \
    \     }\n    }\n    if word != \"\" {\n        words = append(words, word)\n \
    \   }\n    return words\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    for _, word := range s {\n        if word == ' ' || word == ',' {\n     \
    \       continue\n        }\n        words = append(words, string(word))\n   \
    \ }\n    return words\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' || c == ',' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var words []string\n    for _, word := range s {\n\
    \        if word == ' ' || word == ',' {\n            continue\n        }\n  \
    \      words = append(words, string(word))\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    // your code here\n    return nil\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' || c == ',' {\n            if\
    \ len(word) > 0 {\n                words = append(words, word)\n             \
    \   word = \"\"\n            }\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' || c == ',' {\n            words = append(words, word)\n      \
    \      word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    return words\n}\n", "    var result\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' || c == ',' {\n            if len(word) > 0 {\n                result = append(result,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        result\
    \ = append(result, word)\n    }\n    return result\n}\n", "    var words []string\n\
    \    for _, word := range s {\n        if word == ' ' || word == ',' {\n     \
    \       continue\n        }\n        words = append(words, string(word))\n   \
    \ }\n    return words\n}\n", "    var words []string\n    var word string\n  \
    \  for _, c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    return nil\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var result []string\n    var word string\n    for _, c :=\
    \ range s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n\
    \                result = append(result, word)\n                word = \"\"\n\
    \            }\n        } else {\n            word += string(c)\n        }\n \
    \   }\n    if len(word) > 0 {\n        result = append(result, word)\n    }\n\
    \    return result\n}\n", "    return nil\n}\n", "    var words []string\n   \
    \ var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    // your code here\n    return nil\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    return nil\n}\n", "    var words []string\n    var word string\n  \
    \  var inWord bool\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if inWord {\n                words = append(words, word)\n  \
    \              word = \"\"\n                inWord = false\n            }\n  \
    \      } else {\n            word += string(c)\n            inWord = true\n  \
    \      }\n    }\n    if inWord {\n        words = append(words, word)\n    }\n\
    \    return words\n}\n", "    var words []string\n    var word string\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    var words []string\n    for _, word := range s {\n\
    \        if word == ' ' || word == ',' {\n            continue\n        }\n  \
    \      words = append(words, string(word))\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    var words []string\n    var word string\n    for _,\
    \ c := range s {\n        if c == ' ' || c == ',' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    return nil\n}\n", "    // your code here\n    return\
    \ []string{}\n}\n", "    var words []string\n    var word string\n    for _, c\
    \ := range s {\n        if c == ' ' || c == ',' {\n            if len(word) >\
    \ 0 {\n                words = append(words, word)\n                word = \"\"\
    \n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    return nil\n}\n", "    var words []string\n    word\
    \ := \"\"\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n    \
    \        if word != \"\" {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if word != \"\" {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                result = append(result, word)\n  \
    \              word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    var result\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' || c == ',' {\n            if len(word) > 0 {\n                result = append(result,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        result\
    \ = append(result, word)\n    }\n    return result\n}\n", "    return nil\n}\n",
  "    var words []string\n    var word string\n    var inWord bool\n    for _, c\
    \ := range s {\n        if c == ' ' || c == ',' {\n            if inWord {\n \
    \               words = append(words, word)\n                word = \"\"\n   \
    \             inWord = false\n            }\n        } else {\n            word\
    \ += string(c)\n            inWord = true\n        }\n    }\n    if inWord {\n\
    \        words = append(words, word)\n    }\n    return words\n}\n", "    var\
    \ words []string\n    var word string\n    for _, c := range s {\n        if c\
    \ == ' ' || c == ',' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    return words\n}\n", "    return nil\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' || c == ',' {\n            if len(word) > 0 {\n               \
    \ words = append(words, word)\n                word = \"\"\n            }\n  \
    \      } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    for _, word := range s {\n        if word == ' ' || word == ','\
    \ {\n            continue\n        }\n        words = append(words, string(word))\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' || c == ',' {\n            if len(word) > 0 {\n               \
    \ words = append(words, word)\n                word = \"\"\n            }\n  \
    \      } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   var result []string\n    var word string\n    for _, ch := range s {\n   \
    \     if ch == ' ' || ch == ',' {\n            if len(word) > 0 {\n          \
    \      result = append(result, word)\n                word = \"\"\n          \
    \  }\n        } else {\n            word += string(ch)\n        }\n    }\n   \
    \ if len(word) > 0 {\n        result = append(result, word)\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var word string\n    for _, c :=\
    \ range s {\n        if c == ' ' || c == ',' {\n            if len(word) > 0 {\n\
    \                result = append(result, word)\n                word = \"\"\n\
    \            }\n        } else {\n            word += string(c)\n        }\n \
    \   }\n    if len(word) > 0 {\n        result = append(result, word)\n    }\n\
    \    return result\n}\n", "    var words []string\n    for _, word := range s\
    \ {\n        if word == ' ' || word == ',' {\n            continue\n        }\n\
    \        words = append(words, string(word))\n    }\n    return words\n}\n", " \
    \   var words []string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' || c == ',' {\n            if len(word) > 0 {\n              \
    \  words = append(words, word)\n                word = \"\"\n            }\n \
    \       } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   var words []string\n    var word string\n    var word_start bool\n    for\
    \ _, c := range s {\n        if c == ' ' || c == ',' {\n            if word_start\
    \ {\n                words = append(words, word)\n                word = \"\"\n\
    \                word_start = false\n            }\n        } else {\n       \
    \     word_start = true\n            word += string(c)\n        }\n    }\n   \
    \ if word_start {\n        words = append(words, word)\n    }\n    return words\n\
    }\n", "    var words []string\n    word := \"\"\n    for _, c := range s {\n \
    \       if c == ' ' || c == ',' {\n            if word != \"\" {\n           \
    \     words = append(words, word)\n                word = \"\"\n            }\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if word\
    \ != \"\" {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    var in_word bool\n    for _,\
    \ c := range s {\n        if c == ' ' || c == ',' {\n            if in_word {\n\
    \                result = append(result, word)\n                word = \"\"\n\
    \                in_word = false\n            }\n        } else {\n          \
    \  word += string(c)\n            in_word = true\n        }\n    }\n    if in_word\
    \ {\n        result = append(result, word)\n    }\n    return result\n}\n", " \
    \   var words []string\n    for _, word := range s {\n        if word == ' ' ||\
    \ word == ',' {\n            continue\n        }\n        words = append(words,\
    \ string(word))\n    }\n    return words\n}\n", "    var words []string\n    var\
    \ word string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n\
    \            words = append(words, word)\n            word = \"\"\n        } else\
    \ {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    return words\n}\n", "    var words []string\n    for _, word := range\
    \ s {\n        if word == ' ' || word == ',' {\n            continue\n       \
    \ }\n        words = append(words, string(word))\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' || c == ',' {\n            if len(word) > 0 {\n               \
    \ words = append(words, word)\n                word = \"\"\n            }\n  \
    \      } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    var words []string\n    var\
    \ word string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n\
    \            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       words = append(words, word)\n            word = \"\"\n        } else {\n\
    \            word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    return words\n}\n", "    return nil\n}\n", "    var words []string\n    var\
    \ word string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n\
    \            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                result = append(result, word)\n  \
    \              word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    var word string\n    for _, char := range s {\n        if char\
    \ == ' ' || char == ',' {\n            words = append(words, word)\n         \
    \   word = \"\"\n        } else {\n            word += string(char)\n        }\n\
    \    }\n    words = append(words, word)\n    return words\n}\n", "    var words\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' || c == ',' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    // your code here\n    return nil\n\
    }\n", "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n\
    \    for _, word := range s {\n        if word == ' ' || word == ',' {\n     \
    \       continue\n        }\n        words = append(words, string(word))\n   \
    \ }\n    return words\n}\n", "    // your code here\n    return []string{}\n}\n",
  "    var result []string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' || c == ',' {\n            if len(word) > 0 {\n              \
    \  result = append(result, word)\n                word = \"\"\n            }\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' || c == ',' {\n            if len(word) > 0 {\n               \
    \ words = append(words, word)\n                word = \"\"\n            }\n  \
    \      } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   // your code here\n    return nil\n}\n", "    var words []string\n    var\
    \ word string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n\
    \            words = append(words, word)\n            word = \"\"\n        } else\
    \ {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' || c == ',' {\n            if\
    \ len(word) > 0 {\n                words = append(words, word)\n             \
    \   word = \"\"\n            }\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    return nil\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    for _, word\
    \ := range s {\n        if word == ' ' || word == ',' {\n            continue\n\
    \        }\n        words = append(words, string(word))\n    }\n    return words\n\
    }\n", "    return nil\n}\n", "    var words []string\n    word := \"\"\n    for\
    \ _, char := range s {\n        if char == ' ' || char == ',' {\n            if\
    \ word != \"\" {\n                words = append(words, word)\n              \
    \  word = \"\"\n            }\n        } else {\n            word += string(char)\n\
    \        }\n    }\n    if word != \"\" {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    return nil\n}\n", "    var result []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                result = append(result, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' || c == ',' {\n     \
    \       if len(word) > 0 {\n                words = append(words, word)\n    \
    \            word = \"\"\n            }\n        } else {\n            word +=\
    \ string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    for _, word\
    \ := range s {\n        words = append(words, string(word))\n    }\n    return\
    \ words\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
