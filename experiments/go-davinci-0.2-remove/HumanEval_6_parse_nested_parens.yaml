name: HumanEval_6_parse_nested_parens
language: go_test.go
prompt: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\nfunc parse_nested_parens(paren_string string) []int {\n"
tests: "func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"),\
  \ expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
  ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"),\
  \ expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var max_nesting_levels []int\n    var current_nesting_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting_level += 1\n        } else if char == ')' {\n      \
    \      current_nesting_level -= 1\n        } else if char == ' ' {\n         \
    \   max_nesting_levels = append(max_nesting_levels, current_nesting_level)\n \
    \           current_nesting_level = 0\n        }\n    }\n    return max_nesting_levels\n\
    }\n", "    var max_depth []int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n        } else if char\
    \ == ')' {\n            depth -= 1\n        } else if char == ' ' {\n        \
    \    max_depth = append(max_depth, depth)\n            depth = 0\n        }\n\
    \    }\n    max_depth = append(max_depth, depth)\n    return max_depth\n}\n",
  "    var result []int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n        } else if char ==\
    \ ')' {\n            result = append(result, depth)\n            depth--\n   \
    \     }\n    }\n    return result\n}\n", "    var max_nesting_level []int\n  \
    \  var current_nesting_level int\n    for _, char := range paren_string {\n  \
    \      if char == '(' {\n            current_nesting_level++\n        } else if\
    \ char == ')' {\n            max_nesting_level = append(max_nesting_level, current_nesting_level)\n\
    \            current_nesting_level--\n        }\n    }\n    return max_nesting_level\n\
    }\n", "    var result []int\n    var max_level int\n    var level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            level++\n\
    \            if level > max_level {\n                max_level = level\n     \
    \       }\n        } else if char == ')' {\n            level--\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   max_level = 0\n            level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_level int = 0\n    var cur_level\
    \ int = 0\n    var result []int = make([]int, 0)\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            cur_level += 1\n            if cur_level\
    \ > max_level {\n                max_level = cur_level\n            }\n      \
    \  } else if c == ')' {\n            cur_level -= 1\n        } else if c == '\
    \ ' {\n            result = append(result, max_level)\n            max_level =\
    \ 0\n            cur_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            depth += 1\n            if depth > max_depth {\n\
    \                max_depth = depth\n            }\n        } else if char == ')'\
    \ {\n            depth -= 1\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var max_level int\n    var level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            level++\n\
    \            if level > max_level {\n                max_level = level\n     \
    \       }\n        } else if char == ')' {\n            level--\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   max_level = 0\n            level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            depth += 1\n            if depth > max_depth {\n\
    \                max_depth = depth\n            }\n        } else if char == ')'\
    \ {\n            depth -= 1\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth []int\n    var current_depth int\n    var current_char\
    \ rune\n    for _, current_char = range paren_string {\n        if current_char\
    \ == '(' {\n            current_depth++\n        } else if current_char == ')'\
    \ {\n            current_depth--\n        } else if current_char == ' ' {\n  \
    \          max_depth = append(max_depth, current_depth)\n            current_depth\
    \ = 0\n        }\n    }\n    max_depth = append(max_depth, current_depth)\n  \
    \  return max_depth\n}\n", "    var max_depth int = 0\n    var current_depth int\
    \ = 0\n    var result []int\n    for _, char := range paren_string {\n       \
    \ if char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth -= 1\n            if\
    \ current_depth == 0 {\n                result = append(result, max_depth)\n \
    \               max_depth = 0\n            }\n        }\n    }\n    return result\n\
    }\n", "    var max_depth int\n    var depth int\n    var depths []int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == ')' {\n            depths = append(depths,\
    \ max_depth)\n            depth -= 1\n        }\n    }\n    return depths\n}\n",
  "    var max_nesting_level []int\n    var nesting_level int\n    for _, paren :=\
    \ range paren_string {\n        if paren == '(' {\n            nesting_level++\n\
    \        } else if paren == ')' {\n            nesting_level--\n        } else\
    \ if paren == ' ' {\n            max_nesting_level = append(max_nesting_level,\
    \ nesting_level)\n            nesting_level = 0\n        }\n    }\n    return\
    \ max_nesting_level\n}\n", "    var max_depth []int\n    var depth int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            depth += 1\n\
    \        } else if c == ')' {\n            depth -= 1\n        } else if c ==\
    \ ' ' {\n            max_depth = append(max_depth, depth)\n            depth =\
    \ 0\n        }\n    }\n    max_depth = append(max_depth, depth)\n    return max_depth\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int\n    var depth int\n    var result []int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            depth++\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            depth--\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var depth int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            depth += 1\n            if depth > max_depth {\n        \
    \        max_depth = depth\n            }\n        } else if c == ')' {\n    \
    \        depth -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n", "    var\
    \ max_nesting int = 0\n    var curr_nesting int = 0\n    var result []int\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ curr_nesting++\n            if curr_nesting > max_nesting {\n              \
    \  max_nesting = curr_nesting\n            }\n        } else if char == ')' {\n\
    \            curr_nesting--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_nesting)\n            max_nesting = 0\n            curr_nesting\
    \ = 0\n        }\n    }\n    result = append(result, max_nesting)\n    return\
    \ result\n}\n", "    var max_depth int\n    var depth int\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\
    \ = 0\n    var depth int = 0\n    var result []int = make([]int, 0)\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            depth +=\
    \ 1\n            if depth > max_depth {\n                max_depth = depth\n \
    \           }\n        } else if char == ')' {\n            depth -= 1\n     \
    \   } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\
    \ = 0\n    var depth int = 0\n    var result []int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            depth += 1\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if c ==\
    \ ')' {\n            depth -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level++\n       \
    \ } else if c == ')' {\n            result = append(result, current_level)\n \
    \           current_level--\n        }\n    }\n    return result\n}\n", "    var\
    \ max_nesting_level []int\n    var nesting_level int\n    for _, paren := range\
    \ paren_string {\n        if paren == '(' {\n            nesting_level++\n   \
    \     } else if paren == ')' {\n            nesting_level--\n        } else if\
    \ paren == ' ' {\n            max_nesting_level = append(max_nesting_level, nesting_level)\n\
    \            nesting_level = 0\n        }\n    }\n    return max_nesting_level\n\
    }\n", "    var max_depth []int\n    var current_depth int\n    for _, paren :=\
    \ range paren_string {\n        if paren == '(' {\n            current_depth++\n\
    \        } else if paren == ')' {\n            current_depth--\n        } else\
    \ if paren == ' ' {\n            max_depth = append(max_depth, current_depth)\n\
    \            current_depth = 0\n        }\n    }\n    return max_depth\n}\n",
  "    var result []int\n    var max_depth int\n    var depth int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            depth -= 1\n        }\
    \ else if char == ' ' {\n            result = append(result, max_depth)\n    \
    \        max_depth = 0\n            depth = 0\n        }\n    }\n    result =\
    \ append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var level int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            level++\n        } else if char == ')' {\n            result\
    \ = append(result, level)\n            level--\n        }\n    }\n    return result\n\
    }\n", "    var max_depth int = 0\n    var depth int = 0\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\n\
    \    var depth int\n    var result []int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if c ==\
    \ ')' {\n            depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var max_level int\n    var level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            level++\n \
    \           if level > max_level {\n                max_level = level\n      \
    \      }\n        } else if c == ')' {\n            level--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var max_level int\n    var level int\n    var result\
    \ []int\n    for _, char := range paren_string {\n        if char == '(' {\n \
    \           level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var max_level int\n    var level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var max_level int\n    var level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            level++\n \
    \           if level > max_level {\n                max_level = level\n      \
    \      }\n        } else if c == ')' {\n            level--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var max_depth int = 0\n    var curr_depth int =\
    \ 0\n    var result []int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            curr_depth++\n            if curr_depth > max_depth\
    \ {\n                max_depth = curr_depth\n            }\n        } else if\
    \ char == ')' {\n            curr_depth--\n        } else if char == ' ' {\n \
    \           result = append(result, max_depth)\n            max_depth = 0\n  \
    \          curr_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var max_depth []int\n    var depth int\n    var\
    \ paren_char byte\n    for i := 0; i < len(paren_string); i++ {\n        paren_char\
    \ = paren_string[i]\n        if paren_char == '(' {\n            depth++\n   \
    \     } else if paren_char == ')' {\n            depth--\n        } else if paren_char\
    \ == ' ' {\n            max_depth = append(max_depth, depth)\n            depth\
    \ = 0\n        }\n    }\n    max_depth = append(max_depth, depth)\n    return\
    \ max_depth\n}\n", "    var max_depth int\n    var depth int\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\
    \ = 0\n    var current_depth int = 0\n    var result []int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_depth++\n\
    \            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == ')' {\n            current_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result = append(result, max_depth)\n    return result\n}\n", "    var result\
    \ []int\n    var max_depth int\n    var current_depth int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_depth++\n\
    \            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == ')' {\n            current_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result = append(result, max_depth)\n    return result\n}\n", "    var max_depth\
    \ int = 0\n    var current_depth int = 0\n    var result []int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_depth++\n\
    \            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == ')' {\n            current_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result = append(result, max_depth)\n    return result\n}\n", "    var max_nesting_levels\
    \ []int\n    var current_nesting_level int\n    var max_nesting_level int\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ current_nesting_level++\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        } else if char == ')' {\n            current_nesting_level--\n      \
    \  } else if char == ' ' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ max_nesting_level)\n            max_nesting_level = 0\n            current_nesting_level\
    \ = 0\n        }\n    }\n    max_nesting_levels = append(max_nesting_levels, max_nesting_level)\n\
    \    return max_nesting_levels\n}\n", "    var max_depth int = 0\n    var current_depth\
    \ int = 0\n    var result []int\n    for _, char := range paren_string {\n   \
    \     if char == '(' {\n            current_depth++\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            if current_depth == 0 {\n        \
    \        panic(\"Invalid string\")\n            }\n            current_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        } else {\n\
    \            panic(\"Invalid string\")\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_depth int = 0\n    var curr_depth\
    \ int = 0\n    var result []int\n    for _, char := range paren_string {\n   \
    \     if char == '(' {\n            curr_depth++\n            if curr_depth >\
    \ max_depth {\n                max_depth = curr_depth\n            }\n       \
    \ } else if char == ')' {\n            curr_depth--\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            curr_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level--\n        } else if c == ' ' {\n \
    \           result = append(result, max_level)\n            max_level = 0\n  \
    \          current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var stack []int\n    var\
    \ max_depth int\n    for _, c := range paren_string {\n        if c == '(' {\n\
    \            stack = append(stack, 1)\n            if len(stack) > max_depth {\n\
    \                max_depth = len(stack)\n            }\n        } else if c ==\
    \ ')' {\n            stack = stack[:len(stack)-1]\n        } else if c == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            current_level += 1\n \
    \       } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var max_depth int\n    var depth int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            depth -= 1\n        }\
    \ else if char == ' ' {\n            result = append(result, max_depth)\n    \
    \        max_depth = 0\n            depth = 0\n        }\n    }\n    result =\
    \ append(result, max_depth)\n    return result\n}\n", "    var max_level int =\
    \ 0\n    var level int = 0\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            level += 1\n            if level >\
    \ max_level {\n                max_level = level\n            }\n        } else\
    \ if char == ')' {\n            level -= 1\n            if level == 0 {\n    \
    \            result = append(result, max_level)\n                max_level = 0\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    var level int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            level++\n        } else if char == ')' {\n            result\
    \ = append(result, level)\n            level--\n        }\n    }\n    return result\n\
    }\n", "    var max_depth []int\n    var current_depth int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_depth++\n\
    \        } else if char == ')' {\n            current_depth--\n        } else\
    \ if char == ' ' {\n            max_depth = append(max_depth, current_depth)\n\
    \            current_depth = 0\n        }\n    }\n    max_depth = append(max_depth,\
    \ current_depth)\n    return max_depth\n}\n", "    var max_depth int\n    var\
    \ depth int\n    var result []int\n    for _, char := range paren_string {\n \
    \       if char == '(' {\n            depth += 1\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth -= 1\n        } else if char == ' ' {\n        \
    \    result = append(result, max_depth)\n            max_depth = 0\n         \
    \   depth = 0\n        }\n    }\n    result = append(result, max_depth)\n    return\
    \ result\n}\n", "    var max_depth int = 0\n    var depth int = 0\n    var result\
    \ []int\n    for _, c := range paren_string {\n        if c == '(' {\n       \
    \     depth++\n            if depth > max_depth {\n                max_depth =\
    \ depth\n            }\n        } else if c == ')' {\n            depth--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth []int\n\
    \    var depth int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            depth += 1\n        } else if c == ')' {\n            depth -=\
    \ 1\n        } else if c == ' ' {\n            max_depth = append(max_depth, depth)\n\
    \            depth = 0\n        }\n    }\n    max_depth = append(max_depth, depth)\n\
    \    return max_depth\n}\n", "    var max_depth int\n    var curr_depth int\n\
    \    var result []int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            curr_depth++\n            if curr_depth > max_depth {\n     \
    \           max_depth = curr_depth\n            }\n        } else if c == ')'\
    \ {\n            curr_depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            curr_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth int\n    var depth int\n    var result []int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            depth++\n \
    \           if depth > max_depth {\n                max_depth = depth\n      \
    \      }\n        } else if c == ')' {\n            depth--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var depth_stack []int\n    var max_depth int\n\
    \    var result []int\n\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            depth_stack = append(depth_stack, max_depth)\n       \
    \     max_depth++\n        } else if char == ')' {\n            max_depth--\n\
    \            result = append(result, max_depth)\n            max_depth = depth_stack[len(depth_stack)\
    \ - 1]\n            depth_stack = depth_stack[:len(depth_stack) - 1]\n       \
    \ }\n    }\n\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int = 0\n    var max_level int = 0\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_depth int\n    var depth int\n\
    \    var depths []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            depth += 1\n            if depth > max_depth {\n     \
    \           max_depth = depth\n            }\n        } else if char == ')' {\n\
    \            depths = append(depths, max_depth)\n            depth -= 1\n    \
    \    }\n    }\n    return depths\n}\n", "    var max_depth int\n    var curr_depth\
    \ int\n    var result []int\n    for _, char := range paren_string {\n       \
    \ if char == '(' {\n            curr_depth++\n            if curr_depth > max_depth\
    \ {\n                max_depth = curr_depth\n            }\n        } else if\
    \ char == ')' {\n            curr_depth--\n        } else if char == ' ' {\n \
    \           result = append(result, max_depth)\n            max_depth = 0\n  \
    \          curr_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var max_level int = 0\n    var level int = 0\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            level++\n            if level > max_level {\n        \
    \        max_level = level\n            }\n        } else if char == ')' {\n \
    \           level--\n        } else if char == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_depth []int\n    var depth int\n    var paren_count int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth++\n   \
    \         paren_count++\n        } else if char == ')' {\n            depth--\n\
    \            paren_count++\n        } else if char == ' ' {\n            max_depth\
    \ = append(max_depth, depth)\n            depth = 0\n            paren_count =\
    \ 0\n        }\n    }\n    if paren_count != 0 {\n        max_depth = append(max_depth,\
    \ depth)\n    }\n    return max_depth\n}\n", "    var max_depth int = 0\n    var\
    \ current_depth int = 0\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_depth++\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var max_depth int = 0\n    var curr_depth\
    \ int = 0\n    var result []int = []int{}\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            curr_depth++\n            if curr_depth\
    \ > max_depth {\n                max_depth = curr_depth\n            }\n     \
    \   } else if c == ')' {\n            curr_depth--\n        } else if c == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \            curr_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_nesting_level []int\n    var\
    \ nesting_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            nesting_level++\n        } else if char == ')' {\n   \
    \         max_nesting_level = append(max_nesting_level, nesting_level)\n     \
    \       nesting_level--\n        }\n    }\n    return max_nesting_level\n}\n",
  "    var result []int\n    var current_level int = 0\n    var max_level int = 0\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth []int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n        } else if char ==\
    \ ')' {\n            depth--\n        } else if char == ' ' {\n            max_depth\
    \ = append(max_depth, depth)\n            depth = 0\n        }\n    }\n    return\
    \ max_depth\n}\n", "    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_level++\n        } else if char == ')' {\n\
    \            result = append(result, current_level)\n            current_level--\n\
    \        }\n    }\n    return result\n}\n", "    var max_depth int = 0\n    var\
    \ current_depth int = 0\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_depth += 1\n            if\
    \ current_depth > max_depth {\n                max_depth = current_depth\n   \
    \         }\n        } else if char == ')' {\n            current_depth -= 1\n\
    \            if current_depth == 0 {\n                result = append(result,\
    \ max_depth)\n                max_depth = 0\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var max_nesting_level int\n    var nesting_level\
    \ int\n    var result []int\n    for _, char := range paren_string {\n       \
    \ if char == '(' {\n            nesting_level++\n            if nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = nesting_level\n \
    \           }\n        } else if char == ')' {\n            nesting_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_nesting_level)\n\
    \            max_nesting_level = 0\n            nesting_level = 0\n        }\n\
    \    }\n    result = append(result, max_nesting_level)\n    return result\n}\n",
  "    var max_depth int\n    var depth int\n    var result []int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            depth++\n         \
    \   if depth > max_depth {\n                max_depth = depth\n            }\n\
    \        } else if c == ')' {\n            depth--\n        } else if c == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var max_depth int\
    \ = 0\n    var depth int = 0\n    var result []int = make([]int, 0)\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            depth++\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            depth--\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int = 0\n    var max_level int = 0\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_level\
    \ int\n    var level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            level++\n            if level > max_level {\n           \
    \     max_level = level\n            }\n        } else if c == ')' {\n       \
    \     level--\n        } else if c == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_nesting []int\n    var current_nesting int\n    var current_group string\n\
    \    var group_start_index int\n    for i, c := range paren_string {\n       \
    \ if c == ' ' {\n            max_nesting = append(max_nesting, current_nesting)\n\
    \            current_nesting = 0\n            group_start_index = i + 1\n    \
    \    } else if c == '(' {\n            current_nesting++\n        } else if c\
    \ == ')' {\n            current_nesting--\n        }\n    }\n    max_nesting =\
    \ append(max_nesting, current_nesting)\n    return max_nesting\n}\n", "    var\
    \ max_depth int\n    var depth int\n    var result []int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            depth++\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if c == ')' {\n            depth--\n        } else if c == ' ' {\n         \
    \   result = append(result, max_depth)\n            max_depth = 0\n          \
    \  depth = 0\n        }\n    }\n    result = append(result, max_depth)\n    return\
    \ result\n}\n", "    var max_depth int = 0\n    var current_depth int = 0\n  \
    \  var result []int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if c == ')' {\n            current_depth -= 1\n            if current_depth\
    \ == 0 {\n                result = append(result, max_depth)\n               \
    \ max_depth = 0\n            }\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int = 0\n    var max_level int = 0\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var result []int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            curr_depth++\n\
    \            if curr_depth > max_depth {\n                max_depth = curr_depth\n\
    \            }\n        } else if c == ')' {\n            curr_depth--\n     \
    \   } else if c == ' ' {\n            result = append(result, max_depth)\n   \
    \         max_depth = 0\n            curr_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\n\
    \    var depth int\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth--\n        } else if char == ' ' {\n           \
    \ result = append(result, max_depth)\n            max_depth = 0\n            depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   curr_depth++\n            if curr_depth > max_depth {\n                max_depth\
    \ = curr_depth\n            }\n        } else if char == ')' {\n            curr_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            curr_depth = 0\n        }\n    }\n   \
    \ result = append(result, max_depth)\n    return result\n}\n", "    var result\
    \ []int\n    var max_depth int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth--\n        } else if char == ' ' {\n           \
    \ result = append(result, max_depth)\n            max_depth = 0\n            depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var depth int = 0\n    var result []int\
    \ = make([]int, 0)\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            depth++\n            if depth > max_depth {\n               \
    \ max_depth = depth\n            }\n        } else if c == ')' {\n           \
    \ depth--\n        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\
    \ = 0\n    var current_depth int = 0\n    var result []int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_depth +=\
    \ 1\n            if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == ')' {\n            current_depth -=\
    \ 1\n            if current_depth == 0 {\n                result = append(result,\
    \ max_depth)\n                max_depth = 0\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var max_depth int\n    var depth int\n    var result\
    \ []int\n    for _, c := range paren_string {\n        if c == '(' {\n       \
    \     depth++\n            if depth > max_depth {\n                max_depth =\
    \ depth\n            }\n        } else if c == ')' {\n            depth--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth []int\n\
    \    var curr_depth int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            curr_depth++\n        } else if char == ')' {\n      \
    \      curr_depth--\n        } else if char == ' ' {\n            max_depth =\
    \ append(max_depth, curr_depth)\n            curr_depth = 0\n        }\n    }\n\
    \    return max_depth\n}\n", "    var result []int\n    var curr_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            curr_level++\n            if curr_level > max_level {\n\
    \                max_level = curr_level\n            }\n        } else if char\
    \ == ')' {\n            curr_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     curr_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var max_depth int\n    var depth int\n    var result\
    \ []int\n    for _, char := range paren_string {\n        if char == '(' {\n \
    \           depth++\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\
    \ = 0\n    var curr_depth int = 0\n    var max_depths []int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            curr_depth++\n          \
    \  if curr_depth > max_depth {\n                max_depth = curr_depth\n     \
    \       }\n        } else if c == ')' {\n            curr_depth--\n        } else\
    \ if c == ' ' {\n            max_depths = append(max_depths, max_depth)\n    \
    \        max_depth = 0\n            curr_depth = 0\n        }\n    }\n    max_depths\
    \ = append(max_depths, max_depth)\n    return max_depths\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var count int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            count++\n        } else if char == ')' {\n      \
    \      count--\n        } else if char == ' ' {\n            result = append(result,\
    \ count)\n            count = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var max_level int\n    var level int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            level++\n         \
    \   if level > max_level {\n                max_level = level\n            }\n\
    \        } else if c == ')' {\n            level--\n        } else if c == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var max_level int\n    var\
    \ level int\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if c == ')' {\n            level--\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var max_depth []int\n\
    \    var depth int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            depth++\n        } else if char == ')' {\n            depth--\n\
    \        }\n        if char == ' ' {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n        }\n    }\n    max_depth = append(max_depth,\
    \ depth)\n    return max_depth\n}\n", "    var max_depth int\n    var depth int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            depth += 1\n            if depth > max_depth {\n     \
    \           max_depth = depth\n            }\n        } else if char == ')' {\n\
    \            depth -= 1\n        } else if char == ' ' {\n            result =\
    \ append(result, max_depth)\n            max_depth = 0\n            depth = 0\n\
    \        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   curr_depth++\n            if curr_depth > max_depth {\n                max_depth\
    \ = curr_depth\n            }\n        } else if char == ')' {\n            curr_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            curr_depth = 0\n        }\n    }\n   \
    \ result = append(result, max_depth)\n    return result\n}\n", "    var max_nesting_level\
    \ []int\n    var nesting_level int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            nesting_level++\n        } else if char\
    \ == ')' {\n            max_nesting_level = append(max_nesting_level, nesting_level)\n\
    \            nesting_level--\n        }\n    }\n    return max_nesting_level\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var result []int\
    \ = make([]int, 0)\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            curr_depth++\n            if curr_depth > max_depth {\n \
    \               max_depth = curr_depth\n            }\n        } else if char\
    \ == ')' {\n            curr_depth--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_depth)\n            max_depth = 0\n       \
    \     curr_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   for _, char := range paren_string {\n        if char == '(' {\n          \
    \  current_level++\n        } else if char == ')' {\n            result = append(result,\
    \ current_level)\n            current_level--\n        }\n    }\n    return result\n\
    }\n", "    var max_nesting_levels []int\n    var nesting_level int\n    for _,\
    \ paren := range paren_string {\n        if paren == '(' {\n            nesting_level++\n\
    \        } else if paren == ')' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ nesting_level)\n            nesting_level--\n        }\n    }\n    return max_nesting_levels\n\
    }\n", "    var result []int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n        } else if char\
    \ == ')' {\n            depth -= 1\n        } else if char == ' ' {\n        \
    \    result = append(result, depth)\n        }\n    }\n    return result\n}\n",
  "    var max_depth []int\n    var depth int\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            depth += 1\n       \
    \ } else if paren_string[i] == ')' {\n            depth -= 1\n        } else if\
    \ paren_string[i] == ' ' {\n            max_depth = append(max_depth, depth)\n\
    \            depth = 0\n        }\n    }\n    return max_depth\n}\n", "    var\
    \ max_depth int = 0\n    var depth int = 0\n    var depths []int\n    for _, c\
    \ := range paren_string {\n        if c == '(' {\n            depth += 1\n   \
    \         if depth > max_depth {\n                max_depth = depth\n        \
    \    }\n        } else if c == ')' {\n            depths = append(depths, max_depth)\n\
    \            depth -= 1\n        }\n    }\n    return depths\n}\n", "    var paren_stack\
    \ []rune\n    var max_depth []int\n    var current_depth int\n    for _, paren\
    \ := range paren_string {\n        if paren == '(' {\n            paren_stack\
    \ = append(paren_stack, paren)\n            current_depth += 1\n        } else\
    \ if paren == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \            current_depth -= 1\n        } else if paren == ' ' {\n          \
    \  max_depth = append(max_depth, current_depth)\n            current_depth = 0\n\
    \        }\n    }\n    max_depth = append(max_depth, current_depth)\n    return\
    \ max_depth\n}\n", "    var max_depth int\n    var depth int\n    var result []int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if c == ')' {\n            depth -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, max_depth)\n     \
    \       max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n        } else if char == ')' {\n            result\
    \ = append(result, current_level)\n            current_level -= 1\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   max_level = 0\n            current_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            if current_level == 0 {\n           \
    \     fmt.Println(\"Invalid input\")\n                return nil\n           \
    \ }\n            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var paren_stack []int\n    var result []int\n    for _, paren := range\
    \ paren_string {\n        if paren == '(' {\n            paren_stack = append(paren_stack,\
    \ 1)\n        } else if paren == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \        } else if paren == ' ' {\n            result = append(result, len(paren_stack))\n\
    \        }\n    }\n    return result\n}\n", "    var max_depth int = 0\n    var\
    \ curr_depth int = 0\n    var result []int = make([]int, 0)\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            curr_depth++\n \
    \           if curr_depth > max_depth {\n                max_depth = curr_depth\n\
    \            }\n        } else if char == ')' {\n            curr_depth--\n  \
    \      } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            curr_depth = 0\n        }\n    }\n   \
    \ result = append(result, max_depth)\n    return result\n}\n", "    var max_nesting\
    \ []int\n    var curr_nesting int\n    for _, char := range paren_string {\n \
    \       if char == '(' {\n            curr_nesting++\n        } else if char ==\
    \ ')' {\n            curr_nesting--\n        } else if char == ' ' {\n       \
    \     max_nesting = append(max_nesting, curr_nesting)\n            curr_nesting\
    \ = 0\n        }\n    }\n    return max_nesting\n}\n", "    var max_nesting []int\n\
    \    var max_level int\n    var level int\n    var paren_group string\n    for\
    \ i := 0; i < len(paren_string); i++ {\n        if paren_string[i] == ' ' {\n\
    \            if level > max_level {\n                max_level = level\n     \
    \       }\n            max_nesting = append(max_nesting, max_level)\n        \
    \    max_level = 0\n            level = 0\n            paren_group = \"\"\n  \
    \      } else {\n            paren_group += string(paren_string[i])\n        \
    \    if paren_string[i] == '(' {\n                level++\n            } else\
    \ if paren_string[i] == ')' {\n                level--\n            }\n      \
    \  }\n    }\n    if level > max_level {\n        max_level = level\n    }\n  \
    \  max_nesting = append(max_nesting, max_level)\n    return max_nesting\n}\n",
  "    var max_nesting_level []int\n    var current_nesting_level int\n    var max_nesting_level_so_far\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting_level += 1\n            if current_nesting_level > max_nesting_level_so_far\
    \ {\n                max_nesting_level_so_far = current_nesting_level\n      \
    \      }\n        } else if char == ')' {\n            current_nesting_level -=\
    \ 1\n            if current_nesting_level == 0 {\n                max_nesting_level\
    \ = append(max_nesting_level, max_nesting_level_so_far)\n                max_nesting_level_so_far\
    \ = 0\n            }\n        }\n    }\n    return max_nesting_level\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_nesting_levels\
    \ []int\n    var current_nesting_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_nesting_level += 1\n      \
    \  } else if char == ')' {\n            current_nesting_level -= 1\n        }\
    \ else if char == ' ' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ current_nesting_level)\n            current_nesting_level = 0\n        }\n \
    \   }\n    max_nesting_levels = append(max_nesting_levels, current_nesting_level)\n\
    \    return max_nesting_levels\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var current_depth int\n    for _, char := range paren_string {\n  \
    \      if char == '(' {\n            current_depth++\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var max_level int\n    var level int\n\
    \    var result []int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            level++\n            if level > max_level {\n               \
    \ max_level = level\n            }\n        } else if c == ')' {\n           \
    \ level--\n        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var max_depth int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth--\n        } else if char == ' ' {\n           \
    \ result = append(result, max_depth)\n            max_depth = 0\n            depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var result []int\n\
    \    var i int = 0\n    var paren_string_len int = len(paren_string)\n    for\
    \ i < paren_string_len {\n        if paren_string[i] == '(' {\n            curr_depth++\n\
    \            if curr_depth > max_depth {\n                max_depth = curr_depth\n\
    \            }\n        } else if paren_string[i] == ')' {\n            curr_depth--\n\
    \        } else if paren_string[i] == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            curr_depth = 0\n        }\n\
    \        i++\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_level, cur_level int\n    var result []int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            cur_level++\n     \
    \       if cur_level > max_level {\n                max_level = cur_level\n  \
    \          }\n        } else if c == ')' {\n            cur_level--\n        }\
    \ else if c == ' ' {\n            result = append(result, max_level)\n       \
    \     max_level = 0\n            cur_level = 0\n        }\n    }\n    result =\
    \ append(result, max_level)\n    return result\n}\n", "    var max_depth int =\
    \ 0\n    var depth int = 0\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth--\n        } else if char == ' ' {\n           \
    \ result = append(result, max_depth)\n            max_depth = 0\n            depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth []int\n    var current_depth int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_depth++\n\
    \        } else if char == ')' {\n            current_depth--\n        } else\
    \ if char == ' ' {\n            max_depth = append(max_depth, current_depth)\n\
    \            current_depth = 0\n        }\n    }\n    max_depth = append(max_depth,\
    \ current_depth)\n    return max_depth\n}\n", "    var max_depth []int\n    var\
    \ current_depth int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_depth += 1\n        } else if c == ')' {\n          \
    \  current_depth -= 1\n        } else if c == ' ' {\n            max_depth = append(max_depth,\
    \ current_depth)\n            current_depth = 0\n        }\n    }\n    max_depth\
    \ = append(max_depth, current_depth)\n    return max_depth\n}\n", "    var max_depth\
    \ int = 0\n    var curr_depth int = 0\n    var result []int = []int{}\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            curr_depth\
    \ += 1\n            if curr_depth > max_depth {\n                max_depth = curr_depth\n\
    \            }\n        } else if c == ')' {\n            curr_depth -= 1\n  \
    \      } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            curr_depth = 0\n        }\n    }\n   \
    \ result = append(result, max_depth)\n    return result\n}\n", "    var max_depth\
    \ []int\n    var current_depth int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            current_depth += 1\n        } else if char\
    \ == ')' {\n            current_depth -= 1\n        } else if char == ' ' {\n\
    \            max_depth = append(max_depth, current_depth)\n            current_depth\
    \ = 0\n        }\n    }\n    return max_depth\n}\n", "    var result []int\n \
    \   var current_level int\n    for _, c := range paren_string {\n        if c\
    \ == '(' {\n            current_level++\n        } else if c == ')' {\n      \
    \      result = append(result, current_level)\n            current_level--\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    var max_level\
    \ int\n    var level int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            level++\n            if level > max_level {\n   \
    \             max_level = level\n            }\n        } else if char == ')'\
    \ {\n            level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int\n    var depth int\n    var result []int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == ')' {\n            depth -= 1\n    \
    \    } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_nesting_level\
    \ int = 0\n    var current_nesting_level int = 0\n    var result []int = []int{}\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_nesting_level++\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        } else if char == ')' {\n            current_nesting_level--\n      \
    \  } else if char == ' ' {\n            result = append(result, max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    result = append(result, max_nesting_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   curr_depth++\n            if curr_depth > max_depth {\n                max_depth\
    \ = curr_depth\n            }\n        } else if char == ')' {\n            curr_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            curr_depth = 0\n        }\n    }\n   \
    \ result = append(result, max_depth)\n    return result\n}\n", "    var max_depth\
    \ int\n    var depth int\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depth -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var max_depth int\n    var current_depth int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_depth++\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == ')' {\n            current_depth--\n        } else if char == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \            current_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var max_nesting int = 0\n    var current_nesting\
    \ int = 0\n    var result []int\n    for _, char := range paren_string {\n   \
    \     if char == '(' {\n            current_nesting++\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        } else if char == ')' {\n            current_nesting--\n        }\
    \ else if char == ' ' {\n            result = append(result, max_nesting)\n  \
    \          max_nesting = 0\n            current_nesting = 0\n        }\n    }\n\
    \    result = append(result, max_nesting)\n    return result\n}\n", "    var max_depth\
    \ int\n    var depth int\n    var depths []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depths = append(depths, max_depth)\n         \
    \   depth -= 1\n        }\n    }\n    return depths\n}\n", "    max_depth := 0\n\
    \    current_depth := 0\n    max_depths := []int{}\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_depth += 1\n            if\
    \ current_depth > max_depth {\n                max_depth = current_depth\n   \
    \         }\n        } else if char == ')' {\n            if current_depth ==\
    \ max_depth {\n                max_depths = append(max_depths, max_depth)\n  \
    \              max_depth = 0\n                current_depth = 0\n            }\
    \ else {\n                current_depth -= 1\n            }\n        }\n    }\n\
    \    return max_depths\n}\n", "    var result []int\n    var paren_stack []int\n\
    \    var max_depth int\n    var current_depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            paren_stack = append(paren_stack, 1)\n\
    \            current_depth += 1\n            if current_depth > max_depth {\n\
    \                max_depth = current_depth\n            }\n        } else if char\
    \ == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n     \
    \       current_depth -= 1\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int\n    var depth_stack []int\n    var result []int\n\
    \n    for _, char := range paren_string {\n        if char == '(' {\n        \
    \    depth_stack = append(depth_stack, max_depth)\n            max_depth += 1\n\
    \        } else if char == ')' {\n            result = append(result, max_depth)\n\
    \            max_depth = depth_stack[len(depth_stack) - 1]\n            depth_stack\
    \ = depth_stack[:len(depth_stack) - 1]\n        }\n    }\n\n    return result\n\
    }\n", "    var result []int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n        } else if char ==\
    \ ')' {\n            depth--\n        } else if char == ' ' {\n            result\
    \ = append(result, depth)\n        }\n    }\n    return result\n}\n", "    var\
    \ max_depth int = 0\n    var depth int = 0\n    var result []int\n    for _, c\
    \ := range paren_string {\n        if c == '(' {\n            depth++\n      \
    \      if depth > max_depth {\n                max_depth = depth\n           \
    \ }\n        } else if c == ')' {\n            depth--\n        } else if c ==\
    \ ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var max_nesting_levels []int\n    var current_nesting_level\
    \ int\n    var current_char rune\n    for _, current_char = range paren_string\
    \ {\n        if current_char == '(' {\n            current_nesting_level += 1\n\
    \        } else if current_char == ')' {\n            current_nesting_level -=\
    \ 1\n        } else if current_char == ' ' {\n            max_nesting_levels =\
    \ append(max_nesting_levels, current_nesting_level)\n            current_nesting_level\
    \ = 0\n        }\n    }\n    max_nesting_levels = append(max_nesting_levels, current_nesting_level)\n\
    \    return max_nesting_levels\n}\n", "    var max_depth int\n    var depth int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            depth++\n            if depth > max_depth {\n        \
    \        max_depth = depth\n            }\n        } else if char == ')' {\n \
    \           depth--\n        } else if char == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n", "    var\
    \ max_depth int = 0\n    var current_depth int = 0\n    var result []int = make([]int,\
    \ 0)\n    for _, char := range paren_string {\n        if char == '(' {\n    \
    \        current_depth++\n            if current_depth > max_depth {\n       \
    \         max_depth = current_depth\n            }\n        } else if char ==\
    \ ')' {\n            if current_depth > 0 {\n                current_depth--\n\
    \            }\n            if current_depth == 0 {\n                result =\
    \ append(result, max_depth)\n                max_depth = 0\n            }\n  \
    \      }\n    }\n    return result\n}\n", "    var max_depth int\n    var depth\
    \ int\n    var result []int\n    for _, char := range paren_string {\n       \
    \ if char == '(' {\n            depth += 1\n            if depth > max_depth {\n\
    \                max_depth = depth\n            }\n        } else if char == ')'\
    \ {\n            depth -= 1\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var result []int\n\
    \    var i int\n    for i = 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            curr_depth++\n            if curr_depth > max_depth {\n\
    \                max_depth = curr_depth\n            }\n        } else if paren_string[i]\
    \ == ')' {\n            curr_depth--\n        } else if paren_string[i] == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \            curr_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var max_nesting int = 0\n    var current_nesting\
    \ int = 0\n    var result []int\n    for _, c := range paren_string {\n      \
    \  if c == '(' {\n            current_nesting++\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        } else if c == ')' {\n            current_nesting--\n        } else\
    \ if c == ' ' {\n            result = append(result, max_nesting)\n          \
    \  max_nesting = 0\n            current_nesting = 0\n        }\n    }\n    result\
    \ = append(result, max_nesting)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level--\n        } else if c\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_level []int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level++\n        } else if c == ')' {\n            level--\n        } else\
    \ if c == ' ' {\n            max_level = append(max_level, level)\n          \
    \  level = 0\n        }\n    }\n    max_level = append(max_level, level)\n   \
    \ return max_level\n}\n", "    var result []int\n    var paren_stack []rune\n\
    \    var max_level int\n    var current_level int\n    for _, paren := range paren_string\
    \ {\n        if paren == '(' {\n            paren_stack = append(paren_stack,\
    \ paren)\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if paren == ')' {\n            if len(paren_stack) == 0 {\n                panic(\"\
    Invalid input string\")\n            }\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \            current_level--\n        } else {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            current_level = 0\n     \
    \   }\n    }\n    if len(paren_stack) != 0 {\n        panic(\"Invalid input string\"\
    )\n    }\n    return result\n}\n", "    paren_stack := make([]int, 0)\n    max_stack\
    \ := make([]int, 0)\n    max_stack = append(max_stack, 0)\n    for _, paren :=\
    \ range paren_string {\n        if paren == '(' {\n            paren_stack = append(paren_stack,\
    \ 1)\n            max_stack = append(max_stack, max_stack[len(max_stack)-1]+1)\n\
    \        } else if paren == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \            max_stack = max_stack[:len(max_stack)-1]\n        }\n    }\n    return\
    \ max_stack\n}\n", "    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            current_level += 1\n \
    \           if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var stack []int\n    var max_depth int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            stack = append(stack,\
    \ 0)\n        } else if char == ')' {\n            if len(stack) == 0 {\n    \
    \            result = append(result, max_depth)\n                max_depth = 0\n\
    \            } else {\n                stack = stack[:len(stack)-1]\n        \
    \    }\n        } else if char == ' ' {\n            if len(stack) == 0 {\n  \
    \              result = append(result, max_depth)\n                max_depth =\
    \ 0\n            }\n        } else {\n            if len(stack) > 0 {\n      \
    \          stack[len(stack)-1] += 1\n                if stack[len(stack)-1] >\
    \ max_depth {\n                    max_depth = stack[len(stack)-1]\n         \
    \       }\n            }\n        }\n    }\n    if len(stack) == 0 {\n       \
    \ result = append(result, max_depth)\n    }\n    return result\n}\n", "    var\
    \ max_level int\n    var level int\n    var ret []int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            ret =\
    \ append(ret, max_level)\n            max_level = 0\n            level = 0\n \
    \       }\n    }\n    ret = append(ret, max_level)\n    return ret\n}\n", "  \
    \  var max_nesting_level []int\n    var nesting_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            nesting_level++\n\
    \        } else if char == ')' {\n            max_nesting_level = append(max_nesting_level,\
    \ nesting_level)\n            nesting_level--\n        }\n    }\n    return max_nesting_level\n\
    }\n", "    var max_depth int\n    var depth int\n    var result []int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            depth++\n \
    \           if depth > max_depth {\n                max_depth = depth\n      \
    \      }\n        } else if c == ')' {\n            depth--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    max_nesting := 0\n    current_nesting := 0\n  \
    \  result := make([]int, 0)\n    for _, char := range paren_string {\n       \
    \ if char == '(' {\n            current_nesting += 1\n            if current_nesting\
    \ > max_nesting {\n                max_nesting = current_nesting\n           \
    \ }\n        } else if char == ')' {\n            current_nesting -= 1\n     \
    \   } else if char == ' ' {\n            result = append(result, max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    result = append(result, max_nesting)\n    return result\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_depth\
    \ int\n    var current_depth int\n    var result []int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            current_depth++\n    \
    \        if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if char == ')' {\n            current_depth--\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result = append(result, max_depth)\n    return result\n}\n", "    var max_depth\
    \ int\n    var depth int\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth--\n        } else if char == ' ' {\n           \
    \ result = append(result, max_depth)\n            max_depth = 0\n            depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var depth int\n    var i int\n\n    for i = 0;\
    \ i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n        \
    \    depth++\n        } else if paren_string[i] == ')' {\n            depth--\n\
    \        } else if paren_string[i] == ' ' {\n            result = append(result,\
    \ depth)\n        }\n    }\n    result = append(result, depth)\n    return result\n\
    }\n", "    var max_nesting_levels []int\n    var current_nesting_level int\n \
    \   var max_nesting_level int\n    for _, char := range paren_string {\n     \
    \   if char == '(' {\n            current_nesting_level++\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == ')' {\n            current_nesting_level--\n\
    \        } else if char == ' ' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ max_nesting_level)\n            max_nesting_level = 0\n            current_nesting_level\
    \ = 0\n        }\n    }\n    max_nesting_levels = append(max_nesting_levels, max_nesting_level)\n\
    \    return max_nesting_levels\n}\n", "    var max_nesting []int\n    var current_nesting\
    \ int\n    var current_char byte\n    for i := 0; i < len(paren_string); i++ {\n\
    \        current_char = paren_string[i]\n        if current_char == '(' {\n  \
    \          current_nesting++\n        } else if current_char == ')' {\n      \
    \      current_nesting--\n        } else if current_char == ' ' {\n          \
    \  max_nesting = append(max_nesting, current_nesting)\n            current_nesting\
    \ = 0\n        }\n    }\n    return max_nesting\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_depth []int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n        } else if char == ')' {\n            depth -= 1\n\
    \        } else if char == ' ' {\n            max_depth = append(max_depth, depth)\n\
    \            depth = 0\n        }\n    }\n    return max_depth\n}\n", "    var\
    \ stack []int\n    var result []int\n    for _, c := range paren_string {\n  \
    \      if c == '(' {\n            stack = append(stack, 1)\n        } else if\
    \ c == ')' {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        } else if c == ' ' {\n            result = append(result,\
    \ len(stack))\n        }\n    }\n    return result\n}\n", "    var max_depth int\n\
    \    var depth int\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depth -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var current_level int = 0\n    var max_level int\
    \ = 0\n    var max_levels []int\n    var i int = 0\n    var paren_group string\n\
    \    var paren_groups []string\n    var paren_groups_len int\n    var paren_group_len\
    \ int\n\n    for i < len(paren_string) {\n        if paren_string[i] == ' ' {\n\
    \            paren_groups = append(paren_groups, paren_group)\n            paren_group\
    \ = \"\"\n        } else {\n            paren_group += string(paren_string[i])\n\
    \        }\n        i++\n    }\n    paren_groups = append(paren_groups, paren_group)\n\
    \    paren_groups_len = len(paren_groups)\n\n    for i = 0; i < paren_groups_len;\
    \ i++ {\n        paren_group = paren_groups[i]\n        paren_group_len = len(paren_group)\n\
    \        for j := 0; j < paren_group_len; j++ {\n            if paren_group[j]\
    \ == '(' {\n                current_level++\n                if current_level\
    \ > max_level {\n                    max_level = current_level\n             \
    \   }\n            } else if paren_group[j] == ')' {\n                current_level--\n\
    \            }\n        }\n        max_levels = append(max_levels, max_level)\n\
    \        max_level = 0\n        current_level = 0\n    }\n    return max_levels\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var depth int = 0\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth++\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if char == ')' {\n            depth--\n       \
    \ } else if char == ' ' {\n            result = append(result, max_depth)\n  \
    \          max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\n\
    \    var depth int\n    var result []int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n            if depth >\
    \ max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == ')' {\n            depth -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var paren_stack []int\n \
    \   var max_level int\n    var current_level int\n    var paren_char byte\n\n\
    \    for i := 0; i < len(paren_string); i++ {\n        paren_char = paren_string[i]\n\
    \        if paren_char == '(' {\n            paren_stack = append(paren_stack,\
    \ 1)\n            current_level++\n            if current_level > max_level {\n\
    \                max_level = current_level\n            }\n        } else if paren_char\
    \ == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n     \
    \       current_level--\n        } else if paren_char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var curr_depth int = 0\n    var depths []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   curr_depth++\n            if curr_depth > max_depth {\n                max_depth\
    \ = curr_depth\n            }\n        } else if char == ')' {\n            depths\
    \ = append(depths, max_depth)\n            curr_depth--\n        }\n    }\n  \
    \  return depths\n}\n", "    var max_depth int = 0\n    var depth int = 0\n  \
    \  var result []int = []int{}\n    for _, char := range paren_string {\n     \
    \   if char == '(' {\n            depth += 1\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if char\
    \ == ')' {\n            depth -= 1\n        } else if char == ' ' {\n        \
    \    result = append(result, max_depth)\n            max_depth = 0\n         \
    \   depth = 0\n        }\n    }\n    result = append(result, max_depth)\n    return\
    \ result\n}\n", "    var max_nesting_level int = 0\n    var current_nesting_level\
    \ int = 0\n    var result []int = make([]int, 0)\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_nesting_level++\n         \
    \   if current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level\n            }\n        } else if char == ')' {\n  \
    \          current_nesting_level--\n        } else if char == ' ' {\n        \
    \    result = append(result, max_nesting_level)\n            max_nesting_level\
    \ = 0\n            current_nesting_level = 0\n        }\n    }\n    result = append(result,\
    \ max_nesting_level)\n    return result\n}\n", "    var max_nesting_levels []int\n\
    \    var current_nesting_level int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            current_nesting_level++\n        } else\
    \ if char == ')' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ current_nesting_level)\n            current_nesting_level--\n        }\n   \
    \ }\n    return max_nesting_levels\n}\n", "    max_depth := 0\n    curr_depth\
    \ := 0\n    depths := []int{}\n    for _, char := range paren_string {\n     \
    \   if char == '(' {\n            curr_depth += 1\n            if curr_depth >\
    \ max_depth {\n                max_depth = curr_depth\n            }\n       \
    \ } else if char == ')' {\n            depths = append(depths, max_depth)\n  \
    \          curr_depth -= 1\n        }\n    }\n    return depths\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            current_level++\n        } else if char\
    \ == ')' {\n            result = append(result, current_level)\n            current_level--\n\
    \        }\n    }\n    return result\n}\n", "    var max_depth int = 0\n    var\
    \ depth int = 0\n    var result []int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if c ==\
    \ ')' {\n            depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var current_depth int = 0\n    var result\
    \ []int\n    for _, char := range paren_string {\n        if char == '(' {\n \
    \           current_depth += 1\n            if current_depth > max_depth {\n \
    \               max_depth = current_depth\n            }\n        } else if char\
    \ == ')' {\n            if current_depth == 0 {\n                result = append(result,\
    \ -1)\n            } else {\n                current_depth -= 1\n            \
    \    if current_depth == 0 {\n                    result = append(result, max_depth)\n\
    \                    max_depth = 0\n                }\n            }\n       \
    \ }\n    }\n    return result\n}\n", "    var max_level int\n    var level int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            level++\n            if level > max_level {\n        \
    \        max_level = level\n            }\n        } else if char == ')' {\n \
    \           level--\n        } else if char == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_nesting_level int = 0\n    var current_nesting_level int = 0\n    var result\
    \ []int = make([]int, 0)\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_nesting_level++\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == ')' {\n            current_nesting_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    result = append(result, max_nesting_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var depth int = 0\n    var result []int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_nesting_levels\
    \ []int\n    var current_nesting_level int = 0\n    var max_nesting_level int\
    \ = 0\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting_level++\n            if current_nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = current_nesting_level\n            }\n\
    \        } else if char == ')' {\n            current_nesting_level--\n      \
    \  } else if char == ' ' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ max_nesting_level)\n            max_nesting_level = 0\n            current_nesting_level\
    \ = 0\n        }\n    }\n    max_nesting_levels = append(max_nesting_levels, max_nesting_level)\n\
    \    return max_nesting_levels\n}\n", "    var max_depth int\n    var depth int\n\
    \    var result []int\n    for _, char := range paren_string {\n        switch\
    \ char {\n        case '(':\n            depth++\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        case ')':\n   \
    \         depth--\n        case ' ':\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_level int\n\
    \    var level int\n    var result []int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_depth int = 0\n    var current_depth int = 0\n    var result\
    \ []int\n    for _, c := range paren_string {\n        if c == '(' {\n       \
    \     current_depth++\n            if current_depth > max_depth {\n          \
    \      max_depth = current_depth\n            }\n        } else if c == ')' {\n\
    \            current_depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var max_level int\n    var level int\n    var result []int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            level++\n\
    \            if level > max_level {\n                max_level = level\n     \
    \       }\n        } else if char == ')' {\n            level--\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   max_level = 0\n            level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            level++\n\
    \        } else if c == ')' {\n            level--\n        } else if c == ' '\
    \ {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n", "    var max_depth []int\n    var depth int\n    var i int\n \
    \   for i = 0; i < len(paren_string); i++ {\n        if paren_string[i] == '('\
    \ {\n            depth++\n        } else if paren_string[i] == ')' {\n       \
    \     depth--\n        } else if paren_string[i] == ' ' {\n            max_depth\
    \ = append(max_depth, depth)\n            depth = 0\n        }\n    }\n    max_depth\
    \ = append(max_depth, depth)\n    return max_depth\n}\n", "    var max_nesting_levels\
    \ []int\n    var nesting_level int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            nesting_level += 1\n        } else if char\
    \ == ')' {\n            nesting_level -= 1\n        } else if char == ' ' {\n\
    \            max_nesting_levels = append(max_nesting_levels, nesting_level)\n\
    \            nesting_level = 0\n        }\n    }\n    return max_nesting_levels\n\
    }\n", "    var max_depth int\n    var depth int\n    var result []int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            depth++\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            depth--\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var max_level int\n    var level int\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            level++\n            if level > max_level {\n        \
    \        max_level = level\n            }\n        } else if char == ')' {\n \
    \           level--\n        } else if char == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ result []int\n    var max_level int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n            if level\
    \ > max_level {\n                max_level = level\n            }\n        } else\
    \ if c == ')' {\n            level--\n        } else if c == ' ' {\n         \
    \   result = append(result, max_level)\n            max_level = 0\n          \
    \  level = 0\n        }\n    }\n    result = append(result, max_level)\n    return\
    \ result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
