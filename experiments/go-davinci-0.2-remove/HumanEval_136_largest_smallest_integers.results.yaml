language: go_test.go
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    a = 0\n    b = 0\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if v > a {\n                a = v\n            }\n\
    \        } else {\n            if v < b || b == 0 {\n                b = v\n \
    \           }\n        }\n    }\n    if a == 0 {\n        a = nil\n    }\n   \
    \ if b == 0 {\n        b = nil\n    }\n    return []interface{}{a, b}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmjx_dhq7_test.go:29:13: cannot use nil as int value in assignment

    /tmp/tmpmjx_dhq7_test.go:32:13: cannot use nil as int value in assignment

    /tmp/tmpmjx_dhq7_test.go:44:76: undefined: None

    /tmp/tmpmjx_dhq7_test.go:45:79: undefined: None

    /tmp/tmpmjx_dhq7_test.go:49:60: undefined: None

    /tmp/tmpmjx_dhq7_test.go:50:61: undefined: None

    /tmp/tmpmjx_dhq7_test.go:51:78: undefined: None

    /tmp/tmpmjx_dhq7_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, i := range lst {\n    \
    \    if i < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = i\n                largestNegativeFound = true\n            } else if i >\
    \ largestNegative {\n                largestNegative = i\n            }\n    \
    \    } else if i > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = i\n                smallestPositiveFound = true\n    \
    \        } else if i < smallestPositive {\n                smallestPositive =\
    \ i\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm07u7xb1_test.go:53:76: undefined: None

    /tmp/tmpm07u7xb1_test.go:54:79: undefined: None

    /tmp/tmpm07u7xb1_test.go:58:60: undefined: None

    /tmp/tmpm07u7xb1_test.go:59:61: undefined: None

    /tmp/tmpm07u7xb1_test.go:60:78: undefined: None

    /tmp/tmpm07u7xb1_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_found\
    \ bool\n    var smallest_positive_found bool\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largest_negative_found {\n                largest_negative\
    \ = v\n                largest_negative_found = true\n            } else if v\
    \ > largest_negative {\n                largest_negative = v\n            }\n\
    \        } else if v > 0 {\n            if !smallest_positive_found {\n      \
    \          smallest_positive = v\n                smallest_positive_found = true\n\
    \            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if largest_negative_found && smallest_positive_found\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_found {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_found {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjh5f99fu_test.go:53:76: undefined: None

    /tmp/tmpjh5f99fu_test.go:54:79: undefined: None

    /tmp/tmpjh5f99fu_test.go:58:60: undefined: None

    /tmp/tmpjh5f99fu_test.go:59:61: undefined: None

    /tmp/tmpjh5f99fu_test.go:60:78: undefined: None

    /tmp/tmpjh5f99fu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4azqz4y_test.go:49:76: undefined: None

    /tmp/tmpj4azqz4y_test.go:50:79: undefined: None

    /tmp/tmpj4azqz4y_test.go:54:60: undefined: None

    /tmp/tmpj4azqz4y_test.go:55:61: undefined: None

    /tmp/tmpj4azqz4y_test.go:56:78: undefined: None

    /tmp/tmpj4azqz4y_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if !a_set {\n                a = v\n        \
    \        a_set = true\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if !b_set {\n         \
    \       b = v\n                b_set = true\n            } else if v < b {\n \
    \               b = v\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68g2oax3_test.go:49:76: undefined: None

    /tmp/tmp68g2oax3_test.go:50:79: undefined: None

    /tmp/tmp68g2oax3_test.go:54:60: undefined: None

    /tmp/tmp68g2oax3_test.go:55:61: undefined: None

    /tmp/tmp68g2oax3_test.go:56:78: undefined: None

    /tmp/tmp68g2oax3_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, num := range lst {\n    \
    \    if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeuqiylbe_test.go:53:76: undefined: None

    /tmp/tmpeuqiylbe_test.go:54:79: undefined: None

    /tmp/tmpeuqiylbe_test.go:58:60: undefined: None

    /tmp/tmpeuqiylbe_test.go:59:61: undefined: None

    /tmp/tmpeuqiylbe_test.go:60:78: undefined: None

    /tmp/tmpeuqiylbe_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, element := range lst {\n\
    \        if element < 0 {\n            if largestNegativeExists {\n          \
    \      if element > largestNegative {\n                    largestNegative = element\n\
    \                }\n            } else {\n                largestNegative = element\n\
    \                largestNegativeExists = true\n            }\n        } else {\n\
    \            if smallestPositiveExists {\n                if element < smallestPositive\
    \ {\n                    smallestPositive = element\n                }\n     \
    \       } else {\n                smallestPositive = element\n               \
    \ smallestPositiveExists = true\n            }\n        }\n    }\n    if largestNegativeExists\
    \ && smallestPositiveExists {\n        return []interface{}{largestNegative, smallestPositive}\n\
    \    } else if largestNegativeExists {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveExists {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdaawteyt_test.go:57:76: undefined: None

    /tmp/tmpdaawteyt_test.go:58:79: undefined: None

    /tmp/tmpdaawteyt_test.go:62:60: undefined: None

    /tmp/tmpdaawteyt_test.go:63:61: undefined: None

    /tmp/tmpdaawteyt_test.go:64:78: undefined: None

    /tmp/tmpdaawteyt_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if largestNegativeExists {\n                if v\
    \ > largestNegative {\n                    largestNegative = v\n             \
    \   }\n            } else {\n                largestNegative = v\n           \
    \     largestNegativeExists = true\n            }\n        } else {\n        \
    \    if smallestPositiveExists {\n                if v < smallestPositive {\n\
    \                    smallestPositive = v\n                }\n            } else\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n    if largestNegativeExists && smallestPositiveExists\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeExists {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveExists {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxupxlftv_test.go:57:76: undefined: None

    /tmp/tmpxupxlftv_test.go:58:79: undefined: None

    /tmp/tmpxupxlftv_test.go:62:60: undefined: None

    /tmp/tmpxupxlftv_test.go:63:61: undefined: None

    /tmp/tmpxupxlftv_test.go:64:78: undefined: None

    /tmp/tmpxupxlftv_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if !largestNegativeFound {\n       \
    \ largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1g4jlf8q_test.go:51:76: undefined: None

    /tmp/tmp1g4jlf8q_test.go:52:79: undefined: None

    /tmp/tmp1g4jlf8q_test.go:56:60: undefined: None

    /tmp/tmp1g4jlf8q_test.go:57:61: undefined: None

    /tmp/tmp1g4jlf8q_test.go:58:78: undefined: None

    /tmp/tmp1g4jlf8q_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if !a_set {\n                a = v\n        \
    \        a_set = true\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if !b_set {\n         \
    \       b = v\n                b_set = true\n            } else if v < b {\n \
    \               b = v\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68g2oax3_test.go:49:76: undefined: None

    /tmp/tmp68g2oax3_test.go:50:79: undefined: None

    /tmp/tmp68g2oax3_test.go:54:60: undefined: None

    /tmp/tmp68g2oax3_test.go:55:61: undefined: None

    /tmp/tmp68g2oax3_test.go:56:78: undefined: None

    /tmp/tmp68g2oax3_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeFound == false {\n            \
    \    largestNegative = v\n                largestNegativeFound = true\n      \
    \      } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeFound == false {\n\
    \        largestNegative = nil\n    }\n    if smallestPositiveFound == false {\n\
    \        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6lur55_c_test.go:36:27: cannot use nil as int value in assignment

    /tmp/tmp6lur55_c_test.go:39:28: cannot use nil as int value in assignment

    /tmp/tmp6lur55_c_test.go:51:76: undefined: None

    /tmp/tmp6lur55_c_test.go:52:79: undefined: None

    /tmp/tmp6lur55_c_test.go:56:60: undefined: None

    /tmp/tmp6lur55_c_test.go:57:61: undefined: None

    /tmp/tmp6lur55_c_test.go:58:78: undefined: None

    /tmp/tmp6lur55_c_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, n := range lst {\n        if n < 0 {\n\
    \            if !largestNegativeSet || n > largestNegative {\n               \
    \ largestNegative = n\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || n < smallestPositive\
    \ {\n                smallestPositive = n\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpni5l2rl4_test.go:49:76: undefined: None

    /tmp/tmpni5l2rl4_test.go:50:79: undefined: None

    /tmp/tmpni5l2rl4_test.go:54:60: undefined: None

    /tmp/tmpni5l2rl4_test.go:55:61: undefined: None

    /tmp/tmpni5l2rl4_test.go:56:78: undefined: None

    /tmp/tmpni5l2rl4_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if largestNegativeSet {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeSet\
    \ = true\n            }\n        } else {\n            if smallestPositiveSet\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqzshbcs_test.go:57:76: undefined: None

    /tmp/tmpdqzshbcs_test.go:58:79: undefined: None

    /tmp/tmpdqzshbcs_test.go:62:60: undefined: None

    /tmp/tmpdqzshbcs_test.go:63:61: undefined: None

    /tmp/tmpdqzshbcs_test.go:64:78: undefined: None

    /tmp/tmpdqzshbcs_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if largestNegativeExists == false {\n          \
    \      largestNegative = v\n                largestNegativeExists = true\n   \
    \         } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveExists\
    \ == false {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeExists == false\
    \ {\n        largestNegative = nil\n    }\n    if smallestPositiveExists == false\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmperikba0r_test.go:36:27: cannot use nil as int value in assignment

    /tmp/tmperikba0r_test.go:39:28: cannot use nil as int value in assignment

    /tmp/tmperikba0r_test.go:51:76: undefined: None

    /tmp/tmperikba0r_test.go:52:79: undefined: None

    /tmp/tmperikba0r_test.go:56:60: undefined: None

    /tmp/tmperikba0r_test.go:57:61: undefined: None

    /tmp/tmperikba0r_test.go:58:78: undefined: None

    /tmp/tmperikba0r_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, num := range lst {\n    \
    \    if num < 0 {\n            if largestNegativeSet {\n                if num\
    \ > largestNegative {\n                    largestNegative = num\n           \
    \     }\n            } else {\n                largestNegative = num\n       \
    \         largestNegativeSet = true\n            }\n        } else {\n       \
    \     if smallestPositiveSet {\n                if num < smallestPositive {\n\
    \                    smallestPositive = num\n                }\n            }\
    \ else {\n                smallestPositive = num\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzlsd4fs8_test.go:57:76: undefined: None

    /tmp/tmpzlsd4fs8_test.go:58:79: undefined: None

    /tmp/tmpzlsd4fs8_test.go:62:60: undefined: None

    /tmp/tmpzlsd4fs8_test.go:63:61: undefined: None

    /tmp/tmpzlsd4fs8_test.go:64:78: undefined: None

    /tmp/tmpzlsd4fs8_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeFound == false {\n            \
    \    largestNegative = v\n                largestNegativeFound = true\n      \
    \      } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeFound == false {\n\
    \        largestNegative = 0\n    }\n    if smallestPositiveFound == false {\n\
    \        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe4u9r_ju_test.go:51:76: undefined: None

    /tmp/tmpe4u9r_ju_test.go:52:79: undefined: None

    /tmp/tmpe4u9r_ju_test.go:56:60: undefined: None

    /tmp/tmpe4u9r_ju_test.go:57:61: undefined: None

    /tmp/tmpe4u9r_ju_test.go:58:78: undefined: None

    /tmp/tmpe4u9r_ju_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeSet || i > largestNegative {\n               \
    \ largestNegative = i\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || i < smallestPositive\
    \ {\n                smallestPositive = i\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpny63o5g8_test.go:51:76: undefined: None

    /tmp/tmpny63o5g8_test.go:52:79: undefined: None

    /tmp/tmpny63o5g8_test.go:56:60: undefined: None

    /tmp/tmpny63o5g8_test.go:57:61: undefined: None

    /tmp/tmpny63o5g8_test.go:58:78: undefined: None

    /tmp/tmpny63o5g8_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = i\n\
    \                largest_negative_set = true\n            } else if i > largest_negative\
    \ {\n                largest_negative = i\n            }\n        } else if i\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = i\n                smallest_positive_set = true\n            } else if i <\
    \ smallest_positive {\n                smallest_positive = i\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpulfd0low_test.go:51:76: undefined: None

    /tmp/tmpulfd0low_test.go:52:79: undefined: None

    /tmp/tmpulfd0low_test.go:56:60: undefined: None

    /tmp/tmpulfd0low_test.go:57:61: undefined: None

    /tmp/tmpulfd0low_test.go:58:78: undefined: None

    /tmp/tmpulfd0low_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4azqz4y_test.go:49:76: undefined: None

    /tmp/tmpj4azqz4y_test.go:50:79: undefined: None

    /tmp/tmpj4azqz4y_test.go:54:60: undefined: None

    /tmp/tmpj4azqz4y_test.go:55:61: undefined: None

    /tmp/tmpj4azqz4y_test.go:56:78: undefined: None

    /tmp/tmpj4azqz4y_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largest_negative_set {\n                largest_negative\
    \ = v\n                largest_negative_set = true\n            } else if v >\
    \ largest_negative {\n                largest_negative = v\n            }\n  \
    \      } else if v > 0 {\n            if !smallest_positive_set {\n          \
    \      smallest_positive = v\n                smallest_positive_set = true\n \
    \           } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n\n    if largest_negative_set && smallest_positive_set\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_set {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_set {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx4wchf1s_test.go:53:76: undefined: None

    /tmp/tmpx4wchf1s_test.go:54:79: undefined: None

    /tmp/tmpx4wchf1s_test.go:58:60: undefined: None

    /tmp/tmpx4wchf1s_test.go:59:61: undefined: None

    /tmp/tmpx4wchf1s_test.go:60:78: undefined: None

    /tmp/tmpx4wchf1s_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kd7hqm5_test.go:34:27: cannot use nil as int value in assignment

    /tmp/tmp6kd7hqm5_test.go:37:28: cannot use nil as int value in assignment

    /tmp/tmp6kd7hqm5_test.go:49:76: undefined: None

    /tmp/tmp6kd7hqm5_test.go:50:79: undefined: None

    /tmp/tmp6kd7hqm5_test.go:54:60: undefined: None

    /tmp/tmp6kd7hqm5_test.go:55:61: undefined: None

    /tmp/tmp6kd7hqm5_test.go:56:78: undefined: None

    /tmp/tmp6kd7hqm5_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if largestNegativeExists {\n                if v\
    \ > largestNegative {\n                    largestNegative = v\n             \
    \   }\n            } else {\n                largestNegative = v\n           \
    \     largestNegativeExists = true\n            }\n        } else {\n        \
    \    if smallestPositiveExists {\n                if v < smallestPositive {\n\
    \                    smallestPositive = v\n                }\n            } else\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n    if largestNegativeExists && smallestPositiveExists\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeExists {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveExists {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxupxlftv_test.go:57:76: undefined: None

    /tmp/tmpxupxlftv_test.go:58:79: undefined: None

    /tmp/tmpxupxlftv_test.go:62:60: undefined: None

    /tmp/tmpxupxlftv_test.go:63:61: undefined: None

    /tmp/tmpxupxlftv_test.go:64:78: undefined: None

    /tmp/tmpxupxlftv_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var smallest, largest int\n    var smallest_set, largest_set bool\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largest_set {\n\
    \                largest = v\n                largest_set = true\n           \
    \ } else if v > largest {\n                largest = v\n            }\n      \
    \  } else {\n            if !smallest_set {\n                smallest = v\n  \
    \              smallest_set = true\n            } else if v < smallest {\n   \
    \             smallest = v\n            }\n        }\n    }\n    if largest_set\
    \ && smallest_set {\n        return []interface{}{largest, smallest}\n    } else\
    \ if largest_set {\n        return []interface{}{largest, nil}\n    } else if\
    \ smallest_set {\n        return []interface{}{nil, smallest}\n    } else {\n\
    \        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsj2ob7jm_test.go:51:76: undefined: None

    /tmp/tmpsj2ob7jm_test.go:52:79: undefined: None

    /tmp/tmpsj2ob7jm_test.go:56:60: undefined: None

    /tmp/tmpsj2ob7jm_test.go:57:61: undefined: None

    /tmp/tmpsj2ob7jm_test.go:58:78: undefined: None

    /tmp/tmpsj2ob7jm_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_set\
    \ bool\n    var smallest_positive_set bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largest_negative_set {\n                largest_negative\
    \ = v\n                largest_negative_set = true\n            } else if v >\
    \ largest_negative {\n                largest_negative = v\n            }\n  \
    \      } else if v > 0 {\n            if !smallest_positive_set {\n          \
    \      smallest_positive = v\n                smallest_positive_set = true\n \
    \           } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if largest_negative_set && smallest_positive_set\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_set {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_set {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1p0dieof_test.go:53:76: undefined: None

    /tmp/tmp1p0dieof_test.go:54:79: undefined: None

    /tmp/tmp1p0dieof_test.go:58:60: undefined: None

    /tmp/tmp1p0dieof_test.go:59:61: undefined: None

    /tmp/tmp1p0dieof_test.go:60:78: undefined: None

    /tmp/tmp1p0dieof_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, num := range lst {\n    \
    \    if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeuqiylbe_test.go:53:76: undefined: None

    /tmp/tmpeuqiylbe_test.go:54:79: undefined: None

    /tmp/tmpeuqiylbe_test.go:58:60: undefined: None

    /tmp/tmpeuqiylbe_test.go:59:61: undefined: None

    /tmp/tmpeuqiylbe_test.go:60:78: undefined: None

    /tmp/tmpeuqiylbe_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_set\
    \ bool\n    var smallest_positive_set bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largest_negative_set {\n                if v >\
    \ largest_negative {\n                    largest_negative = v\n             \
    \   }\n            } else {\n                largest_negative = v\n          \
    \      largest_negative_set = true\n            }\n        } else {\n        \
    \    if smallest_positive_set {\n                if v < smallest_positive {\n\
    \                    smallest_positive = v\n                }\n            } else\
    \ {\n                smallest_positive = v\n                smallest_positive_set\
    \ = true\n            }\n        }\n    }\n    if largest_negative_set && smallest_positive_set\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_set {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_set {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w19l5up_test.go:57:76: undefined: None

    /tmp/tmp2w19l5up_test.go:58:79: undefined: None

    /tmp/tmp2w19l5up_test.go:62:60: undefined: None

    /tmp/tmp2w19l5up_test.go:63:61: undefined: None

    /tmp/tmp2w19l5up_test.go:64:78: undefined: None

    /tmp/tmp2w19l5up_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    a = 0\n    b = 0\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if v > a {\n                a = v\n            }\n\
    \        } else {\n            if v < b || b == 0 {\n                b = v\n \
    \           }\n        }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpverqdpqu_test.go:41:76: undefined: None

    /tmp/tmpverqdpqu_test.go:42:79: undefined: None

    /tmp/tmpverqdpqu_test.go:46:60: undefined: None

    /tmp/tmpverqdpqu_test.go:47:61: undefined: None

    /tmp/tmpverqdpqu_test.go:48:78: undefined: None

    /tmp/tmpverqdpqu_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative_int, smallest_positive_int int\n    var largest_negative_int_exists,\
    \ smallest_positive_int_exists bool\n    for _, i := range lst {\n        if i\
    \ < 0 {\n            if !largest_negative_int_exists {\n                largest_negative_int\
    \ = i\n                largest_negative_int_exists = true\n            } else\
    \ if i > largest_negative_int {\n                largest_negative_int = i\n  \
    \          }\n        } else if i > 0 {\n            if !smallest_positive_int_exists\
    \ {\n                smallest_positive_int = i\n                smallest_positive_int_exists\
    \ = true\n            } else if i < smallest_positive_int {\n                smallest_positive_int\
    \ = i\n            }\n        }\n    }\n    if largest_negative_int_exists &&\
    \ smallest_positive_int_exists {\n        return []interface{}{largest_negative_int,\
    \ smallest_positive_int}\n    } else if largest_negative_int_exists {\n      \
    \  return []interface{}{largest_negative_int, nil}\n    } else if smallest_positive_int_exists\
    \ {\n        return []interface{}{nil, smallest_positive_int}\n    } else {\n\
    \        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ll0wi3f_test.go:51:76: undefined: None

    /tmp/tmp5ll0wi3f_test.go:52:79: undefined: None

    /tmp/tmp5ll0wi3f_test.go:56:60: undefined: None

    /tmp/tmp5ll0wi3f_test.go:57:61: undefined: None

    /tmp/tmp5ll0wi3f_test.go:58:78: undefined: None

    /tmp/tmp5ll0wi3f_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcyqnitgb_test.go:49:76: undefined: None

    /tmp/tmpcyqnitgb_test.go:50:79: undefined: None

    /tmp/tmpcyqnitgb_test.go:54:60: undefined: None

    /tmp/tmpcyqnitgb_test.go:55:61: undefined: None

    /tmp/tmpcyqnitgb_test.go:56:78: undefined: None

    /tmp/tmpcyqnitgb_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, value := range lst {\n\
    \        if value < 0 {\n            if !largestNegativeFound {\n            \
    \    largestNegative = value\n                largestNegativeFound = true\n  \
    \          } else if value > largestNegative {\n                largestNegative\
    \ = value\n            }\n        } else if value > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9yo0chph_test.go:53:76: undefined: None

    /tmp/tmp9yo0chph_test.go:54:79: undefined: None

    /tmp/tmp9yo0chph_test.go:58:60: undefined: None

    /tmp/tmp9yo0chph_test.go:59:61: undefined: None

    /tmp/tmp9yo0chph_test.go:60:78: undefined: None

    /tmp/tmp9yo0chph_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, num := range lst {\n  \
    \      if num < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = num\n                largestNegativeFound = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = num\n                smallestPositiveFound = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoo36i7cm_test.go:53:76: undefined: None

    /tmp/tmpoo36i7cm_test.go:54:79: undefined: None

    /tmp/tmpoo36i7cm_test.go:58:60: undefined: None

    /tmp/tmpoo36i7cm_test.go:59:61: undefined: None

    /tmp/tmpoo36i7cm_test.go:60:78: undefined: None

    /tmp/tmpoo36i7cm_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    a = 0\n    b = 0\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if v > a {\n                a = v\n            }\n\
    \        } else {\n            if v < b || b == 0 {\n                b = v\n \
    \           }\n        }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpverqdpqu_test.go:41:76: undefined: None

    /tmp/tmpverqdpqu_test.go:42:79: undefined: None

    /tmp/tmpverqdpqu_test.go:46:60: undefined: None

    /tmp/tmpverqdpqu_test.go:47:61: undefined: None

    /tmp/tmpverqdpqu_test.go:48:78: undefined: None

    /tmp/tmpverqdpqu_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int = 0\n    var smallestPositive int = 0\n    var\
    \ largestNegativeFound bool = false\n    var smallestPositiveFound bool = false\n\
    \    for _, num := range lst {\n        if num < 0 {\n            if largestNegativeFound\
    \ {\n                if num > largestNegative {\n                    largestNegative\
    \ = num\n                }\n            } else {\n                largestNegative\
    \ = num\n                largestNegativeFound = true\n            }\n        }\
    \ else if num > 0 {\n            if smallestPositiveFound {\n                if\
    \ num < smallestPositive {\n                    smallestPositive = num\n     \
    \           }\n            } else {\n                smallestPositive = num\n\
    \                smallestPositiveFound = true\n            }\n        }\n    }\n\
    \    if largestNegativeFound {\n        if smallestPositiveFound {\n         \
    \   return []interface{}{largestNegative, smallestPositive}\n        } else {\n\
    \            return []interface{}{largestNegative, nil}\n        }\n    } else\
    \ {\n        if smallestPositiveFound {\n            return []interface{}{nil,\
    \ smallestPositive}\n        } else {\n            return []interface{}{nil, nil}\n\
    \        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n \
    \ candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmyoyksl_test.go:61:76: undefined: None

    /tmp/tmprmyoyksl_test.go:62:79: undefined: None

    /tmp/tmprmyoyksl_test.go:66:60: undefined: None

    /tmp/tmprmyoyksl_test.go:67:61: undefined: None

    /tmp/tmprmyoyksl_test.go:68:78: undefined: None

    /tmp/tmprmyoyksl_test.go:69:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_found\
    \ bool\n    var smallest_positive_found bool\n    for _, v := range lst {\n  \
    \      if v < 0 {\n            if !largest_negative_found {\n                largest_negative\
    \ = v\n                largest_negative_found = true\n            } else if v\
    \ > largest_negative {\n                largest_negative = v\n            }\n\
    \        } else if v > 0 {\n            if !smallest_positive_found {\n      \
    \          smallest_positive = v\n                smallest_positive_found = true\n\
    \            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if largest_negative_found && smallest_positive_found\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_found {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_found {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjh5f99fu_test.go:53:76: undefined: None

    /tmp/tmpjh5f99fu_test.go:54:79: undefined: None

    /tmp/tmpjh5f99fu_test.go:58:60: undefined: None

    /tmp/tmpjh5f99fu_test.go:59:61: undefined: None

    /tmp/tmpjh5f99fu_test.go:60:78: undefined: None

    /tmp/tmpjh5f99fu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, num := range lst {\n    \
    \    if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeuqiylbe_test.go:53:76: undefined: None

    /tmp/tmpeuqiylbe_test.go:54:79: undefined: None

    /tmp/tmpeuqiylbe_test.go:58:60: undefined: None

    /tmp/tmpeuqiylbe_test.go:59:61: undefined: None

    /tmp/tmpeuqiylbe_test.go:60:78: undefined: None

    /tmp/tmpeuqiylbe_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if largestNegativeSet {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeSet\
    \ = true\n            }\n        } else {\n            if smallestPositiveSet\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdqzshbcs_test.go:57:76: undefined: None

    /tmp/tmpdqzshbcs_test.go:58:79: undefined: None

    /tmp/tmpdqzshbcs_test.go:62:60: undefined: None

    /tmp/tmpdqzshbcs_test.go:63:61: undefined: None

    /tmp/tmpdqzshbcs_test.go:64:78: undefined: None

    /tmp/tmpdqzshbcs_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var hasNegative, hasPositive\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !hasNegative\
    \ || v > largestNegative {\n                largestNegative = v\n            }\n\
    \            hasNegative = true\n        } else {\n            if !hasPositive\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \  }\n            hasPositive = true\n        }\n    }\n    if !hasNegative {\n\
    \        largestNegative = 0\n    }\n    if !hasPositive {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wonu2bs_test.go:45:76: undefined: None

    /tmp/tmp8wonu2bs_test.go:46:79: undefined: None

    /tmp/tmp8wonu2bs_test.go:50:60: undefined: None

    /tmp/tmp8wonu2bs_test.go:51:61: undefined: None

    /tmp/tmp8wonu2bs_test.go:52:78: undefined: None

    /tmp/tmp8wonu2bs_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeFound == false {\n            \
    \    largestNegative = v\n                largestNegativeFound = true\n      \
    \      } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeFound == false {\n\
    \        largestNegative = nil\n    }\n    if smallestPositiveFound == false {\n\
    \        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6lur55_c_test.go:36:27: cannot use nil as int value in assignment

    /tmp/tmp6lur55_c_test.go:39:28: cannot use nil as int value in assignment

    /tmp/tmp6lur55_c_test.go:51:76: undefined: None

    /tmp/tmp6lur55_c_test.go:52:79: undefined: None

    /tmp/tmp6lur55_c_test.go:56:60: undefined: None

    /tmp/tmp6lur55_c_test.go:57:61: undefined: None

    /tmp/tmp6lur55_c_test.go:58:78: undefined: None

    /tmp/tmp6lur55_c_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var hasNegative\
    \ bool\n    var hasPositive bool\n    for _, v := range lst {\n        if v <\
    \ 0 {\n            if !hasNegative {\n                largestNegative = v\n  \
    \              hasNegative = true\n            } else if v > largestNegative {\n\
    \                largestNegative = v\n            }\n        } else if v > 0 {\n\
    \            if !hasPositive {\n                smallestPositive = v\n       \
    \         hasPositive = true\n            } else if v < smallestPositive {\n \
    \               smallestPositive = v\n            }\n        }\n    }\n    if\
    \ hasNegative && hasPositive {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if hasNegative {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if hasPositive {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasfl4i3u_test.go:53:76: undefined: None

    /tmp/tmpasfl4i3u_test.go:54:79: undefined: None

    /tmp/tmpasfl4i3u_test.go:58:60: undefined: None

    /tmp/tmpasfl4i3u_test.go:59:61: undefined: None

    /tmp/tmpasfl4i3u_test.go:60:78: undefined: None

    /tmp/tmpasfl4i3u_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, num := range lst {\n        if num <\
    \ 0 && !largestNegativeSet {\n            largestNegative = num\n            largestNegativeSet\
    \ = true\n        } else if num < 0 && num > largestNegative {\n            largestNegative\
    \ = num\n        }\n\n        if num > 0 && !smallestPositiveSet {\n         \
    \   smallestPositive = num\n            smallestPositiveSet = true\n        }\
    \ else if num > 0 && num < smallestPositive {\n            smallestPositive =\
    \ num\n        }\n    }\n\n    if largestNegativeSet && smallestPositiveSet {\n\
    \        return []interface{}{largestNegative, smallestPositive}\n    } else if\
    \ largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n \
    \   } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0yb8ugu_test.go:51:76: undefined: None

    /tmp/tmpm0yb8ugu_test.go:52:79: undefined: None

    /tmp/tmpm0yb8ugu_test.go:56:60: undefined: None

    /tmp/tmpm0yb8ugu_test.go:57:61: undefined: None

    /tmp/tmpm0yb8ugu_test.go:58:78: undefined: None

    /tmp/tmpm0yb8ugu_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var pos, neg int\n    var pos_set, neg_set bool\n    for _, v := range\
    \ lst {\n        if v > 0 {\n            if !pos_set {\n                pos =\
    \ v\n                pos_set = true\n            } else if v < pos {\n       \
    \         pos = v\n            }\n        } else if v < 0 {\n            if !neg_set\
    \ {\n                neg = v\n                neg_set = true\n            } else\
    \ if v > neg {\n                neg = v\n            }\n        }\n    }\n   \
    \ if !pos_set {\n        pos = 0\n    }\n    if !neg_set {\n        neg = 0\n\
    \    }\n    return []interface{}{neg, pos}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoa59t6ic_test.go:49:76: undefined: None

    /tmp/tmpoa59t6ic_test.go:50:79: undefined: None

    /tmp/tmpoa59t6ic_test.go:54:60: undefined: None

    /tmp/tmpoa59t6ic_test.go:55:61: undefined: None

    /tmp/tmpoa59t6ic_test.go:56:78: undefined: None

    /tmp/tmpoa59t6ic_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if largestNegativeSet {\n   \
    \     if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzn3ki90d_test.go:53:76: undefined: None

    /tmp/tmpzn3ki90d_test.go:54:79: undefined: None

    /tmp/tmpzn3ki90d_test.go:58:60: undefined: None

    /tmp/tmpzn3ki90d_test.go:59:61: undefined: None

    /tmp/tmpzn3ki90d_test.go:60:78: undefined: None

    /tmp/tmpzn3ki90d_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, i := range lst {\n   \
    \     if i < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = i\n                largestNegativeExists = true\n            } else if i >\
    \ largestNegative {\n                largestNegative = i\n            }\n    \
    \    } else if i > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = i\n                smallestPositiveExists = true\n  \
    \          } else if i < smallestPositive {\n                smallestPositive\
    \ = i\n            }\n        }\n    }\n    if largestNegativeExists && smallestPositiveExists\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeExists {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveExists {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc5vecd5a_test.go:53:76: undefined: None

    /tmp/tmpc5vecd5a_test.go:54:79: undefined: None

    /tmp/tmpc5vecd5a_test.go:58:60: undefined: None

    /tmp/tmpc5vecd5a_test.go:59:61: undefined: None

    /tmp/tmpc5vecd5a_test.go:60:78: undefined: None

    /tmp/tmpc5vecd5a_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if !a_set {\n                a = v\n        \
    \        a_set = true\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if !b_set {\n         \
    \       b = v\n                b_set = true\n            } else if v < b {\n \
    \               b = v\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68g2oax3_test.go:49:76: undefined: None

    /tmp/tmp68g2oax3_test.go:50:79: undefined: None

    /tmp/tmp68g2oax3_test.go:54:60: undefined: None

    /tmp/tmp68g2oax3_test.go:55:61: undefined: None

    /tmp/tmp68g2oax3_test.go:56:78: undefined: None

    /tmp/tmp68g2oax3_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = v\n                largestNegativeExists = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveExists {\n           \
    \     smallestPositive = v\n                smallestPositiveExists = true\n  \
    \          } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeExists && smallestPositiveExists\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeExists {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveExists {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp56tpmn07_test.go:53:76: undefined: None

    /tmp/tmp56tpmn07_test.go:54:79: undefined: None

    /tmp/tmp56tpmn07_test.go:58:60: undefined: None

    /tmp/tmp56tpmn07_test.go:59:61: undefined: None

    /tmp/tmp56tpmn07_test.go:60:78: undefined: None

    /tmp/tmp56tpmn07_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest, smallest int\n    var largest_set, smallest_set bool\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if !largest_set {\n\
    \                largest = v\n                largest_set = true\n           \
    \ } else if v > largest {\n                largest = v\n            }\n      \
    \  } else if v > 0 {\n            if !smallest_set {\n                smallest\
    \ = v\n                smallest_set = true\n            } else if v < smallest\
    \ {\n                smallest = v\n            }\n        }\n    }\n    if !largest_set\
    \ {\n        largest = 0\n    }\n    if !smallest_set {\n        smallest = 0\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaktz826j_test.go:49:76: undefined: None

    /tmp/tmpaktz826j_test.go:50:79: undefined: None

    /tmp/tmpaktz826j_test.go:54:60: undefined: None

    /tmp/tmpaktz826j_test.go:55:61: undefined: None

    /tmp/tmpaktz826j_test.go:56:78: undefined: None

    /tmp/tmpaktz826j_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    a = 0\n    b = 0\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if v > a {\n                a = v\n            }\n\
    \        } else {\n            if v < b || b == 0 {\n                b = v\n \
    \           }\n        }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpverqdpqu_test.go:41:76: undefined: None

    /tmp/tmpverqdpqu_test.go:42:79: undefined: None

    /tmp/tmpverqdpqu_test.go:46:60: undefined: None

    /tmp/tmpverqdpqu_test.go:47:61: undefined: None

    /tmp/tmpverqdpqu_test.go:48:78: undefined: None

    /tmp/tmpverqdpqu_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeFound == false {\n            \
    \    largestNegative = v\n                largestNegativeFound = true\n      \
    \      } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeFound == false {\n\
    \        largestNegative = nil\n    }\n    if smallestPositiveFound == false {\n\
    \        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6lur55_c_test.go:36:27: cannot use nil as int value in assignment

    /tmp/tmp6lur55_c_test.go:39:28: cannot use nil as int value in assignment

    /tmp/tmp6lur55_c_test.go:51:76: undefined: None

    /tmp/tmp6lur55_c_test.go:52:79: undefined: None

    /tmp/tmp6lur55_c_test.go:56:60: undefined: None

    /tmp/tmp6lur55_c_test.go:57:61: undefined: None

    /tmp/tmp6lur55_c_test.go:58:78: undefined: None

    /tmp/tmp6lur55_c_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeFound {\n                if v >\
    \ largestNegative {\n                    largestNegative = v\n               \
    \ }\n            } else {\n                largestNegative = v\n             \
    \   largestNegativeFound = true\n            }\n        } else {\n           \
    \ if smallestPositiveFound {\n                if v < smallestPositive {\n    \
    \                smallestPositive = v\n                }\n            } else {\n\
    \                smallestPositive = v\n                smallestPositiveFound =\
    \ true\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_0lolh6_test.go:57:76: undefined: None

    /tmp/tmpe_0lolh6_test.go:58:79: undefined: None

    /tmp/tmpe_0lolh6_test.go:62:60: undefined: None

    /tmp/tmpe_0lolh6_test.go:63:61: undefined: None

    /tmp/tmpe_0lolh6_test.go:64:78: undefined: None

    /tmp/tmpe_0lolh6_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_exists,\
    \ smallest_positive_exists bool\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largest_negative_exists {\n                largest_negative\
    \ = v\n                largest_negative_exists = true\n            } else if v\
    \ > largest_negative {\n                largest_negative = v\n            }\n\
    \        } else if v > 0 {\n            if !smallest_positive_exists {\n     \
    \           smallest_positive = v\n                smallest_positive_exists =\
    \ true\n            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if largest_negative_exists && smallest_positive_exists\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_exists {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_exists {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpinb0768q_test.go:51:76: undefined: None

    /tmp/tmpinb0768q_test.go:52:79: undefined: None

    /tmp/tmpinb0768q_test.go:56:60: undefined: None

    /tmp/tmpinb0768q_test.go:57:61: undefined: None

    /tmp/tmpinb0768q_test.go:58:78: undefined: None

    /tmp/tmpinb0768q_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, num := range lst {\n    \
    \    if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeuqiylbe_test.go:53:76: undefined: None

    /tmp/tmpeuqiylbe_test.go:54:79: undefined: None

    /tmp/tmpeuqiylbe_test.go:58:60: undefined: None

    /tmp/tmpeuqiylbe_test.go:59:61: undefined: None

    /tmp/tmpeuqiylbe_test.go:60:78: undefined: None

    /tmp/tmpeuqiylbe_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, i := range lst {\n\
    \        if i < 0 {\n            if !a_set {\n                a = i\n        \
    \        a_set = true\n            } else if i > a {\n                a = i\n\
    \            }\n        } else if i > 0 {\n            if !b_set {\n         \
    \       b = i\n                b_set = true\n            } else if i < b {\n \
    \               b = i\n            }\n        }\n    }\n    if a_set && b_set\
    \ {\n        return []interface{}{a, b}\n    } else if a_set {\n        return\
    \ []interface{}{a, nil}\n    } else if b_set {\n        return []interface{}{nil,\
    \ b}\n    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph7sdow4k_test.go:51:76: undefined: None

    /tmp/tmph7sdow4k_test.go:52:79: undefined: None

    /tmp/tmph7sdow4k_test.go:56:60: undefined: None

    /tmp/tmph7sdow4k_test.go:57:61: undefined: None

    /tmp/tmph7sdow4k_test.go:58:78: undefined: None

    /tmp/tmph7sdow4k_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, i := range lst {\n    \
    \    if i < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = i\n                largestNegativeFound = true\n            } else if i >\
    \ largestNegative {\n                largestNegative = i\n            }\n    \
    \    } else if i > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = i\n                smallestPositiveFound = true\n    \
    \        } else if i < smallestPositive {\n                smallestPositive =\
    \ i\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm07u7xb1_test.go:53:76: undefined: None

    /tmp/tmpm07u7xb1_test.go:54:79: undefined: None

    /tmp/tmpm07u7xb1_test.go:58:60: undefined: None

    /tmp/tmpm07u7xb1_test.go:59:61: undefined: None

    /tmp/tmpm07u7xb1_test.go:60:78: undefined: None

    /tmp/tmpm07u7xb1_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if !a_set {\n                a = v\n        \
    \        a_set = true\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if !b_set {\n         \
    \       b = v\n                b_set = true\n            } else if v < b {\n \
    \               b = v\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68g2oax3_test.go:49:76: undefined: None

    /tmp/tmp68g2oax3_test.go:50:79: undefined: None

    /tmp/tmp68g2oax3_test.go:54:60: undefined: None

    /tmp/tmp68g2oax3_test.go:55:61: undefined: None

    /tmp/tmp68g2oax3_test.go:56:78: undefined: None

    /tmp/tmp68g2oax3_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if largestNegativeExists {\n                if v\
    \ > largestNegative {\n                    largestNegative = v\n             \
    \   }\n            } else {\n                largestNegative = v\n           \
    \     largestNegativeExists = true\n            }\n        } else {\n        \
    \    if smallestPositiveExists {\n                if v < smallestPositive {\n\
    \                    smallestPositive = v\n                }\n            } else\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n    if largestNegativeExists && smallestPositiveExists\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeExists {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveExists {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxupxlftv_test.go:57:76: undefined: None

    /tmp/tmpxupxlftv_test.go:58:79: undefined: None

    /tmp/tmpxupxlftv_test.go:62:60: undefined: None

    /tmp/tmpxupxlftv_test.go:63:61: undefined: None

    /tmp/tmpxupxlftv_test.go:64:78: undefined: None

    /tmp/tmpxupxlftv_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if largestNegativeExists {\n                if v\
    \ > largestNegative {\n                    largestNegative = v\n             \
    \   }\n            } else {\n                largestNegative = v\n           \
    \     largestNegativeExists = true\n            }\n        } else {\n        \
    \    if smallestPositiveExists {\n                if v < smallestPositive {\n\
    \                    smallestPositive = v\n                }\n            } else\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n    if largestNegativeExists && smallestPositiveExists\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeExists {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveExists {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxupxlftv_test.go:57:76: undefined: None

    /tmp/tmpxupxlftv_test.go:58:79: undefined: None

    /tmp/tmpxupxlftv_test.go:62:60: undefined: None

    /tmp/tmpxupxlftv_test.go:63:61: undefined: None

    /tmp/tmpxupxlftv_test.go:64:78: undefined: None

    /tmp/tmpxupxlftv_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if largestNegative == 0 {\n   \
    \             largestNegative = v\n            } else if v > largestNegative {\n\
    \                largestNegative = v\n            }\n        } else if v > 0 {\n\
    \            if smallestPositive == 0 {\n                smallestPositive = v\n\
    \            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpchuu3yfj_test.go:41:76: undefined: None

    /tmp/tmpchuu3yfj_test.go:42:79: undefined: None

    /tmp/tmpchuu3yfj_test.go:46:60: undefined: None

    /tmp/tmpchuu3yfj_test.go:47:61: undefined: None

    /tmp/tmpchuu3yfj_test.go:48:78: undefined: None

    /tmp/tmpchuu3yfj_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_set\
    \ bool\n    var smallest_positive_set bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largest_negative_set {\n                largest_negative\
    \ = v\n                largest_negative_set = true\n            } else if v >\
    \ largest_negative {\n                largest_negative = v\n            }\n  \
    \      } else if v > 0 {\n            if !smallest_positive_set {\n          \
    \      smallest_positive = v\n                smallest_positive_set = true\n \
    \           } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if largest_negative_set && smallest_positive_set\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_set {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_set {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1p0dieof_test.go:53:76: undefined: None

    /tmp/tmp1p0dieof_test.go:54:79: undefined: None

    /tmp/tmp1p0dieof_test.go:58:60: undefined: None

    /tmp/tmp1p0dieof_test.go:59:61: undefined: None

    /tmp/tmp1p0dieof_test.go:60:78: undefined: None

    /tmp/tmp1p0dieof_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    if a == 0 && b == 0 {\n        return []interface{}{nil, nil}\n    }\n  \
    \  return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvhw46nnl_test.go:39:76: undefined: None

    /tmp/tmpvhw46nnl_test.go:40:79: undefined: None

    /tmp/tmpvhw46nnl_test.go:44:60: undefined: None

    /tmp/tmpvhw46nnl_test.go:45:61: undefined: None

    /tmp/tmpvhw46nnl_test.go:46:78: undefined: None

    /tmp/tmpvhw46nnl_test.go:47:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, n := range lst {\n        if n < 0 {\n\
    \            if !largestNegativeSet || n > largestNegative {\n               \
    \ largestNegative = n\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || n < smallestPositive\
    \ {\n                smallestPositive = n\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppfekskdm_test.go:47:76: undefined: None

    /tmp/tmppfekskdm_test.go:48:79: undefined: None

    /tmp/tmppfekskdm_test.go:52:60: undefined: None

    /tmp/tmppfekskdm_test.go:53:61: undefined: None

    /tmp/tmppfekskdm_test.go:54:78: undefined: None

    /tmp/tmppfekskdm_test.go:55:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, num := range lst {\n        if num < 0\
    \ {\n            if !largestNegativeSet || num > largestNegative {\n         \
    \       largestNegative = num\n                largestNegativeSet = true\n   \
    \         }\n        } else {\n            if !smallestPositiveSet || num < smallestPositive\
    \ {\n                smallestPositive = num\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi27ka8ye_test.go:39:76: undefined: None

    /tmp/tmpi27ka8ye_test.go:40:79: undefined: None

    /tmp/tmpi27ka8ye_test.go:44:60: undefined: None

    /tmp/tmpi27ka8ye_test.go:45:61: undefined: None

    /tmp/tmpi27ka8ye_test.go:46:78: undefined: None

    /tmp/tmpi27ka8ye_test.go:47:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int = 0\n    var smallest_positive int = 0\n   \
    \ var is_largest_negative bool = false\n    var is_smallest_positive bool = false\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if is_largest_negative\
    \ == false {\n                largest_negative = v\n                is_largest_negative\
    \ = true\n            } else if v > largest_negative {\n                largest_negative\
    \ = v\n            }\n        } else if v > 0 {\n            if is_smallest_positive\
    \ == false {\n                smallest_positive = v\n                is_smallest_positive\
    \ = true\n            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if is_largest_negative == false {\n\
    \        largest_negative = 0\n    }\n    if is_smallest_positive == false {\n\
    \        smallest_positive = 0\n    }\n    return []interface{}{largest_negative,\
    \ smallest_positive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnw9d9l5p_test.go:51:76: undefined: None

    /tmp/tmpnw9d9l5p_test.go:52:79: undefined: None

    /tmp/tmpnw9d9l5p_test.go:56:60: undefined: None

    /tmp/tmpnw9d9l5p_test.go:57:61: undefined: None

    /tmp/tmpnw9d9l5p_test.go:58:78: undefined: None

    /tmp/tmpnw9d9l5p_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeSet == false {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if smallestPositiveSet == false {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet == false {\n        largestNegative = 0\n    }\n   \
    \ if smallestPositiveSet == false {\n        smallestPositive = 0\n    }\n   \
    \ return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4d0b0v1i_test.go:49:76: undefined: None

    /tmp/tmp4d0b0v1i_test.go:50:79: undefined: None

    /tmp/tmp4d0b0v1i_test.go:54:60: undefined: None

    /tmp/tmp4d0b0v1i_test.go:55:61: undefined: None

    /tmp/tmp4d0b0v1i_test.go:56:78: undefined: None

    /tmp/tmp4d0b0v1i_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var lst_neg []int\n    var lst_pos []int\n    var lst_out []interface{}\n\
    \    for _, v := range lst {\n        if v < 0 {\n            lst_neg = append(lst_neg,\
    \ v)\n        } else {\n            lst_pos = append(lst_pos, v)\n        }\n\
    \    }\n    if len(lst_neg) > 0 {\n        lst_out = append(lst_out, max(lst_neg))\n\
    \    } else {\n        lst_out = append(lst_out, nil)\n    }\n    if len(lst_pos)\
    \ > 0 {\n        lst_out = append(lst_out, min(lst_pos))\n    } else {\n     \
    \   lst_out = append(lst_out, nil)\n    }\n    return lst_out\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxx_dvv9b_test.go:25:35: undefined: max

    /tmp/tmpxx_dvv9b_test.go:30:35: undefined: min

    /tmp/tmpxx_dvv9b_test.go:44:76: undefined: None

    /tmp/tmpxx_dvv9b_test.go:45:79: undefined: None

    /tmp/tmpxx_dvv9b_test.go:49:60: undefined: None

    /tmp/tmpxx_dvv9b_test.go:50:61: undefined: None

    /tmp/tmpxx_dvv9b_test.go:51:78: undefined: None

    /tmp/tmpxx_dvv9b_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, val := range lst {\n    \
    \    if val < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = val\n                largestNegativeSet = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = val\n                smallestPositiveSet = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycih16ud_test.go:53:76: undefined: None

    /tmp/tmpycih16ud_test.go:54:79: undefined: None

    /tmp/tmpycih16ud_test.go:58:60: undefined: None

    /tmp/tmpycih16ud_test.go:59:61: undefined: None

    /tmp/tmpycih16ud_test.go:60:78: undefined: None

    /tmp/tmpycih16ud_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, x := range lst {\n\
    \        if x < 0 {\n            if !a_set {\n                a = x\n        \
    \        a_set = true\n            } else if x > a {\n                a = x\n\
    \            }\n        } else if x > 0 {\n            if !b_set {\n         \
    \       b = x\n                b_set = true\n            } else if x < b {\n \
    \               b = x\n            }\n        }\n    }\n    if a_set && b_set\
    \ {\n        return []interface{}{a, b}\n    } else if a_set {\n        return\
    \ []interface{}{a, nil}\n    } else if b_set {\n        return []interface{}{nil,\
    \ b}\n    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmf7knm67_test.go:51:76: undefined: None

    /tmp/tmpmf7knm67_test.go:52:79: undefined: None

    /tmp/tmpmf7knm67_test.go:56:60: undefined: None

    /tmp/tmpmf7knm67_test.go:57:61: undefined: None

    /tmp/tmpmf7knm67_test.go:58:78: undefined: None

    /tmp/tmpmf7knm67_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == nil {\n                a = v\n            } else if v > a.(int)\
    \ {\n                a = v\n            }\n        } else if v > 0 {\n       \
    \     if b == nil {\n                b = v\n            } else if v < b.(int)\
    \ {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w1s0erp_test.go:40:76: undefined: None

    /tmp/tmp2w1s0erp_test.go:41:79: undefined: None

    /tmp/tmp2w1s0erp_test.go:45:60: undefined: None

    /tmp/tmp2w1s0erp_test.go:46:61: undefined: None

    /tmp/tmp2w1s0erp_test.go:47:78: undefined: None

    /tmp/tmp2w1s0erp_test.go:48:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n\n    for _, i := range lst {\n        if i < 0\
    \ {\n            if !largest_negative_set {\n                largest_negative\
    \ = i\n                largest_negative_set = true\n            } else if i >\
    \ largest_negative {\n                largest_negative = i\n            }\n  \
    \      } else if i > 0 {\n            if !smallest_positive_set {\n          \
    \      smallest_positive = i\n                smallest_positive_set = true\n \
    \           } else if i < smallest_positive {\n                smallest_positive\
    \ = i\n            }\n        }\n    }\n\n    if largest_negative_set && smallest_positive_set\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_set {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_set {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplb2d3nu4_test.go:53:76: undefined: None

    /tmp/tmplb2d3nu4_test.go:54:79: undefined: None

    /tmp/tmplb2d3nu4_test.go:58:60: undefined: None

    /tmp/tmplb2d3nu4_test.go:59:61: undefined: None

    /tmp/tmplb2d3nu4_test.go:60:78: undefined: None

    /tmp/tmplb2d3nu4_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = i\n\
    \                largest_negative_set = true\n            } else if i > largest_negative\
    \ {\n                largest_negative = i\n            }\n        } else if i\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = i\n                smallest_positive_set = true\n            } else if i <\
    \ smallest_positive {\n                smallest_positive = i\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpulfd0low_test.go:51:76: undefined: None

    /tmp/tmpulfd0low_test.go:52:79: undefined: None

    /tmp/tmpulfd0low_test.go:56:60: undefined: None

    /tmp/tmpulfd0low_test.go:57:61: undefined: None

    /tmp/tmpulfd0low_test.go:58:78: undefined: None

    /tmp/tmpulfd0low_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeExists\
    \ bool\n    var smallestPositiveExists bool\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            if largestNegativeExists {\n                if v\
    \ > largestNegative {\n                    largestNegative = v\n             \
    \   }\n            } else {\n                largestNegative = v\n           \
    \     largestNegativeExists = true\n            }\n        } else {\n        \
    \    if smallestPositiveExists {\n                if v < smallestPositive {\n\
    \                    smallestPositive = v\n                }\n            } else\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            }\n        }\n    }\n    if largestNegativeExists && smallestPositiveExists\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeExists {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveExists {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxupxlftv_test.go:57:76: undefined: None

    /tmp/tmpxupxlftv_test.go:58:79: undefined: None

    /tmp/tmpxupxlftv_test.go:62:60: undefined: None

    /tmp/tmpxupxlftv_test.go:63:61: undefined: None

    /tmp/tmpxupxlftv_test.go:64:78: undefined: None

    /tmp/tmpxupxlftv_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, n := range lst {\n\
    \        if n < 0 {\n            if !a_set {\n                a = n\n        \
    \        a_set = true\n            } else if n > a {\n                a = n\n\
    \            }\n        } else if n > 0 {\n            if !b_set {\n         \
    \       b = n\n                b_set = true\n            } else if n < b {\n \
    \               b = n\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1wvilmz_test.go:49:76: undefined: None

    /tmp/tmpp1wvilmz_test.go:50:79: undefined: None

    /tmp/tmpp1wvilmz_test.go:54:60: undefined: None

    /tmp/tmpp1wvilmz_test.go:55:61: undefined: None

    /tmp/tmpp1wvilmz_test.go:56:78: undefined: None

    /tmp/tmpp1wvilmz_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeFound {\n                largestNegative =\
    \ v\n                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdp0kkfu6_test.go:52:76: undefined: None

    /tmp/tmpdp0kkfu6_test.go:53:79: undefined: None

    /tmp/tmpdp0kkfu6_test.go:57:60: undefined: None

    /tmp/tmpdp0kkfu6_test.go:58:61: undefined: None

    /tmp/tmpdp0kkfu6_test.go:59:78: undefined: None

    /tmp/tmpdp0kkfu6_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !largestNegativeFound {\n                largestNegative =\
    \ v\n                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxc8hetpn_test.go:36:27: cannot use nil as int value in assignment

    /tmp/tmpxc8hetpn_test.go:39:28: cannot use nil as int value in assignment

    /tmp/tmpxc8hetpn_test.go:52:76: undefined: None

    /tmp/tmpxc8hetpn_test.go:53:79: undefined: None

    /tmp/tmpxc8hetpn_test.go:57:60: undefined: None

    /tmp/tmpxc8hetpn_test.go:58:61: undefined: None

    /tmp/tmpxc8hetpn_test.go:59:78: undefined: None

    /tmp/tmpxc8hetpn_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeSet || i > largestNegative {\n               \
    \ largestNegative = i\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || i < smallestPositive\
    \ {\n                smallestPositive = i\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpny63o5g8_test.go:51:76: undefined: None

    /tmp/tmpny63o5g8_test.go:52:79: undefined: None

    /tmp/tmpny63o5g8_test.go:56:60: undefined: None

    /tmp/tmpny63o5g8_test.go:57:61: undefined: None

    /tmp/tmpny63o5g8_test.go:58:78: undefined: None

    /tmp/tmpny63o5g8_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if !a_set {\n                a = v\n        \
    \        a_set = true\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if !b_set {\n         \
    \       b = v\n                b_set = true\n            } else if v < b {\n \
    \               b = v\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68g2oax3_test.go:49:76: undefined: None

    /tmp/tmp68g2oax3_test.go:50:79: undefined: None

    /tmp/tmp68g2oax3_test.go:54:60: undefined: None

    /tmp/tmp68g2oax3_test.go:55:61: undefined: None

    /tmp/tmp68g2oax3_test.go:56:78: undefined: None

    /tmp/tmp68g2oax3_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, value := range lst {\n\
    \        if value < 0 {\n            if !largestNegativeFound {\n            \
    \    largestNegative = value\n                largestNegativeFound = true\n  \
    \          } else if value > largestNegative {\n                largestNegative\
    \ = value\n            }\n        } else if value > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9yo0chph_test.go:53:76: undefined: None

    /tmp/tmp9yo0chph_test.go:54:79: undefined: None

    /tmp/tmp9yo0chph_test.go:58:60: undefined: None

    /tmp/tmp9yo0chph_test.go:59:61: undefined: None

    /tmp/tmp9yo0chph_test.go:60:78: undefined: None

    /tmp/tmp9yo0chph_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var isNegative\
    \ bool\n    var isPositive bool\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if !isNegative {\n                largestNegative = v\n     \
    \           isNegative = true\n            } else if v > largestNegative {\n \
    \               largestNegative = v\n            }\n        } else if v > 0 {\n\
    \            if !isPositive {\n                smallestPositive = v\n        \
    \        isPositive = true\n            } else if v < smallestPositive {\n   \
    \             smallestPositive = v\n            }\n        }\n    }\n    if isNegative\
    \ && isPositive {\n        return []interface{}{largestNegative, smallestPositive}\n\
    \    } else if isNegative {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if isPositive {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0b8gguzs_test.go:53:76: undefined: None

    /tmp/tmp0b8gguzs_test.go:54:79: undefined: None

    /tmp/tmp0b8gguzs_test.go:58:60: undefined: None

    /tmp/tmp0b8gguzs_test.go:59:61: undefined: None

    /tmp/tmp0b8gguzs_test.go:60:78: undefined: None

    /tmp/tmp0b8gguzs_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_exists\
    \ bool\n    var smallest_positive_exists bool\n    for _, v := range lst {\n \
    \       if v < 0 {\n            if largest_negative_exists == false {\n      \
    \          largest_negative = v\n                largest_negative_exists = true\n\
    \            } else if v > largest_negative {\n                largest_negative\
    \ = v\n            }\n        } else if v > 0 {\n            if smallest_positive_exists\
    \ == false {\n                smallest_positive = v\n                smallest_positive_exists\
    \ = true\n            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if largest_negative_exists == false\
    \ {\n        largest_negative = nil\n    }\n    if smallest_positive_exists ==\
    \ false {\n        smallest_positive = nil\n    }\n    return []interface{}{largest_negative,\
    \ smallest_positive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ajxl8xm_test.go:36:28: cannot use nil as int value in assignment

    /tmp/tmp5ajxl8xm_test.go:39:29: cannot use nil as int value in assignment

    /tmp/tmp5ajxl8xm_test.go:51:76: undefined: None

    /tmp/tmp5ajxl8xm_test.go:52:79: undefined: None

    /tmp/tmp5ajxl8xm_test.go:56:60: undefined: None

    /tmp/tmp5ajxl8xm_test.go:57:61: undefined: None

    /tmp/tmp5ajxl8xm_test.go:58:78: undefined: None

    /tmp/tmp5ajxl8xm_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_set\
    \ bool\n    var smallest_positive_set bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largest_negative_set {\n                largest_negative\
    \ = v\n                largest_negative_set = true\n            } else if v >\
    \ largest_negative {\n                largest_negative = v\n            }\n  \
    \      } else if v > 0 {\n            if !smallest_positive_set {\n          \
    \      smallest_positive = v\n                smallest_positive_set = true\n \
    \           } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if largest_negative_set && smallest_positive_set\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_set {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_set {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1p0dieof_test.go:53:76: undefined: None

    /tmp/tmp1p0dieof_test.go:54:79: undefined: None

    /tmp/tmp1p0dieof_test.go:58:60: undefined: None

    /tmp/tmp1p0dieof_test.go:59:61: undefined: None

    /tmp/tmp1p0dieof_test.go:60:78: undefined: None

    /tmp/tmp1p0dieof_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound {\n        if\
    \ smallestPositiveFound {\n            return []interface{}{largestNegative, smallestPositive}\n\
    \        } else {\n            return []interface{}{largestNegative, nil}\n  \
    \      }\n    } else {\n        if smallestPositiveFound {\n            return\
    \ []interface{}{nil, smallestPositive}\n        } else {\n            return []interface{}{nil,\
    \ nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmtzqbd5_test.go:57:76: undefined: None

    /tmp/tmpdmtzqbd5_test.go:58:79: undefined: None

    /tmp/tmpdmtzqbd5_test.go:62:60: undefined: None

    /tmp/tmpdmtzqbd5_test.go:63:61: undefined: None

    /tmp/tmpdmtzqbd5_test.go:64:78: undefined: None

    /tmp/tmpdmtzqbd5_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative_int int\n    var smallest_positive_int int\n   \
    \ var largest_negative_int_found bool\n    var smallest_positive_int_found bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largest_negative_int_found\
    \ {\n                largest_negative_int = v\n                largest_negative_int_found\
    \ = true\n            } else if v > largest_negative_int {\n                largest_negative_int\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallest_positive_int_found\
    \ {\n                smallest_positive_int = v\n                smallest_positive_int_found\
    \ = true\n            } else if v < smallest_positive_int {\n                smallest_positive_int\
    \ = v\n            }\n        }\n    }\n    if largest_negative_int_found && smallest_positive_int_found\
    \ {\n        return []interface{}{largest_negative_int, smallest_positive_int}\n\
    \    } else if largest_negative_int_found {\n        return []interface{}{largest_negative_int,\
    \ nil}\n    } else if smallest_positive_int_found {\n        return []interface{}{nil,\
    \ smallest_positive_int}\n    } else {\n        return []interface{}{nil, nil}\n\
    \    }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpugdspsp8_test.go:53:76: undefined: None

    /tmp/tmpugdspsp8_test.go:54:79: undefined: None

    /tmp/tmpugdspsp8_test.go:58:60: undefined: None

    /tmp/tmpugdspsp8_test.go:59:61: undefined: None

    /tmp/tmpugdspsp8_test.go:60:78: undefined: None

    /tmp/tmpugdspsp8_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int = 0\n    var smallest_positive int = 0\n   \
    \ var found_negative bool = false\n    var found_positive bool = false\n    for\
    \ _, x := range lst {\n        if x < 0 {\n            if x > largest_negative\
    \ {\n                largest_negative = x\n            }\n            found_negative\
    \ = true\n        } else if x > 0 {\n            if smallest_positive == 0 {\n\
    \                smallest_positive = x\n            } else if x < smallest_positive\
    \ {\n                smallest_positive = x\n            }\n            found_positive\
    \ = true\n        }\n    }\n    if !found_negative {\n        largest_negative\
    \ = -1\n    }\n    if !found_positive {\n        smallest_positive = -1\n    }\n\
    \    return []interface{}{largest_negative, smallest_positive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpalv66rwq_test.go:49:76: undefined: None

    /tmp/tmpalv66rwq_test.go:50:79: undefined: None

    /tmp/tmpalv66rwq_test.go:54:60: undefined: None

    /tmp/tmpalv66rwq_test.go:55:61: undefined: None

    /tmp/tmpalv66rwq_test.go:56:78: undefined: None

    /tmp/tmpalv66rwq_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeFound {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            }\n        } else {\n            if smallestPositiveFound\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            }\n        }\n\
    \    }\n    if largestNegativeFound && smallestPositiveFound {\n        return\
    \ []interface{}{largestNegative, smallestPositive}\n    } else if largestNegativeFound\
    \ {\n        return []interface{}{largestNegative, nil}\n    } else if smallestPositiveFound\
    \ {\n        return []interface{}{nil, smallestPositive}\n    } else {\n     \
    \   return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3c5s66gn_test.go:55:76: undefined: None

    /tmp/tmp3c5s66gn_test.go:56:79: undefined: None

    /tmp/tmp3c5s66gn_test.go:60:60: undefined: None

    /tmp/tmp3c5s66gn_test.go:61:61: undefined: None

    /tmp/tmp3c5s66gn_test.go:62:78: undefined: None

    /tmp/tmp3c5s66gn_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if !a_set {\n                a = v\n        \
    \        a_set = true\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if !b_set {\n         \
    \       b = v\n                b_set = true\n            } else if v < b {\n \
    \               b = v\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68g2oax3_test.go:49:76: undefined: None

    /tmp/tmp68g2oax3_test.go:50:79: undefined: None

    /tmp/tmp68g2oax3_test.go:54:60: undefined: None

    /tmp/tmp68g2oax3_test.go:55:61: undefined: None

    /tmp/tmp68g2oax3_test.go:56:78: undefined: None

    /tmp/tmp68g2oax3_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 1
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    // the largest of negative integers\n    var largest_neg int\n    //\
    \ the smallest of positive integers\n    var smallest_pos int\n    // the number\
    \ of negative integers\n    var neg_count int\n    // the number of positive integers\n\
    \    var pos_count int\n    // the number of zeros\n    var zero_count int\n \
    \   // the number of non-integers\n    var non_int_count int\n    // the number\
    \ of integers\n    var int_count int\n    // the number of items in the list\n\
    \    var item_count int\n    // the number of items in the list\n    item_count\
    \ = len(lst)\n    // loop through the list\n    for _, item := range lst {\n \
    \       // increment the number of items\n        item_count++\n        // check\
    \ if the item is an integer\n        if item == int(item) {\n            // increment\
    \ the number of integers\n            int_count++\n            // check if the\
    \ item is negative\n            if item < 0 {\n                // increment the\
    \ number of negative integers\n                neg_count++\n                //\
    \ check if the item is the largest negative\n                if item > largest_neg\
    \ {\n                    // set the largest negative\n                    largest_neg\
    \ = item\n                }\n            } else if item > 0 {\n              \
    \  // increment the number of positive integers\n                pos_count++\n\
    \                // check if the item is the smallest positive\n             \
    \   if item < smallest_pos {\n                    // set the smallest positive\n\
    \                    smallest_pos = item\n                }\n            } else\
    \ {\n                // increment the number of zeros\n                zero_count++\n\
    \            }\n        } else {\n            // increment the number of non-integers\n\
    \            non_int_count++\n        }\n    }\n    // check if there are no integers\n\
    \    if int_count == 0 {\n        // return None\n        return []interface{}{nil,\
    \ nil}\n    }\n    // check if there are no negative integers\n    if neg_count\
    \ == 0 {\n        // return None\n        largest_neg = nil\n    }\n    // check\
    \ if there are no positive integers\n    if pos_count == 0 {\n        // return\
    \ None\n        smallest_pos = nil\n    }\n    // return the largest of negative\
    \ integers and the smallest of\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbbyyr12h_test.go:82:6: expected ''('', found TestLargest_Smallest_Integers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074477
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative int\n    var smallest_positive int\n    var largest_negative_set\
    \ bool\n    var smallest_positive_set bool\n    for _, value := range lst {\n\
    \        if value < 0 {\n            if !largest_negative_set {\n            \
    \    largest_negative = value\n                largest_negative_set = true\n \
    \           } else if value > largest_negative {\n                largest_negative\
    \ = value\n            }\n        } else if value > 0 {\n            if !smallest_positive_set\
    \ {\n                smallest_positive = value\n                smallest_positive_set\
    \ = true\n            } else if value < smallest_positive {\n                smallest_positive\
    \ = value\n            }\n        }\n    }\n    if largest_negative_set && smallest_positive_set\
    \ {\n        return []interface{}{largest_negative, smallest_positive}\n    }\
    \ else if largest_negative_set {\n        return []interface{}{largest_negative,\
    \ nil}\n    } else if smallest_positive_set {\n        return []interface{}{nil,\
    \ smallest_positive}\n    } else {\n        return []interface{}{nil, nil}\n \
    \   }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjwlrtrqz_test.go:53:76: undefined: None

    /tmp/tmpjwlrtrqz_test.go:54:79: undefined: None

    /tmp/tmpjwlrtrqz_test.go:58:60: undefined: None

    /tmp/tmpjwlrtrqz_test.go:59:61: undefined: None

    /tmp/tmpjwlrtrqz_test.go:60:78: undefined: None

    /tmp/tmpjwlrtrqz_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n     \
    \       if v > a {\n                a = v\n            }\n        } else {\n \
    \           if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppa11mipv_test.go:36:76: undefined: None

    /tmp/tmppa11mipv_test.go:37:79: undefined: None

    /tmp/tmppa11mipv_test.go:41:60: undefined: None

    /tmp/tmppa11mipv_test.go:42:61: undefined: None

    /tmp/tmppa11mipv_test.go:43:78: undefined: None

    /tmp/tmppa11mipv_test.go:44:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074475
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b int\n    var a_set, b_set bool\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if !a_set {\n                a = v\n        \
    \        a_set = true\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if !b_set {\n         \
    \       b = v\n                b_set = true\n            } else if v < b {\n \
    \               b = v\n            }\n        }\n    }\n    if !a_set {\n    \
    \    a = 0\n    }\n    if !b_set {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68g2oax3_test.go:49:76: undefined: None

    /tmp/tmp68g2oax3_test.go:50:79: undefined: None

    /tmp/tmp68g2oax3_test.go:54:60: undefined: None

    /tmp/tmp68g2oax3_test.go:55:61: undefined: None

    /tmp/tmp68g2oax3_test.go:56:78: undefined: None

    /tmp/tmp68g2oax3_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, num := range lst {\n    \
    \    if num < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = num\n                largestNegativeSet = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveSet {\n        \
    \        smallestPositive = num\n                smallestPositiveSet = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if largestNegativeSet && smallestPositiveSet\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeSet {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveSet {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeuqiylbe_test.go:53:76: undefined: None

    /tmp/tmpeuqiylbe_test.go:54:79: undefined: None

    /tmp/tmpeuqiylbe_test.go:58:60: undefined: None

    /tmp/tmpeuqiylbe_test.go:59:61: undefined: None

    /tmp/tmpeuqiylbe_test.go:60:78: undefined: None

    /tmp/tmpeuqiylbe_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, number := range lst {\n\
    \        if number < 0 {\n            if !largestNegativeFound {\n           \
    \     largestNegative = number\n                largestNegativeFound = true\n\
    \            } else if number > largestNegative {\n                largestNegative\
    \ = number\n            }\n        } else if number > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = number\n                smallestPositiveFound\
    \ = true\n            } else if number < smallestPositive {\n                smallestPositive\
    \ = number\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmgwzuzs2_test.go:53:76: undefined: None

    /tmp/tmpmgwzuzs2_test.go:54:79: undefined: None

    /tmp/tmpmgwzuzs2_test.go:58:60: undefined: None

    /tmp/tmpmgwzuzs2_test.go:59:61: undefined: None

    /tmp/tmpmgwzuzs2_test.go:60:78: undefined: None

    /tmp/tmpmgwzuzs2_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var a, b interface{}\n    a = nil\n    b = nil\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == nil {\n                a = v\n\
    \            } else if v > a.(int) {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == nil {\n                b = v\n\
    \            } else if v < b.(int) {\n                b = v\n            }\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp90pp310j_test.go:42:76: undefined: None

    /tmp/tmp90pp310j_test.go:43:79: undefined: None

    /tmp/tmp90pp310j_test.go:47:60: undefined: None

    /tmp/tmp90pp310j_test.go:48:61: undefined: None

    /tmp/tmp90pp310j_test.go:49:78: undefined: None

    /tmp/tmp90pp310j_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeFound {\n                if v >\
    \ largestNegative {\n                    largestNegative = v\n               \
    \ }\n            } else {\n                largestNegative = v\n             \
    \   largestNegativeFound = true\n            }\n        } else {\n           \
    \ if smallestPositiveFound {\n                if v < smallestPositive {\n    \
    \                smallestPositive = v\n                }\n            } else {\n\
    \                smallestPositive = v\n                smallestPositiveFound =\
    \ true\n            }\n        }\n    }\n    var result []interface{}\n    if\
    \ largestNegativeFound {\n        result = append(result, largestNegative)\n \
    \   } else {\n        result = append(result, nil)\n    }\n    if smallestPositiveFound\
    \ {\n        result = append(result, smallestPositive)\n    } else {\n       \
    \ result = append(result, nil)\n    }\n    return result\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpti8z1bfa_test.go:60:76: undefined: None

    /tmp/tmpti8z1bfa_test.go:61:79: undefined: None

    /tmp/tmpti8z1bfa_test.go:65:60: undefined: None

    /tmp/tmpti8z1bfa_test.go:66:61: undefined: None

    /tmp/tmpti8z1bfa_test.go:67:78: undefined: None

    /tmp/tmpti8z1bfa_test.go:68:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if !smallestPositiveFound {\n            \
    \    smallestPositive = v\n                smallestPositiveFound = true\n    \
    \        } else if v < smallestPositive {\n                smallestPositive =\
    \ v\n            }\n        }\n    }\n    if largestNegativeFound && smallestPositiveFound\
    \ {\n        return []interface{}{largestNegative, smallestPositive}\n    } else\
    \ if largestNegativeFound {\n        return []interface{}{largestNegative, nil}\n\
    \    } else if smallestPositiveFound {\n        return []interface{}{nil, smallestPositive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqdvmi25n_test.go:53:76: undefined: None

    /tmp/tmpqdvmi25n_test.go:54:79: undefined: None

    /tmp/tmpqdvmi25n_test.go:58:60: undefined: None

    /tmp/tmpqdvmi25n_test.go:59:61: undefined: None

    /tmp/tmpqdvmi25n_test.go:60:78: undefined: None

    /tmp/tmpqdvmi25n_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largest_negative, smallest_positive int\n    var largest_negative_set,\
    \ smallest_positive_set bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largest_negative_set {\n                largest_negative = v\n\
    \                largest_negative_set = true\n            } else if v > largest_negative\
    \ {\n                largest_negative = v\n            }\n        } else if v\
    \ > 0 {\n            if !smallest_positive_set {\n                smallest_positive\
    \ = v\n                smallest_positive_set = true\n            } else if v <\
    \ smallest_positive {\n                smallest_positive = v\n            }\n\
    \        }\n    }\n    if largest_negative_set && smallest_positive_set {\n  \
    \      return []interface{}{largest_negative, smallest_positive}\n    } else if\
    \ largest_negative_set {\n        return []interface{}{largest_negative, nil}\n\
    \    } else if smallest_positive_set {\n        return []interface{}{nil, smallest_positive}\n\
    \    } else {\n        return []interface{}{nil, nil}\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a_q8ujh_test.go:51:76: undefined: None

    /tmp/tmp4a_q8ujh_test.go:52:79: undefined: None

    /tmp/tmp4a_q8ujh_test.go:56:60: undefined: None

    /tmp/tmp4a_q8ujh_test.go:57:61: undefined: None

    /tmp/tmp4a_q8ujh_test.go:58:78: undefined: None

    /tmp/tmp4a_q8ujh_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet && smallestPositiveSet {\n        return []interface{}{largestNegative,\
    \ smallestPositive}\n    } else if largestNegativeSet {\n        return []interface{}{largestNegative,\
    \ nil}\n    } else if smallestPositiveSet {\n        return []interface{}{nil,\
    \ smallestPositive}\n    } else {\n        return []interface{}{nil, nil}\n  \
    \  }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pory6dx_test.go:53:76: undefined: None

    /tmp/tmp3pory6dx_test.go:54:79: undefined: None

    /tmp/tmp3pory6dx_test.go:58:60: undefined: None

    /tmp/tmp3pory6dx_test.go:59:61: undefined: None

    /tmp/tmp3pory6dx_test.go:60:78: undefined: None

    /tmp/tmp3pory6dx_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    var result []interface{}\n\n \
    \   for _, v := range lst {\n        if v < 0 {\n            if largestNegativeFound\
    \ == false {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if largestNegativeFound == false\
    \ {\n        result = append(result, nil)\n    } else {\n        result = append(result,\
    \ largestNegative)\n    }\n\n    if smallestPositiveFound == false {\n       \
    \ result = append(result, nil)\n    } else {\n        result = append(result,\
    \ smallestPositive)\n    }\n\n    return result\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjnsuyv5y_test.go:60:76: undefined: None

    /tmp/tmpjnsuyv5y_test.go:61:79: undefined: None

    /tmp/tmpjnsuyv5y_test.go:65:60: undefined: None

    /tmp/tmpjnsuyv5y_test.go:66:61: undefined: None

    /tmp/tmpjnsuyv5y_test.go:67:78: undefined: None

    /tmp/tmpjnsuyv5y_test.go:68:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074478
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as None.\n// Examples:\nfunc largest_smallest_integers(lst []int) []interface{}\
    \ {\n    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9q_lsbr_test.go:51:76: undefined: None

    /tmp/tmpj9q_lsbr_test.go:52:79: undefined: None

    /tmp/tmpj9q_lsbr_test.go:56:60: undefined: None

    /tmp/tmpj9q_lsbr_test.go:57:61: undefined: None

    /tmp/tmpj9q_lsbr_test.go:58:78: undefined: None

    /tmp/tmpj9q_lsbr_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074473
