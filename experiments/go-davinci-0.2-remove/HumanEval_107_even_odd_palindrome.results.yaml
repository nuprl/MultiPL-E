language: go_test.go
name: HumanEval_107_even_odd_palindrome
results:
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    even, odd := 0, 0\n \
    \   for i := 1; i <= n; i++ {\n        if is_palindrome(i) {\n            if i\
    \ % 2 == 0 {\n                even++\n            } else {\n                odd++\n\
    \            }\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqx1zppt3_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    return []interface{}{0, 0}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpp4kf1dzc_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{0,\
    \ 0}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{0,\
    \ 0}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    even, odd := 0, 0\n \
    \   for i := 1; i <= n; i++ {\n        if is_palindrome(i) {\n            if i\
    \ % 2 == 0 {\n                even++\n            } else {\n                odd++\n\
    \            }\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqx1zppt3_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    odd, even := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8o9yi6eu_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // TODO - Add your code here\n    return nil\n}\n\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmplgdy17p7_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmplgdy17p7_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmplgdy17p7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmplgdy17p7_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmplgdy17p7_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmplgdy17p7_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmplgdy17p7_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmplgdy17p7_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 1000 {\n        return nil\n    }\n\
    \    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        if is_palindrome(i)\
    \ {\n            if i % 2 == 0 {\n                even++\n            } else {\n\
    \                odd++\n            }\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpns3hcf2t_test.go:25:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 1000 {\n        return nil\n    }\n\
    \    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        if is_palindrome(i)\
    \ {\n            if i % 2 == 0 {\n                even++\n            } else {\n\
    \                odd++\n            }\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpns3hcf2t_test.go:25:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    even, odd := 0, 0\n \
    \   for i := 1; i <= n; i++ {\n        if is_palindrome(i) {\n            if i\
    \ % 2 == 0 {\n                even++\n            } else {\n                odd++\n\
    \            }\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqx1zppt3_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    even, odd := 0, 0\n \
    \   for i := 1; i <= n; i++ {\n        if is_palindrome(i) {\n            if i\
    \ % 2 == 0 {\n                even++\n            } else {\n                odd++\n\
    \            }\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqx1zppt3_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // TODO - Add your code here\n    return nil\n}\n\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmplgdy17p7_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmplgdy17p7_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmplgdy17p7_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmplgdy17p7_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmplgdy17p7_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmplgdy17p7_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmplgdy17p7_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmplgdy17p7_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{0,\
    \ 0}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    even := 0\n    odd :=\
    \ 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n           \
    \ if i % 2 == 0 {\n                even++\n            } else {\n            \
    \    odd++\n            }\n        }\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ri0826i_test.go:24:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even\
    \ += 1\n            } else {\n                odd += 1\n            }\n      \
    \  }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppcszl7t9_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{0,\
    \ 0}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for i :=\
    \ 1; i <= n; i++ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n\
    \                even_count++\n            } else {\n                odd_count++\n\
    \            }\n        }\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg20oixhk_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even\
    \ += 1\n            } else {\n                odd += 1\n            }\n      \
    \  }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppcszl7t9_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := 1; i <= n; i++\
    \ {\n        if is_palindrome(i) {\n            if i % 2 == 0 {\n            \
    \    even++\n            } else {\n                odd++\n            }\n    \
    \    }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz6mv3ay_test.go:23:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    if n < 1 || n > 1000 {\n        return nil\n    }\n\
    \    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n        if is_palindrome(i)\
    \ {\n            if i % 2 == 0 {\n                even++\n            } else {\n\
    \                odd++\n            }\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpns3hcf2t_test.go:25:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{0,\
    \ 0}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=1) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__5\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7\
    \ (0.00s)\n        tmpv2pvbfw5_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    var even, odd int\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cl5m2l7_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return []interface{}{}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp8oeoc2q0_test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp8oeoc2q0_test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp8oeoc2q0_test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__3\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=5) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__5 (0.00s)\n        tmp33716ed__test.go:44:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__6\
    \ (0.00s)\n        tmp33716ed__test.go:44: expected '[%!s(int=4) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__7 (0.00s)\n      \
    \  tmp33716ed__test.go:44: expected '[%!s(int=0) %!s(int=1)]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073974
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 1; i <= n; i++ {\n\
    \        if is_palindrome(i) {\n            if i % 2 == 0 {\n                even++\n\
    \            } else {\n                odd++\n            }\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoe11wo6o_test.go:22:12: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073974
