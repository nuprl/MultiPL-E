name: HumanEval_140_fix_spaces
language: go_test.go
prompt: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string text, replace all spaces in it with underscores, \n// and if a\
  \ string has more than 2 consecutive spaces, \n// then replace all consecutive spaces\
  \ with -\nfunc fix_spaces(text string) string {\n"
tests: "func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n   \
  \  { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n  \
  \   { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
  \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n    \
  \ { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result string\n    var prev rune\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev == ' ' {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += string(c)\n        }\n        prev\
    \ = c\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count > 2 {\n                result += \"-\"\n          \
    \  }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    var space_count int\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if !prev_space {\n                result += \"_\"\n     \
    \           prev_space = true\n                space_count = 1\n            }\
    \ else {\n                space_count++\n                if space_count > 2 {\n\
    \                    result += \"-\"\n                    space_count = 0\n  \
    \              }\n            }\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prevChar byte\n    var prevPrevChar byte\n    for\
    \ i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            if prevChar\
    \ == ' ' && prevPrevChar == ' ' {\n                result += \"-\"\n         \
    \   } else {\n                result += \"_\"\n            }\n        } else {\n\
    \            result += string(text[i])\n        }\n        prevPrevChar = prevChar\n\
    \        prevChar = text[i]\n    }\n    return result\n}\n", "    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                space_count\
    \ = 1\n                prev_space = true\n            } else {\n             \
    \   space_count++\n            }\n            if space_count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            result += string(c)\n         \
    \   prev_space = false\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var prev_char byte\n    var space_count int\n    for i := 0; i <\
    \ len(text); i++ {\n        if text[i] == ' ' {\n            space_count++\n \
    \           if space_count > 2 {\n                if prev_char != '-' {\n    \
    \                result += \"-\"\n                }\n            } else {\n  \
    \              result += \"_\"\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(text[i])\n        }\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result []byte\n    var space_count int\
    \ = 0\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n   \
    \         space_count++\n            if space_count > 2 {\n                continue\n\
    \            }\n        } else {\n            space_count = 0\n        }\n   \
    \     if space_count == 1 {\n            result = append(result, '_')\n      \
    \  } else if space_count == 2 {\n            result = append(result, '-')\n  \
    \      } else {\n            result = append(result, text[i])\n        }\n   \
    \ }\n    return string(result)\n}\n", "    var result string\n    var prev_space\
    \ bool\n    var space_count int\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if !prev_space {\n                prev_space = true\n   \
    \             space_count = 1\n            } else {\n                space_count++\n\
    \            }\n            if space_count > 2 {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            prev_space = false\n            space_count = 0\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool = false\n    for _, ch := range\
    \ text {\n        if ch == ' ' {\n            if prev_space {\n              \
    \  result += \"-\"\n            } else {\n                result += \"_\"\n  \
    \          }\n            prev_space = true\n        } else {\n            result\
    \ += string(ch)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_char byte\n    var prev_prev_char\
    \ byte\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n  \
    \          if prev_char == ' ' && prev_prev_char == ' ' {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += string(text[i])\n        }\n   \
    \     prev_prev_char = prev_char\n        prev_char = text[i]\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_char rune\n    var count\
    \ int\n\n    for _, char := range text {\n        if char == ' ' {\n         \
    \   if prev_char == ' ' {\n                count++\n            } else {\n   \
    \             count = 1\n            }\n            if count > 2 {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n        } else {\n            count = 0\n            result +=\
    \ string(char)\n        }\n        prev_char = char\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool = false\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n            prev_space = true\n        } else {\n           \
    \ result += string(c)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var space_count int\n    for _, c\
    \ := range text {\n        if c == ' ' {\n            space_count++\n        \
    \    if space_count == 1 {\n                result += \"_\"\n            } else\
    \ if space_count > 2 {\n                result += \"-\"\n            }\n     \
    \   } else {\n            space_count = 0\n            result += string(c)\n \
    \       }\n    }\n    return result\n}\n", "    var result string\n    var spaces\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            spaces++\n\
    \            if spaces > 2 {\n                result += \"-\"\n              \
    \  spaces = 0\n            }\n        } else {\n            if spaces > 0 {\n\
    \                result += \"_\"\n                spaces = 0\n            }\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count >\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(char)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool\n  \
    \  var space_count int\n    for _, ch := range text {\n        if ch == ' ' {\n\
    \            if prev_space {\n                space_count++\n            } else\
    \ {\n                prev_space = true\n                space_count = 1\n    \
    \        }\n        } else {\n            if prev_space {\n                if\
    \ space_count > 2 {\n                    result += \"-\"\n                } else\
    \ {\n                    result += \"_\"\n                }\n            }\n \
    \           prev_space = false\n            result += string(ch)\n        }\n\
    \    }\n    if prev_space {\n        if space_count > 2 {\n            result\
    \ += \"-\"\n        } else {\n            result += \"_\"\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_char byte\n   \
    \ var prev_prev_char byte\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' ' {\n     \
    \           result += \"-\"\n            } else {\n                result += \"\
    _\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"-\"\n         \
    \   }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"-\"\n         \
    \   }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ byte\n    var prev_prev_char byte\n    for _, char := range text {\n       \
    \ if char == ' ' {\n            if prev_char == ' ' {\n                if prev_prev_char\
    \ == ' ' {\n                    result += \"-\"\n                } else {\n  \
    \                  result += \"_\"\n                }\n            } else {\n\
    \                result += \"_\"\n            }\n        } else {\n          \
    \  result += string(char)\n        }\n        prev_prev_char = prev_char\n   \
    \     prev_char = byte(char)\n    }\n    return result\n}\n", "    var result\
    \ string\n    var space_count int\n    for _, c := range text {\n        if c\
    \ == ' ' {\n            space_count++\n            if space_count == 1 {\n   \
    \             result += \"_\"\n            } else if space_count == 2 {\n    \
    \            result += \"-\"\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var last_char byte\n    var last_last_char byte\n\
    \    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n         \
    \   if last_char == ' ' && last_last_char == ' ' {\n                result +=\
    \ \"-\"\n            } else {\n                result += \"_\"\n            }\n\
    \        } else {\n            result += string(text[i])\n        }\n        last_last_char\
    \ = last_char\n        last_char = text[i]\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, c := range text {\n\
    \        if c == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count >\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var last_char byte\n   \
    \ var last_char_count int\n\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            if last_char == ' ' {\n                last_char_count\
    \ += 1\n            } else {\n                last_char = ' '\n              \
    \  last_char_count = 1\n            }\n        } else {\n            if last_char\
    \ == ' ' {\n                if last_char_count > 2 {\n                    result\
    \ += \"-\"\n                } else {\n                    result += \"_\"\n  \
    \              }\n            }\n            last_char = byte(char)\n        \
    \    last_char_count = 1\n        }\n        result += string(char)\n    }\n \
    \   return result\n}\n", "    var result string\n    var prevSpace bool\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prevSpace {\n  \
    \              result += \"-\"\n            } else {\n                result +=\
    \ \"_\"\n            }\n            prevSpace = true\n        } else {\n     \
    \       result += string(c)\n            prevSpace = false\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_char byte\n   \
    \ var space_count int\n    for _, char := range text {\n        if char == ' '\
    \ {\n            space_count++\n            if space_count == 1 {\n          \
    \      result += \"_\"\n            } else if space_count == 2 {\n           \
    \     result += \"-\"\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(char)\n        }\n        prev_char = byte(char)\n\
    \    }\n    return result\n}\n", "    var result string\n    var last_char_is_space\
    \ bool = false\n    var consecutive_spaces int = 0\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            if last_char_is_space {\n         \
    \       consecutive_spaces++\n            } else {\n                consecutive_spaces\
    \ = 1\n            }\n            last_char_is_space = true\n        } else {\n\
    \            if consecutive_spaces > 2 {\n                result += \"-\"\n  \
    \          } else {\n                for i := 0; i < consecutive_spaces; i++ {\n\
    \                    result += \"_\"\n                }\n            }\n     \
    \       result += string(char)\n            last_char_is_space = false\n     \
    \       consecutive_spaces = 0\n        }\n    }\n    if consecutive_spaces >\
    \ 2 {\n        result += \"-\"\n    } else {\n        for i := 0; i < consecutive_spaces;\
    \ i++ {\n            result += \"_\"\n        }\n    }\n    return result\n}\n",
  "    var result string\n    var prev_char byte\n    var prev_prev_char byte\n  \
    \  var prev_prev_prev_char byte\n    var prev_prev_prev_prev_char byte\n    for\
    \ i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            if prev_char\
    \ == ' ' && prev_prev_char == ' ' && prev_prev_prev_char == ' ' && prev_prev_prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_prev_prev_char = prev_prev_prev_char\n\
    \        prev_prev_prev_char = prev_prev_char\n        prev_prev_char = prev_char\n\
    \        prev_char = text[i]\n    }\n    return result\n}\n", "    var result\
    \ string\n    var prev_space bool\n    var space_count int\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ space_count++\n            } else {\n                space_count = 1\n     \
    \       }\n            prev_space = true\n        } else {\n            if prev_space\
    \ {\n                if space_count > 2 {\n                    result += \"-\"\
    \n                } else {\n                    result += \"_\"\n            \
    \    }\n            }\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    if prev_space {\n        if space_count > 2 {\n\
    \            result += \"-\"\n        } else {\n            result += \"_\"\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"-\"\n         \
    \   }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    var space_count int\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if !prev_space {\n                result += \"_\"\n     \
    \           prev_space = true\n                space_count = 1\n            }\
    \ else {\n                space_count++\n                if space_count > 2 {\n\
    \                    result += \"-\"\n                    space_count = 0\n  \
    \              }\n            }\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_char byte\n    var prev_prev_char byte\n \
    \   for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n          \
    \  if prev_char == ' ' && prev_prev_char == ' ' {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += string(text[i])\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = text[i]\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool = false\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_char byte\n    var prev_prev_char byte\n\
    \    for i, char := range text {\n        if i == 0 {\n            prev_char =\
    \ byte(char)\n            result += string(char)\n            continue\n     \
    \   }\n        if i == 1 {\n            prev_prev_char = byte(char)\n        \
    \    result += string(char)\n            continue\n        }\n        if byte(char)\
    \ == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' ' {\n     \
    \           result += \"-\"\n            } else {\n                result += \"\
    _\"\n            }\n        } else {\n            result += string(char)\n   \
    \     }\n        prev_prev_char = prev_char\n        prev_char = byte(char)\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_space bool\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if !prev_space {\n                result += \"_\"\n             \
    \   prev_space = true\n                space_count = 1\n            } else {\n\
    \                space_count++\n                if space_count > 2 {\n       \
    \             result += \"-\"\n                    space_count = 0\n         \
    \       }\n            }\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool = false\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' {\n    \
    \            result += \"-\"\n            } else {\n                result +=\
    \ \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_char = text[i]\n    }\n    return result\n}\n", "   \
    \ var result string\n    var prev_space bool = false\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n            prev_space = true\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, c := range text {\n\
    \        if c == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count >\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool = false\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_char byte\n\
    \    var prev_prev_char byte\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' ' {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var spaces int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            spaces++\n \
    \           if spaces == 1 {\n                result += \"_\"\n            } else\
    \ if spaces > 2 {\n                result += \"-\"\n            }\n        } else\
    \ {\n            spaces = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool\n  \
    \  var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                space_count++\n            } else\
    \ {\n                prev_space = true\n                space_count = 1\n    \
    \        }\n        } else {\n            if prev_space {\n                if\
    \ space_count > 2 {\n                    result += \"-\"\n                } else\
    \ {\n                    result += \"_\"\n                }\n            }\n \
    \           prev_space = false\n            result += string(c)\n        }\n \
    \   }\n    if prev_space {\n        if space_count > 2 {\n            result +=\
    \ \"-\"\n        } else {\n            result += \"_\"\n        }\n    }\n   \
    \ return result\n}\n", "    var result string\n    var prev_char byte\n    var\
    \ prev_prev_char byte\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' ' {\n     \
    \           result += \"-\"\n            } else {\n                result += \"\
    _\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_char byte\n\
    \    var prev_prev_char byte\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' ' {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result []rune\n    var space_count int\n\
    \    for _, r := range text {\n        if r == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result = append(result, '_')\n\
    \            } else if space_count == 2 {\n                result = append(result,\
    \ '-')\n            }\n        } else {\n            space_count = 0\n       \
    \     result = append(result, r)\n        }\n    }\n    return string(result)\n\
    }\n", "    var result string\n    var prev_space bool\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                prev_space\
    \ = true\n                space_count = 1\n            }\n        } else {\n \
    \           if prev_space {\n                if space_count > 2 {\n          \
    \          result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prev_space = false\n\
    \            result += string(c)\n        }\n    }\n    if prev_space {\n    \
    \    if space_count > 2 {\n            result += \"-\"\n        } else {\n   \
    \         result += \"_\"\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool = false\n    for _, ch := range text\
    \ {\n        if ch == ' ' {\n            if prev_space {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n            prev_space = true\n        } else {\n            result += string(ch)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, c := range text {\n\
    \        if c == ' ' {\n            space_count++\n            if space_count\
    \ > 2 {\n                result += \"-\"\n                space_count = 0\n  \
    \          }\n        } else {\n            if space_count > 0 {\n           \
    \     result += \"_\"\n                space_count = 0\n            }\n      \
    \      result += string(c)\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var space_count int\n    for _, c := range text {\n     \
    \   if c == ' ' {\n            space_count++\n            if space_count > 2 {\n\
    \                continue\n            }\n        } else {\n            space_count\
    \ = 0\n        }\n        if c == ' ' {\n            result += \"_\"\n       \
    \ } else {\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool = false\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n            prev_space = true\n        } else {\n           \
    \ result += string(c)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool = false\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, ch := range text {\n        if ch == ' ' {\n           \
    \ if prev_space {\n                result += \"-\"\n            } else {\n   \
    \             result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(ch)\n            prev_space =\
    \ false\n        }\n    }\n    return result\n}\n", "    var result string\n \
    \   var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result += \"-\"\n            } else {\n      \
    \          result += \"_\"\n            }\n            prev_space = true\n   \
    \     } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"-\"\n         \
    \   }\n        } else {\n            result += string(c)\n            space_count\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result string\n   \
    \ var prev_space bool\n    var space_count int\n    for _, c := range text {\n\
    \        if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                space_count = 1\n            }\n      \
    \      prev_space = true\n        } else {\n            if prev_space {\n    \
    \            if space_count > 2 {\n                    result += \"-\"\n     \
    \           } else {\n                    result += \"_\"\n                }\n\
    \            }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if !prev_space {\n                space_count = 1\n             \
    \   prev_space = true\n            } else {\n                space_count++\n \
    \           }\n            if space_count > 2 {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    var space_count int\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if !prev_space {\n                space_count = 1\n     \
    \           prev_space = true\n            } else {\n                space_count++\n\
    \            }\n            if space_count > 2 {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    var space_count int\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                space_count++\n        \
    \    } else {\n                space_count = 1\n            }\n            prev_space\
    \ = true\n        } else {\n            if prev_space {\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                } else {\n     \
    \               result += \"_\"\n                }\n            }\n          \
    \  result += string(c)\n            prev_space = false\n        }\n    }\n   \
    \ if prev_space {\n        if space_count > 2 {\n            result += \"-\"\n\
    \        } else {\n            result += \"_\"\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                space_count\
    \ = 1\n            }\n            prev_space = true\n        } else {\n      \
    \      if prev_space {\n                if space_count > 2 {\n               \
    \     result += \"-\"\n                } else {\n                    result +=\
    \ \"_\"\n                }\n            }\n            result += string(c)\n \
    \           prev_space = false\n        }\n    }\n    if prev_space {\n      \
    \  if space_count > 2 {\n            result += \"-\"\n        } else {\n     \
    \       result += \"_\"\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var prev_space bool\n    var space_count int\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ space_count++\n            } else {\n                space_count = 1\n     \
    \       }\n            prev_space = true\n        } else {\n            if prev_space\
    \ {\n                if space_count > 2 {\n                    result += \"-\"\
    \n                } else {\n                    result += \"_\"\n            \
    \    }\n            }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ byte\n    var prev_prev_char byte\n    for i, char := range text {\n       \
    \ if i == 0 {\n            prev_char = byte(char)\n            if char == ' '\
    \ {\n                result += \"_\"\n            } else {\n                result\
    \ += string(char)\n            }\n        } else if i == 1 {\n            prev_prev_char\
    \ = prev_char\n            prev_char = byte(char)\n            if char == ' '\
    \ {\n                if prev_char == ' ' {\n                    result += \"-\"\
    \n                } else {\n                    result += \"_\"\n            \
    \    }\n            } else {\n                result += string(char)\n       \
    \     }\n        } else {\n            if char == ' ' {\n                if prev_char\
    \ == ' ' && prev_prev_char == ' ' {\n                    result += \"-\"\n   \
    \             } else {\n                    result += \"_\"\n                }\n\
    \            } else {\n                result += string(char)\n            }\n\
    \            prev_prev_char = prev_char\n            prev_char = byte(char)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"-\"\n         \
    \   }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result []rune\n    var prev_space\
    \ bool = false\n    var space_count int = 0\n    for _, c := range text {\n  \
    \      if c == ' ' {\n            if prev_space {\n                space_count++\n\
    \            } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result = append(result, '-')\n\
    \                } else {\n                    for i := 0; i < space_count; i++\
    \ {\n                        result = append(result, '_')\n                  \
    \  }\n                }\n                prev_space = false\n            }\n \
    \           result = append(result, c)\n        }\n    }\n    if prev_space {\n\
    \        if space_count > 2 {\n            result = append(result, '-')\n    \
    \    } else {\n            for i := 0; i < space_count; i++ {\n              \
    \  result = append(result, '_')\n            }\n        }\n    }\n    return string(result)\n\
    }\n", "    var result string\n    var prev_space bool\n    var space_count int\n\
    \    for _, char := range text {\n        if char == ' ' {\n            if !prev_space\
    \ {\n                result += \"_\"\n                prev_space = true\n    \
    \            space_count = 1\n            } else {\n                space_count\
    \ += 1\n                if space_count == 3 {\n                    result += \"\
    -\"\n                    space_count = 0\n                }\n            }\n \
    \       } else {\n            result += string(char)\n            prev_space =\
    \ false\n        }\n    }\n    return result\n}\n", "    var result string\n \
    \   var prev_char byte\n    var curr_char byte\n    var space_count int\n    for\
    \ i := 0; i < len(text); i++ {\n        curr_char = text[i]\n        if curr_char\
    \ == ' ' {\n            space_count++\n            if space_count == 1 {\n   \
    \             result += string(curr_char)\n            } else if space_count ==\
    \ 2 {\n                result += \"_\"\n            }\n        } else {\n    \
    \        if space_count > 2 {\n                result += \"-\"\n            }\n\
    \            result += string(curr_char)\n            space_count = 0\n      \
    \  }\n        prev_char = curr_char\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool = false\n    for _, c := range text {\n\
    \        if c == ' ' {\n            if prev_space {\n                result +=\
    \ \"-\"\n            } else {\n                result += \"_\"\n            }\n\
    \            prev_space = true\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_char byte = ' '\n    for _, char := range\
    \ text {\n        if char == ' ' {\n            if prev_char == ' ' {\n      \
    \          result += \"-\"\n            } else {\n                result += \"\
    _\"\n            }\n        } else {\n            result += string(char)\n   \
    \     }\n        prev_char = byte(char)\n    }\n    return result\n}\n", "   \
    \ var result string\n    var prev_space bool\n    var space_count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            space_count++\n   \
    \         if space_count > 2 {\n                if !prev_space {\n           \
    \         result += \"-\"\n                }\n            } else {\n         \
    \       result += \"_\"\n            }\n            prev_space = true\n      \
    \  } else {\n            space_count = 0\n            result += string(c)\n  \
    \          prev_space = false\n        }\n    }\n    return result\n}\n", "  \
    \  var result []byte\n    var space_count int\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            space_count++\n            if\
    \ space_count > 2 {\n                continue\n            }\n        } else {\n\
    \            space_count = 0\n        }\n        result = append(result, text[i])\n\
    \    }\n    return string(result)\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                continue\n            }\n \
    \       } else {\n            space_count = 0\n        }\n        result += string(c)\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result += \"-\"\n            } else {\n      \
    \          result += \"_\"\n            }\n            prev_space = true\n   \
    \     } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                result += \"-\"\n         \
    \       space_count = 0\n            }\n        } else {\n            if space_count\
    \ > 0 {\n                result += \"_\"\n                space_count = 0\n  \
    \          }\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                space_count\
    \ = 1\n            }\n            prev_space = true\n        } else {\n      \
    \      if prev_space {\n                if space_count > 2 {\n               \
    \     result += \"-\"\n                } else {\n                    result +=\
    \ \"_\"\n                }\n            }\n            prev_space = false\n  \
    \          result += string(c)\n        }\n    }\n    if prev_space {\n      \
    \  if space_count > 2 {\n            result += \"-\"\n        } else {\n     \
    \       result += \"_\"\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var prev_space bool = false\n    for _, c := range text {\n    \
    \    if c == ' ' {\n            if prev_space {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \          prev_space = true\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool\n    var space_count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               space_count++\n            } else {\n                space_count\
    \ = 1\n            }\n            prev_space = true\n        } else {\n      \
    \      if prev_space {\n                if space_count > 2 {\n               \
    \     result += \"-\"\n                } else {\n                    result +=\
    \ \"_\"\n                }\n            }\n            result += string(c)\n \
    \           prev_space = false\n        }\n    }\n    if prev_space {\n      \
    \  if space_count > 2 {\n            result += \"-\"\n        } else {\n     \
    \       result += \"_\"\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var prev_space bool = false\n    for _, c := range text {\n    \
    \    if c == ' ' {\n            if prev_space {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \          prev_space = true\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool = false\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_char byte\n    var curr_char byte\n\
    \    var space_count int\n    for i := 0; i < len(text); i++ {\n        curr_char\
    \ = text[i]\n        if curr_char == ' ' {\n            space_count++\n      \
    \      if space_count > 2 {\n                continue\n            }\n       \
    \ } else {\n            space_count = 0\n        }\n        if curr_char == '\
    \ ' && prev_char == ' ' {\n            result += \"-\"\n        } else {\n   \
    \         result += string(curr_char)\n        }\n        prev_char = curr_char\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result += \"-\"\n            } else {\n      \
    \          result += \"_\"\n            }\n            prev_space = true\n   \
    \     } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"-\"\n         \
    \   }\n        } else {\n            result += string(c)\n            space_count\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result string\n   \
    \ var prev_char byte\n    var prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n", "    var result string\n    var last_char\
    \ byte\n    var space_count int\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            space_count++\n            if space_count == 1 {\n   \
    \             result += \"_\"\n            } else if space_count == 2 {\n    \
    \            result += \"-\"\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(char)\n        }\n        last_char = byte(char)\n\
    \    }\n    if last_char == ' ' {\n        result += \"_\"\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_char byte\n    var space_count\
    \ int\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n   \
    \         space_count++\n            if space_count == 1 {\n                result\
    \ += string(text[i])\n            } else if space_count == 2 {\n             \
    \   result += \"_\"\n            }\n        } else {\n            if space_count\
    \ > 2 {\n                result += \"-\"\n            }\n            space_count\
    \ = 0\n            result += string(text[i])\n        }\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result += \"-\"\n            } else {\n      \
    \          result += \"_\"\n            }\n            prev_space = true\n   \
    \     } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            count++\n\
    \            if count == 1 {\n                result += \"_\"\n            } else\
    \ if count == 2 {\n                result += \"-\"\n            }\n        } else\
    \ {\n            count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool = false\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_char byte\n\
    \    var prev_prev_char byte\n    var prev_prev_prev_char byte\n    var prev_prev_prev_prev_char\
    \ byte\n    var prev_prev_prev_prev_prev_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' && prev_prev_prev_char == ' ' && prev_prev_prev_prev_char == ' ' && prev_prev_prev_prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_prev_prev_prev_char = prev_prev_prev_prev_char\n\
    \        prev_prev_prev_prev_char = prev_prev_prev_char\n        prev_prev_prev_char\
    \ = prev_prev_char\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_space bool\n\
    \    var space_count int\n    for _, ch := range text {\n        if ch == ' '\
    \ {\n            space_count++\n            if space_count == 1 {\n          \
    \      result += \"_\"\n            } else if space_count == 2 {\n           \
    \     result += \"-\"\n            }\n            prev_space = true\n        }\
    \ else {\n            space_count = 0\n            result += string(ch)\n    \
    \        prev_space = false\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool = false\n    for _, c := range text {\n\
    \        if c == ' ' {\n            if prev_space {\n                result +=\
    \ \"-\"\n            } else {\n                result += \"_\"\n            }\n\
    \            prev_space = true\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool\n    var space_count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               space_count++\n            } else {\n                prev_space\
    \ = true\n                space_count = 1\n            }\n        } else {\n \
    \           if prev_space {\n                if space_count > 2 {\n          \
    \          result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prev_space = false\n\
    \            result += string(c)\n        }\n    }\n    if prev_space {\n    \
    \    if space_count > 2 {\n            result += \"-\"\n        } else {\n   \
    \         result += \"_\"\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool = false\n    for _, c := range text {\n\
    \        if c == ' ' {\n            if prev_space {\n                result +=\
    \ \"-\"\n            } else {\n                result += \"_\"\n            }\n\
    \            prev_space = true\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_char rune\n    var prev_prev_char rune\n \
    \   for _, char := range text {\n        if char == ' ' {\n            if prev_char\
    \ == ' ' {\n                if prev_prev_char == ' ' {\n                    result\
    \ += \"-\"\n                } else {\n                    result += \"_\"\n  \
    \              }\n            } else {\n                result += \"_\"\n    \
    \        }\n        } else {\n            result += string(char)\n        }\n\
    \        prev_prev_char = prev_char\n        prev_char = char\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool\n    var consecutive_spaces\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            if !prev_space\
    \ {\n                consecutive_spaces = 1\n                prev_space = true\n\
    \                result += \"_\"\n            } else {\n                consecutive_spaces\
    \ += 1\n                if consecutive_spaces > 2 {\n                    result\
    \ += \"-\"\n                } else {\n                    result += \"_\"\n  \
    \              }\n            }\n        } else {\n            consecutive_spaces\
    \ = 0\n            prev_space = false\n            result += string(c)\n     \
    \   }\n    }\n    return result\n}\n", "    var result string\n    var spaces\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            spaces++\n\
    \            if spaces > 2 {\n                continue\n            }\n      \
    \  } else {\n            spaces = 0\n        }\n        if c == ' ' {\n      \
    \      result += \"-\"\n        } else {\n            result += string(c)\n  \
    \      }\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ byte = ' '\n    var prev_prev_char byte = ' '\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    var space_count int\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                space_count++\n        \
    \    } else {\n                prev_space = true\n                space_count\
    \ = 1\n            }\n        } else {\n            if prev_space {\n        \
    \        if space_count > 2 {\n                    result += \"-\"\n         \
    \       } else {\n                    result += \"_\"\n                }\n   \
    \         }\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    if prev_space {\n        if space_count > 2 {\n       \
    \     result += \"-\"\n        } else {\n            result += \"_\"\n       \
    \ }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var last_char\
    \ byte = ' '\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' '\
    \ {\n            if last_char == ' ' {\n                result += \"-\"\n    \
    \        } else {\n                result += \"_\"\n            }\n        } else\
    \ {\n            result += string(text[i])\n        }\n        last_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_char byte\n\
    \    var prev_prev_char byte\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' ' {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                result += \"-\"\n         \
    \       space_count = 0\n            }\n        } else {\n            space_count\
    \ = 0\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var last_char_is_space bool = false\n    var\
    \ consecutive_spaces int = 0\n    for _, char := range text {\n        if char\
    \ == ' ' {\n            if last_char_is_space {\n                consecutive_spaces++\n\
    \            } else {\n                consecutive_spaces = 1\n            }\n\
    \            last_char_is_space = true\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result += \"-\"\n            } else {\n             \
    \   for i := 0; i < consecutive_spaces; i++ {\n                    result += \"\
    _\"\n                }\n            }\n            consecutive_spaces = 0\n  \
    \          last_char_is_space = false\n            result += string(char)\n  \
    \      }\n    }\n    if consecutive_spaces > 2 {\n        result += \"-\"\n  \
    \  } else {\n        for i := 0; i < consecutive_spaces; i++ {\n            result\
    \ += \"_\"\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n        } else {\n            space_count = 0\n   \
    \         result += string(c)\n        }\n    }\n    return result\n}\n", "  \
    \  var result string\n    var prev_space bool\n    var space_count int\n    for\
    \ _, char := range text {\n        if char == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                space_count\
    \ = 1\n            }\n            prev_space = true\n        } else {\n      \
    \      if prev_space {\n                if space_count > 2 {\n               \
    \     result += \"-\"\n                } else {\n                    result +=\
    \ \"_\"\n                }\n            }\n            result += string(char)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool = false\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_char byte\n    var count int\n    for\
    \ i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            count++\n\
    \            if count > 2 {\n                if prev_char != '-' {\n         \
    \           result += \"-\"\n                }\n            } else {\n       \
    \         result += \"_\"\n            }\n        } else {\n            count\
    \ = 0\n            result += string(text[i])\n        }\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, ch := range text {\n        if ch == ' ' {\n           \
    \ if prev_space {\n                result += \"-\"\n            } else {\n   \
    \             result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(ch)\n            prev_space =\
    \ false\n        }\n    }\n    return result\n}\n", "    var result string\n \
    \   var prev_space bool = false\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result += \"-\"\n      \
    \      } else {\n                result += \"_\"\n            }\n            prev_space\
    \ = true\n        } else {\n            result += string(c)\n            prev_space\
    \ = false\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count == 1 {\n              \
    \  result += \"_\"\n            } else if space_count == 2 {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(c)\n        }\n    }\n    return result\n}\n",
  "    var result string\n    var prev_space bool\n    var space_count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if !prev_space {\n\
    \                result += \"_\"\n                prev_space = true\n        \
    \        space_count = 1\n            } else {\n                space_count++\n\
    \                if space_count > 2 {\n                    result += \"-\"\n \
    \                   space_count = 0\n                }\n            }\n      \
    \  } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                space_count++\n            } else\
    \ {\n                space_count = 1\n            }\n            prev_space =\
    \ true\n        } else {\n            if prev_space {\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                } else {\n     \
    \               result += \"_\"\n                }\n            }\n          \
    \  result += string(c)\n            prev_space = false\n        }\n    }\n   \
    \ if prev_space {\n        if space_count > 2 {\n            result += \"-\"\n\
    \        } else {\n            result += \"_\"\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var last_char byte\n    for i := 0; i < len(text);\
    \ i++ {\n        if text[i] == ' ' {\n            if last_char == ' ' {\n    \
    \            result += \"-\"\n            } else {\n                result +=\
    \ \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        last_char = text[i]\n    }\n    return result\n}\n", "   \
    \ var result string\n    var space_count int\n    for _, c := range text {\n \
    \       if c == ' ' {\n            space_count++\n            if space_count >\
    \ 2 {\n                result += \"-\"\n                space_count = 0\n    \
    \        }\n        } else {\n            if space_count > 0 {\n             \
    \   result += \"_\"\n                space_count = 0\n            }\n        \
    \    result += string(c)\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_char byte\n    var prev_prev_char byte\n    for\
    \ i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            if prev_char\
    \ == ' ' && prev_prev_char == ' ' {\n                result += \"-\"\n       \
    \     } else {\n                result += \"_\"\n            }\n        } else\
    \ {\n            result += string(text[i])\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = text[i]\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_char byte\n    for i, char := range text {\n\
    \        if char == ' ' {\n            if prev_char == ' ' {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n        } else {\n            result += string(char)\n        }\n\
    \        if i > 0 {\n            prev_char = text[i-1]\n        }\n    }\n   \
    \ return result\n}\n", "    var result string\n    var space_count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            space_count++\n   \
    \         if space_count > 2 {\n                continue\n            }\n    \
    \    } else {\n            space_count = 0\n        }\n        result += string(c)\n\
    \    }\n    return result\n}\n", "    var result string\n    var prev_space bool\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                space_count++\n            } else\
    \ {\n                space_count = 1\n            }\n            prev_space =\
    \ true\n        } else {\n            if prev_space {\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                } else {\n     \
    \               result += \"_\"\n                }\n            }\n          \
    \  result += string(c)\n            prev_space = false\n        }\n    }\n   \
    \ if prev_space {\n        if space_count > 2 {\n            result += \"-\"\n\
    \        } else {\n            result += \"_\"\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool = false\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n            prev_space = true\n        } else {\n           \
    \ result += string(c)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool = false\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\n\
    \    var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if !prev_space {\n                space_count = 1\n             \
    \   prev_space = true\n            } else {\n                space_count++\n \
    \           }\n            if space_count > 2 {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            prev_space = false\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool\n    var space_count int\n    for _, c := range text {\n        if c ==\
    \ ' ' {\n            if !prev_space {\n                result += \"_\"\n     \
    \           prev_space = true\n                space_count = 1\n            }\
    \ else {\n                space_count++\n                if space_count > 2 {\n\
    \                    result += \"-\"\n                    space_count = 0\n  \
    \              }\n            }\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_char byte\n    var prev_prev_char byte\n \
    \   for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n          \
    \  if prev_char == ' ' && prev_prev_char == ' ' {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += string(text[i])\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = text[i]\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool = false\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool = false\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n            prev_space = true\n        } else {\n           \
    \ result += string(c)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool = false\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"-\"\n         \
    \   }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ byte\n    var prev_prev_char byte\n    var prev_prev_prev_char byte\n    for\
    \ _, char := range text {\n        if char == ' ' {\n            if prev_char\
    \ == ' ' && prev_prev_char == ' ' && prev_prev_prev_char == ' ' {\n          \
    \      result += \"-\"\n            } else {\n                result += \"_\"\n\
    \            }\n        } else {\n            result += string(char)\n       \
    \ }\n        prev_prev_prev_char = prev_prev_char\n        prev_prev_char = prev_char\n\
    \        prev_char = byte(char)\n    }\n    return result\n}\n", "    var result\
    \ string\n    var prev_char byte\n    var prev_prev_char byte\n    for i := 0;\
    \ i < len(text); i++ {\n        if text[i] == ' ' {\n            if prev_char\
    \ == ' ' && prev_prev_char == ' ' {\n                result += \"-\"\n       \
    \     } else {\n                result += \"_\"\n            }\n        } else\
    \ {\n            result += string(text[i])\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = text[i]\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count >\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(char)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool\n  \
    \  var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if !prev_space {\n                prev_space = true\n           \
    \     space_count = 1\n            } else {\n                space_count++\n \
    \           }\n            if space_count > 2 {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            prev_space = false\n            space_count = 0\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, c := range text {\n\
    \        if c == ' ' {\n            space_count++\n            if space_count\
    \ > 2 {\n                result += \"-\"\n                space_count = 0\n  \
    \          }\n        } else {\n            if space_count > 0 {\n           \
    \     result += \"_\"\n                space_count = 0\n            }\n      \
    \      result += string(c)\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool\n    var space_count int\n    for _,\
    \ c := range text {\n        if c == ' ' {\n            if !prev_space {\n   \
    \             space_count = 1\n                prev_space = true\n           \
    \ } else {\n                space_count++\n            }\n            if space_count\
    \ > 2 {\n                result += \"-\"\n            } else {\n             \
    \   result += \"_\"\n            }\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_char byte\n    var space_count int\n    for\
    \ _, char := range text {\n        if char == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += string(char)\n \
    \           } else if space_count == 2 {\n                result += \"_\"\n  \
    \          }\n        } else {\n            if space_count > 2 {\n           \
    \     result += \"-\"\n            }\n            space_count = 0\n          \
    \  result += string(char)\n        }\n        prev_char = byte(char)\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool\n  \
    \  var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if !prev_space {\n                prev_space = true\n           \
    \     space_count = 1\n            } else {\n                space_count++\n \
    \           }\n            if space_count > 2 {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            prev_space = false\n            space_count = 0\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var last_char byte\n    var last_char_count int\n \
    \   for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n          \
    \  if last_char == ' ' {\n                last_char_count++\n            } else\
    \ {\n                last_char = ' '\n                last_char_count = 1\n  \
    \          }\n            if last_char_count > 2 {\n                result +=\
    \ \"-\"\n            } else {\n                result += \"_\"\n            }\n\
    \        } else {\n            last_char = text[i]\n            last_char_count\
    \ = 0\n            result += string(text[i])\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool = false\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n            prev_space = true\n        } else {\n           \
    \ result += string(c)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                prev_space\
    \ = true\n                space_count = 1\n            }\n        } else {\n \
    \           if prev_space {\n                if space_count > 2 {\n          \
    \          result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prev_space = false\n\
    \            result += string(c)\n        }\n    }\n    if prev_space {\n    \
    \    if space_count > 2 {\n            result += \"-\"\n        } else {\n   \
    \         result += \"_\"\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool\n    var space_count int\n    for _,\
    \ c := range text {\n        if c == ' ' {\n            if prev_space {\n    \
    \            space_count++\n            } else {\n                prev_space =\
    \ true\n                space_count = 1\n            }\n        } else {\n   \
    \         if prev_space {\n                if space_count > 2 {\n            \
    \        result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prev_space = false\n\
    \            result += string(c)\n        }\n    }\n    if prev_space {\n    \
    \    if space_count > 2 {\n            result += \"-\"\n        } else {\n   \
    \         result += \"_\"\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool = false\n    for _, ch := range text\
    \ {\n        if ch == ' ' {\n            if prev_space {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n            prev_space = true\n        } else {\n            result += string(ch)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var spaces int\n    for _, c := range text {\n    \
    \    if c == ' ' {\n            spaces++\n            if spaces == 1 {\n     \
    \           result += string(c)\n            }\n        } else {\n           \
    \ if spaces > 2 {\n                result += \"-\"\n            }\n          \
    \  result += string(c)\n            spaces = 0\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool = false\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count > 2 {\n                result += \"-\"\n          \
    \  }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ byte\n    var prev_prev_char byte\n    for i := 0; i < len(text); i++ {\n  \
    \      if text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(text[i])\n        }\n        prev_prev_char = prev_char\n        prev_char\
    \ = text[i]\n    }\n    return result\n}\n", "    var result string\n    var prev\
    \ rune\n    for _, c := range text {\n        if c == ' ' {\n            if prev\
    \ == ' ' {\n                result += \"-\"\n            } else {\n          \
    \      result += \"_\"\n            }\n        } else {\n            result +=\
    \ string(c)\n        }\n        prev = c\n    }\n    return result\n}\n", "  \
    \  var result string\n    var prev_char byte\n    var prev_prev_char byte\n  \
    \  for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n           \
    \ if prev_char == ' ' && prev_prev_char == ' ' {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += string(text[i])\n        }\n        prev_prev_char\
    \ = prev_char\n        prev_char = text[i]\n    }\n    return result\n}\n", " \
    \   var result string\n    var last_char rune\n    for _, char := range text {\n\
    \        if char == ' ' {\n            if last_char == ' ' {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n        } else {\n            result += string(char)\n        }\n\
    \        last_char = char\n    }\n    return result\n}\n", "    result := \"\"\
    \n    space_count := 0\n    for _, c := range text {\n        if c == ' ' {\n\
    \            space_count++\n            if space_count > 2 {\n               \
    \ continue\n            }\n        } else {\n            space_count = 0\n   \
    \     }\n        if c == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var prev_space bool = false\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool = false\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n            prev_space = true\n        } else {\n           \
    \ result += string(c)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool = false\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result += \"-\"\n            } else {\n      \
    \          result += \"_\"\n            }\n            prev_space = true\n   \
    \     } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ rune\n    var prev_prev_char rune\n    for _, char := range text {\n       \
    \ if char == ' ' {\n            if prev_char == ' ' {\n                if prev_prev_char\
    \ == ' ' {\n                    result += \"-\"\n                } else {\n  \
    \                  result += \"_\"\n                }\n            } else {\n\
    \                result += \"_\"\n            }\n        } else {\n          \
    \  result += string(char)\n        }\n        prev_prev_char = prev_char\n   \
    \     prev_char = char\n    }\n    return result\n}\n", "    var result string\n\
    \    var prev_space bool\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if !prev_space {\n                result\
    \ += \"_\"\n                prev_space = true\n                space_count = 1\n\
    \            } else {\n                space_count++\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                    space_count\
    \ = 0\n                }\n            }\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool = false\n    for _, c :=\
    \ range text {\n        if c == ' ' {\n            if prev_space {\n         \
    \       result += \"-\"\n            } else {\n                result += \"_\"\
    \n            }\n            prev_space = true\n        } else {\n           \
    \ result += string(c)\n            prev_space = false\n        }\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_char byte\n    var prev_prev_char\
    \ byte\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n  \
    \          if prev_char == ' ' && prev_prev_char == ' ' {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += string(text[i])\n        }\n   \
    \     prev_prev_char = prev_char\n        prev_char = text[i]\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool = false\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result += \"-\"\n            } else {\n      \
    \          result += \"_\"\n            }\n            prev_space = true\n   \
    \     } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, char := range text {\n        if char == ' ' {\n           \
    \ space_count++\n            if space_count == 1 {\n                result +=\
    \ \"_\"\n            } else if space_count > 2 {\n                result += \"\
    -\"\n            }\n        } else {\n            space_count = 0\n          \
    \  result += string(char)\n        }\n    }\n    return result\n}\n", "    var\
    \ result string\n    var prev_space bool\n    var space_count int\n    for _,\
    \ c := range text {\n        if c == ' ' {\n            if prev_space {\n    \
    \            space_count++\n            } else {\n                space_count\
    \ = 1\n            }\n            prev_space = true\n        } else {\n      \
    \      if prev_space {\n                if space_count > 2 {\n               \
    \     result += \"-\"\n                } else {\n                    result +=\
    \ \"_\"\n                }\n            }\n            result += string(c)\n \
    \           prev_space = false\n        }\n    }\n    if prev_space {\n      \
    \  if space_count > 2 {\n            result += \"-\"\n        } else {\n     \
    \       result += \"_\"\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    var last_char byte\n    var last_char_is_space bool\n    var space_count\
    \ int\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n   \
    \         if last_char_is_space {\n                space_count++\n           \
    \ } else {\n                space_count = 1\n            }\n            last_char_is_space\
    \ = true\n        } else {\n            if last_char_is_space {\n            \
    \    if space_count > 2 {\n                    result += \"-\"\n             \
    \   } else {\n                    result += \"_\"\n                }\n       \
    \     }\n            result += string(text[i])\n            last_char_is_space\
    \ = false\n        }\n        last_char = text[i]\n    }\n    return result\n\
    }\n", "    var result string\n    var prev_space bool\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            if prev_space {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n            prev_space = true\n        } else {\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, c := range text {\n\
    \        if c == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_char byte\n   \
    \ var space_count int\n    for i := 0; i < len(text); i++ {\n        if text[i]\
    \ == ' ' {\n            space_count++\n            if space_count > 2 {\n    \
    \            result += \"-\"\n                space_count = 0\n            }\n\
    \        } else {\n            if space_count > 0 {\n                result +=\
    \ \"_\"\n                space_count = 0\n            }\n            result +=\
    \ string(text[i])\n        }\n        prev_char = text[i]\n    }\n    return result\n\
    }\n", "    var result string\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool = false\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_space bool\
    \ = false\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result += \"-\"\n            } else {\n      \
    \          result += \"_\"\n            }\n            prev_space = true\n   \
    \     } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                result += \"-\"\n         \
    \       space_count = 0\n            }\n        } else {\n            if space_count\
    \ > 0 {\n                result += \"_\"\n                space_count = 0\n  \
    \          }\n            result += string(c)\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var last_char byte\n    var space_count int\n\
    \    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n         \
    \   space_count++\n            if space_count > 2 {\n                continue\n\
    \            }\n        } else {\n            space_count = 0\n        }\n   \
    \     if text[i] == ' ' && last_char == ' ' {\n            result += \"-\"\n \
    \       } else {\n            result += string(text[i])\n        }\n        last_char\
    \ = text[i]\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ byte\n    var space_count int\n    for i := 0; i < len(text); i++ {\n      \
    \  if text[i] == ' ' {\n            space_count++\n            if space_count\
    \ > 2 {\n                if prev_char != '-' {\n                    result +=\
    \ \"-\"\n                }\n            } else {\n                result += \"\
    _\"\n            }\n        } else {\n            result += string(text[i])\n\
    \            space_count = 0\n        }\n        prev_char = text[i]\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool\n  \
    \  var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if !prev_space {\n                space_count = 1\n             \
    \   prev_space = true\n            } else {\n                space_count++\n \
    \           }\n            if space_count > 2 {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_space\
    \ bool = false\n    for _, c := range text {\n        if c == ' ' {\n        \
    \    if prev_space {\n                result += \"-\"\n            } else {\n\
    \                result += \"_\"\n            }\n            prev_space = true\n\
    \        } else {\n            result += string(c)\n            prev_space = false\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var prev_char\
    \ byte\n    var curr_char byte\n    var count int\n    for i := 0; i < len(text);\
    \ i++ {\n        curr_char = text[i]\n        if curr_char == ' ' {\n        \
    \    count++\n            if count > 2 {\n                result += \"-\"\n  \
    \              count = 0\n            }\n        } else {\n            if prev_char\
    \ == ' ' {\n                result += \"_\"\n            }\n            result\
    \ += string(curr_char)\n            count = 0\n        }\n        prev_char =\
    \ curr_char\n    }\n    if prev_char == ' ' {\n        result += \"_\"\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool\n  \
    \  var space_count int\n    for _, c := range text {\n        if c == ' ' {\n\
    \            if prev_space {\n                space_count++\n            } else\
    \ {\n                space_count = 1\n            }\n            prev_space =\
    \ true\n        } else {\n            if prev_space {\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                } else {\n     \
    \               result += \"_\"\n                }\n            }\n          \
    \  result += string(c)\n            prev_space = false\n        }\n    }\n   \
    \ if prev_space {\n        if space_count > 2 {\n            result += \"-\"\n\
    \        } else {\n            result += \"_\"\n        }\n    }\n    return result\n\
    }\n", "    var result string\n    var space_count int\n    for _, c := range text\
    \ {\n        if c == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"-\"\n            }\n        } else {\n    \
    \        space_count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_space bool = false\n\
    \    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n", "    var result string\n    var prev_char byte\n\
    \    var prev_prev_char byte\n    for i := 0; i < len(text); i++ {\n        if\
    \ text[i] == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' ' {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = text[i]\n\
    \    }\n    return result\n}\n", "    var result []byte\n    var space_count int\
    \ = 0\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n   \
    \         space_count++\n            if space_count > 2 {\n                result\
    \ = append(result, '-')\n                space_count = 0\n            }\n    \
    \    } else {\n            if space_count > 0 {\n                result = append(result,\
    \ '_')\n                space_count = 0\n            }\n            result = append(result,\
    \ text[i])\n        }\n    }\n    if space_count > 0 {\n        result = append(result,\
    \ '_')\n    }\n    return string(result)\n}\n", "    var result string\n    var\
    \ prev_char byte\n    var curr_char byte\n    var space_count int\n    for i :=\
    \ 0; i < len(text); i++ {\n        curr_char = text[i]\n        if curr_char ==\
    \ ' ' {\n            space_count++\n            if space_count == 1 {\n      \
    \          result += string(curr_char)\n            } else if space_count == 2\
    \ {\n                result += \"_\"\n            }\n        } else {\n      \
    \      if space_count > 2 {\n                result += \"-\"\n            }\n\
    \            space_count = 0\n            result += string(curr_char)\n      \
    \  }\n        prev_char = curr_char\n    }\n    return result\n}\n", "    var\
    \ result string\n    var last_char byte\n    var last_last_char byte\n    for\
    \ i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            if last_char\
    \ == ' ' {\n                if last_last_char == ' ' {\n                    result\
    \ += \"-\"\n                } else {\n                    result += \"_\"\n  \
    \              }\n            } else {\n                result += \"_\"\n    \
    \        }\n        } else {\n            result += string(text[i])\n        }\n\
    \        last_last_char = last_char\n        last_char = text[i]\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev_space bool = false\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev_space {\n \
    \               result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prev_space = true\n        } else {\n \
    \           result += string(c)\n            prev_space = false\n        }\n \
    \   }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
