language: go_test.go
name: HumanEval_112_reverse_delete
results:
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ res == reverse(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwc0jcjp_test.go:17:13: undefined: strings

    /tmp/tmpnwc0jcjp_test.go:21:38: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    var isPalindrome bool\n    for _,\
    \ char := range s {\n        if !strings.Contains(c, string(char)) {\n       \
    \     result += string(char)\n        }\n    }\n    isPalindrome = is_palindrome(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7zcj8vsf_test.go:18:13: undefined: strings

    /tmp/tmp7zcj8vsf_test.go:22:20: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, v := range s {\n        if\
    \ !strings.Contains(c, string(v)) {\n            result += string(v)\n       \
    \ }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5b_sz4b_test.go:17:13: undefined: strings

    /tmp/tmpm5b_sz4b_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, v := range s {\n        if\
    \ !contains(c, string(v)) {\n            result += string(v)\n        }\n    }\n\
    \    return []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph8ghq7a1_test.go:17:13: undefined: contains

    /tmp/tmph8ghq7a1_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, v := range s {\n        if\
    \ !strings.Contains(c, string(v)) {\n            result += string(v)\n       \
    \ }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5b_sz4b_test.go:17:13: undefined: strings

    /tmp/tmpm5b_sz4b_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !contains(c, char) {\n            result += string(char)\n        }\n \
    \   }\n    return []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprb81r0fq_test.go:17:13: undefined: contains

    /tmp/tmprb81r0fq_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, ch := range s {\n       \
    \ if !strings.Contains(c, string(ch)) {\n            result += string(ch)\n  \
    \      }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq37tvxbw_test.go:17:13: undefined: strings

    /tmp/tmpq37tvxbw_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsdtc1f0_test.go:16:13: undefined: strings

    /tmp/tmphsdtc1f0_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == Reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp99506x_i_test.go:16:13: undefined: strings

    /tmp/tmp99506x_i_test.go:18:34: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, v := range s {\n        if\
    \ !strings.Contains(c, string(v)) {\n            result += string(v)\n       \
    \ }\n    }\n    return []interface{}{result, result == reverse(result)}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpben_d5z6_test.go:17:13: undefined: strings

    /tmp/tmpben_d5z6_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    return []interface{}{s, s == Reverse(s)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpljr8g988_test.go:16:13: undefined: strings

    /tmp/tmpljr8g988_test.go:18:34: undefined: Reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6piwwno_test.go:17:13: undefined: strings

    /tmp/tmpj6piwwno_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6piwwno_test.go:17:13: undefined: strings

    /tmp/tmpj6piwwno_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.ContainsRune(c, char) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe74l29rq_test.go:17:13: undefined: strings

    /tmp/tmpe74l29rq_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ is_palindrome(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o06dx3d_test.go:17:13: undefined: strings

    /tmp/tmp3o06dx3d_test.go:21:31: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.ContainsRune(c, char) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdf8tn5qz_test.go:17:13: undefined: strings

    /tmp/tmpdf8tn5qz_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ is_palindrome(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o06dx3d_test.go:17:13: undefined: strings

    /tmp/tmp3o06dx3d_test.go:21:31: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    var isPalindrome bool\n    for _,\
    \ char := range s {\n        if !strings.Contains(c, string(char)) {\n       \
    \     result += string(char)\n        }\n    }\n    if result == reverse(result)\
    \ {\n        isPalindrome = true\n    }\n    return []interface{}{result, isPalindrome}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0aupt8u6_test.go:18:13: undefined: strings

    /tmp/tmp0aupt8u6_test.go:22:18: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ is_palindrome(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o06dx3d_test.go:17:13: undefined: strings

    /tmp/tmp3o06dx3d_test.go:21:31: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ res == reverse(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwc0jcjp_test.go:17:13: undefined: strings

    /tmp/tmpnwc0jcjp_test.go:21:38: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphsdtc1f0_test.go:16:13: undefined: strings

    /tmp/tmphsdtc1f0_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, char := range c {\n        s = strings.Replace(s,\
    \ string(char), \"\", -1)\n    }\n    return []interface{}{s, is_palindrome(s)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsa1h0g32_test.go:16:13: undefined: strings

    /tmp/tmpsa1h0g32_test.go:18:29: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ is_palindrome(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o06dx3d_test.go:17:13: undefined: strings

    /tmp/tmp3o06dx3d_test.go:21:31: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, v := range s {\n        if\
    \ !strings.Contains(c, string(v)) {\n            result += string(v)\n       \
    \ }\n    }\n    return []interface{}{result, result == reverse(result)}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpben_d5z6_test.go:17:13: undefined: strings

    /tmp/tmpben_d5z6_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp7k0lsj2q_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp7k0lsj2q_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    var isPalindrome bool\n    for _,\
    \ char := range s {\n        if !strings.Contains(c, string(char)) {\n       \
    \     result += string(char)\n        }\n    }\n    isPalindrome = result == reverse(result)\n\
    \    return []interface{}{result, isPalindrome}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpatofuwys_test.go:18:13: undefined: strings

    /tmp/tmpatofuwys_test.go:22:30: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, v := range s {\n        if\
    \ !strings.Contains(c, string(v)) {\n            result += string(v)\n       \
    \ }\n    }\n    return []interface{}{result, result == reverse(result)}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpben_d5z6_test.go:17:13: undefined: strings

    /tmp/tmpben_d5z6_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, v := range s {\n        if !strings.Contains(c,\
    \ string(v)) {\n            res += string(v)\n        }\n    }\n    return []interface{}{res,\
    \ is_palindrome(res)}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3o06dx3d_test.go:17:13: undefined: strings

    /tmp/tmp3o06dx3d_test.go:21:31: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, r := range s {\n        if\
    \ !strings.ContainsRune(c, r) {\n            result += string(r)\n        }\n\
    \    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytdacpx8_test.go:17:13: undefined: strings

    /tmp/tmpytdacpx8_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, r := range s {\n        if\
    \ !strings.Contains(c, string(r)) {\n            result += string(r)\n       \
    \ }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpne3o2ty5_test.go:17:13: undefined: strings

    /tmp/tmpne3o2ty5_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, v := range s {\n        if\
    \ !strings.Contains(c, string(v)) {\n            result += string(v)\n       \
    \ }\n    }\n    return []interface{}{result, result == reverse(result)}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpben_d5z6_test.go:17:13: undefined: strings

    /tmp/tmpben_d5z6_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, result == reverse(result)}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj6piwwno_test.go:17:13: undefined: strings

    /tmp/tmpj6piwwno_test.go:21:44: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, ch := range s {\n        if\
    \ !strings.Contains(c, string(ch)) {\n            res += string(ch)\n        }\n\
    \    }\n    return []interface{}{res, res == reverse(res)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5q_2kd48_test.go:17:13: undefined: strings

    /tmp/tmp5q_2kd48_test.go:21:38: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, ch := range s {\n        if\
    \ !strings.Contains(c, string(ch)) {\n            res += string(ch)\n        }\n\
    \    }\n    return []interface{}{res, is_palindrome(res)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf4utnyvy_test.go:17:13: undefined: strings

    /tmp/tmpf4utnyvy_test.go:21:31: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    for _, v := range c {\n        s = strings.Replace(s, string(v),\
    \ \"\", -1)\n    }\n    return []interface{}{s, s == reverse(s)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvd3blui_test.go:16:13: undefined: strings

    /tmp/tmpcvd3blui_test.go:18:34: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmp2woipj65_test.go:40:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmp2woipj65_test.go:40: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result string\n    for _, char := range s {\n     \
    \   if !strings.Contains(c, string(char)) {\n            result += string(char)\n\
    \        }\n    }\n    return []interface{}{result, is_palindrome(result)}\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpef_abkhd_test.go:17:13: undefined: strings

    /tmp/tmpef_abkhd_test.go:21:34: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, false}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n  \
    \      tmpdhe90lbv_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpdhe90lbv_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[abcdedcba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpdhe90lbv_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpdhe90lbv_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=false)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // your code here\n    return []interface{}{s, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpu79sp6m9_test.go:40: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpu79sp6m9_test.go:40:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpu79sp6m9_test.go:40: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpu79sp6m9_test.go:40: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var res string\n    for _, ch := range s {\n        if\
    \ !strings.Contains(c, string(ch)) {\n            res += string(ch)\n        }\n\
    \    }\n    return []interface{}{res, res == reverse(res)}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5q_2kd48_test.go:17:13: undefined: strings

    /tmp/tmp5q_2kd48_test.go:21:38: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
