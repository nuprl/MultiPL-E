language: go_test.go
name: HumanEval_64_vowels_count
results:
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      continue\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xz4ecly_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwiu0ijdu_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpwiu0ijdu_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpwiu0ijdu_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpwiu0ijdu_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        switch c {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5hqh9b1d_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i < len(s)-1 {\n       \
    \     if s[i+1] == 'a' || s[i+1] == 'e' || s[i+1] == 'i' || s[i+1] == 'o' || s[i+1]\
    \ == 'u' {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp07ct8j02_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp07ct8j02_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp07ct8j02_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp07ct8j02_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp07ct8j02_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        switch c {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && c == s[len(s)-1] {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_does9g_test.go:20:35: invalid operation: c == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      continue\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xz4ecly_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpypbc0_mv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      continue\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xz4ecly_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpypbc0_mv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp1gncaifl_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp1gncaifl_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpnl_5dehy_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpnl_5dehy_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpnl_5dehy_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || c != s[len(s)-1] {\n                count++\n   \
    \         }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyrduqjla_test.go:20:36: invalid operation: c != s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if len(s) > 1 && s[len(s)-1] == 'y' && !vowels[rune(s[len(s)-2])]\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1gu5vznv_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp1gu5vznv_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp1gu5vznv_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp1gu5vznv_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        switch\
    \ s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n       \
    \ case 'y':\n            if i == len(s)-1 {\n                count++\n       \
    \     }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmptbd3eovr_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmptbd3eovr_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmptbd3eovr_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\
    \    var count int = 0\n    for _, v := range s {\n        if string(v) == \"\
    y\" && string(s[len(s)-1]) == \"y\" {\n            count++\n        } else {\n\
    \            for _, v := range vowels {\n                if string(v) == string(v)\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpd1gm8heh_test.go:49: expected '%!s(int=2)', got '%!s(int=30)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpd1gm8heh_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=30)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpd1gm8heh_test.go:49: expected '%!s(int=2)', got '%!s(int=13)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpd1gm8heh_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=18)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpd1gm8heh_test.go:49: expected '%!s(int=2)', got '%!s(int=18)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpd1gm8heh_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=18)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpd1gm8heh_test.go:49: expected '%!s(int=3)', got '%!s(int=30)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && c == s[len(s)-1] {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9absmciv_test.go:20:35: invalid operation: c == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, v := range s {\n        switch v {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[1] != 'y' {\n                count++\n      \
    \      }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpmsmexjr7_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpmsmexjr7_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpmsmexjr7_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgtgiq3eo_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgtgiq3eo_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgtgiq3eo_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpgtgiq3eo_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if len(s) > 1 && s[len(s)-1] == 'y' {\n        count++\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpap8erlwa_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpap8erlwa_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpap8erlwa_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n   \
    \     }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp8uim96ei_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp8uim96ei_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp8uim96ei_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpypbc0_mv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      continue\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xz4ecly_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if len(s) > 1 && s[len(s)-1] == 'y' {\n        count++\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpap8erlwa_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpap8erlwa_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpap8erlwa_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, char := range s {\n        for _, vowel := range vowels {\n\
    \            if string(char) == vowel {\n                count++\n           \
    \ }\n        }\n    }\n    if string(s[len(s)-1]) == \"y\" {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpiub5dtb0_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpiub5dtb0_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpiub5dtb0_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if i == len(s)\
    \ - 1 && c == 'y' {\n            count++\n        } else if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6fdci7of_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6fdci7of_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6fdci7of_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0,\
    \ \"u\": 0, \"y\": 0}\n    for _, c := range s {\n        if _, ok := vowels[string(c)];\
    \ ok {\n            vowels[string(c)] += 1\n        }\n    }\n    if vowels[\"\
    y\"] > 0 && s[len(s)-1] == 'y' {\n        vowels[\"y\"] += 1\n    }\n    return\
    \ vowels[\"a\"] + vowels[\"e\"] + vowels[\"i\"] + vowels[\"o\"] + vowels[\"u\"\
    ] + vowels[\"y\"]\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp53ib4wsl_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp53ib4wsl_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp53ib4wsl_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp53ib4wsl_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp53ib4wsl_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\n        \"a\": 0,\n        \"e\": 0,\n\
    \        \"i\": 0,\n        \"o\": 0,\n        \"u\": 0,\n        \"y\": 0,\n\
    \    }\n    for _, c := range s {\n        switch string(c) {\n        case \"\
    a\", \"e\", \"i\", \"o\", \"u\":\n            vowels[string(c)] += 1\n       \
    \ case \"y\":\n            if string(s[len(s)-1]) == \"y\" {\n               \
    \ vowels[string(c)] += 1\n            }\n        }\n    }\n    return vowels[\"\
    a\"] + vowels[\"e\"] + vowels[\"i\"] + vowels[\"o\"] + vowels[\"u\"] + vowels[\"\
    y\"]\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpaxi2hbzm_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpaxi2hbzm_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpaxi2hbzm_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      continue\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xz4ecly_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        } else\
    \ if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpohudz6cn_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpohudz6cn_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpohudz6cn_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, v := range s {\n        if v == 'a' || v ==\
    \ 'e' || v == 'i' || v == 'o' || v == 'u' {\n            count++\n        }\n\
    \        if v == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp_o76vk25_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp_o76vk25_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp_o76vk25_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp_o76vk25_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp_o76vk25_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: Write code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp6040uh_w_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp6040uh_w_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp6040uh_w_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n    }\n    if len(s) > 1 && s[len(s)-1] == 'y' {\n        count++\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpopxoiw6w_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpopxoiw6w_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpopxoiw6w_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        switch c {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5hqh9b1d_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        switch\
    \ s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n       \
    \ case 'y':\n            if i == len(s)-1 {\n                count++\n       \
    \     }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmptbd3eovr_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmptbd3eovr_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmptbd3eovr_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpyrjycs0x_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpyrjycs0x_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpyrjycs0x_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpyrjycs0x_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: Implement\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmppstk8nmj_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmppstk8nmj_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmppstk8nmj_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmppstk8nmj_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmppstk8nmj_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmppstk8nmj_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppstk8nmj_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, v := range s {\n        if v == 'a' ||\
    \ v == 'e' || v == 'i' || v == 'o' || v == 'u' || v == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpp181ausw_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpp181ausw_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpp181ausw_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpp181ausw_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i == len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmppycrz6d__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmppycrz6d__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppycrz6d__test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        switch c {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5hqh9b1d_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      continue\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xz4ecly_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, char := range s {\n        for _, vowel := range vowels {\n\
    \            if string(char) == vowel {\n                count++\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpodubbtze_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpodubbtze_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpodubbtze_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpodubbtze_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpypbc0_mv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpnl_5dehy_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpnl_5dehy_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpnl_5dehy_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\n        \"a\": 0,\n        \"e\": 0,\n\
    \        \"i\": 0,\n        \"o\": 0,\n        \"u\": 0,\n        \"y\": 0,\n\
    \    }\n    for _, char := range s {\n        if _, ok := vowels[string(char)];\
    \ ok {\n            vowels[string(char)] += 1\n        }\n    }\n    if len(s)\
    \ > 1 && s[len(s)-1:] == \"y\" {\n        vowels[\"y\"] += 1\n    }\n    return\
    \ vowels[\"a\"] + vowels[\"e\"] + vowels[\"i\"] + vowels[\"o\"] + vowels[\"u\"\
    ] + vowels[\"y\"]\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1nhum33o_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp1nhum33o_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp1nhum33o_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp1nhum33o_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp1nhum33o_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\n        \"a\": 0,\n        \"e\": 0,\n\
    \        \"i\": 0,\n        \"o\": 0,\n        \"u\": 0,\n        \"y\": 0,\n\
    \    }\n    for _, char := range s {\n        if _, ok := vowels[string(char)];\
    \ ok {\n            vowels[string(char)] += 1\n        }\n    }\n    if vowels[\"\
    y\"] > 0 && string(s[len(s)-1]) == \"y\" {\n        vowels[\"y\"] -= 1\n    }\n\
    \    count := 0\n    for _, v := range vowels {\n        count += v\n    }\n \
    \   return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp47pgvj7v_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp47pgvj7v_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp47pgvj7v_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp47pgvj7v_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp47pgvj7v_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp1gncaifl_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp1gncaifl_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[1] != 'y' {\n                count++\n      \
    \      }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpacaqln8__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpacaqln8__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpacaqln8__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for i, r := range s {\n        if vowels[r] {\n            count++\n\
    \        }\n        if r == 'y' && i == len(s)-1 {\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp2dsvny35_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp2dsvny35_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp2dsvny35_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i == len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmppycrz6d__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmppycrz6d__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppycrz6d__test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpsuj8d0vg_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpsuj8d0vg_test.go:42:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpsuj8d0vg_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpsuj8d0vg_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && c == s[len(s)-1] {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9absmciv_test.go:20:35: invalid operation: c == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: Implement this function\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp8yt4wgpf_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp8yt4wgpf_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp8yt4wgpf_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp8yt4wgpf_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp8yt4wgpf_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp8yt4wgpf_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp8yt4wgpf_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) - 1 == count {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpyaei0l7h_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpyaei0l7h_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpyaei0l7h_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpyaei0l7h_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpe4a7npz__test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpe4a7npz__test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: Write code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp6040uh_w_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp6040uh_w_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp6040uh_w_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6040uh_w_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        switch c {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5hqh9b1d_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5hqh9b1d_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp1gncaifl_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp1gncaifl_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp1gncaifl_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count += 1\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count\
    \ += 1\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpng6h40ns_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpng6h40ns_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpng6h40ns_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) - 1 == count {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpyaei0l7h_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpyaei0l7h_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpyaei0l7h_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpyaei0l7h_test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, v := range s {\n        if v == 'a' ||\
    \ v == 'e' || v == 'i' || v == 'o' || v == 'u' {\n            count++\n      \
    \  }\n        if v == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpf06a_le7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpf06a_le7_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpf06a_le7_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpf06a_le7_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpf06a_le7_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      continue\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3xz4ecly_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3xz4ecly_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6jkwmvs6_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6jkwmvs6_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6jkwmvs6_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, r := range s {\n        if vowels[r] {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp8hncjlqm_test.go:52: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp8hncjlqm_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp8hncjlqm_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if i == len(s)\
    \ - 1 && c == 'y' {\n            count++\n        } else if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6fdci7of_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6fdci7of_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6fdci7of_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i != len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgp5r4glj_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpgp5r4glj_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpgp5r4glj_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgp5r4glj_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgp5r4glj_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        switch\
    \ s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n       \
    \ case 'y':\n            if i == len(s) - 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzey1yda0_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpzey1yda0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpzey1yda0_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpx2e43rd7_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpx2e43rd7_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpx2e43rd7_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, c := range s {\n        for _, v := range vowels {\n      \
    \      if string(c) == v {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpllb30_km_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpllb30_km_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpllb30_km_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpllb30_km_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            if len(s)\
    \ == 1 {\n                count++\n            } else if len(s) > 1 && s[len(s)-1]\
    \ == 'y' {\n                count++\n            }\n        } else {\n       \
    \     for _, vv := range vowels {\n                if string(v) == vv {\n    \
    \                count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprculrhoi_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprculrhoi_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprculrhoi_test.go:53: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for _, c := range s {\n        switch c {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpquh_4d7g_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpquh_4d7g_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpquh_4d7g_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || c == s[len(s)-1] {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8uhrxwak_test.go:20:36: invalid operation: c == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgs87rtul_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgs87rtul_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp22xxrnm1_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp22xxrnm1_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count += 1\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy2sl_4ok_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy2sl_4ok_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpy2sl_4ok_test.go:45: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpy2sl_4ok_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_232774_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_232774_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpf_h0p59j_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpf_h0p59j_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpf_h0p59j_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpf_h0p59j_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpf_h0p59j_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpf_h0p59j_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpf_h0p59j_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5u_7pgmr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5u_7pgmr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i != len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpy1o5o4fr_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpy1o5o4fr_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n        if c == 'y' && i == len(s)-1 {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmppycrz6d__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmppycrz6d__test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppycrz6d__test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        if string(v) == \"y\" && string(s[len(s)-1])\
    \ == \"y\" {\n            count++\n        }\n        for _, vv := range vowels\
    \ {\n            if string(v) == vv {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprye8qi8m_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprye8qi8m_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprye8qi8m_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpypbc0_mv_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpypbc0_mv_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpnl_5dehy_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpnl_5dehy_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpnl_5dehy_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpfxgquh8h_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpfxgquh8h_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmptx994ms9_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmptx994ms9_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[1] != 'y' {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmphx5diqqd_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmphx5diqqd_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmphx5diqqd_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] != 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkbndy6ns_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkbndy6ns_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp3cry4hjv_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp3cry4hjv_test.go:42:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpifvm98xx_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpifvm98xx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073268
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if i == len(s) - 1\
    \ && c == 'y' {\n            count++\n        } else if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvj8g70va_test.go:44: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvj8g70va_test.go:44:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvj8g70va_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if len(s) > 1 && s[len(s)-1] == 'y' {\n        count++\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpap8erlwa_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpap8erlwa_test.go:45:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpap8erlwa_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
