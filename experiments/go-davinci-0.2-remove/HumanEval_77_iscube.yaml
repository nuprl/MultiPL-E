name: HumanEval_77_iscube
language: go_test.go
prompt: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write\
  \ a function that takes an integer a and returns True \n// if this ingeger is a\
  \ cube of some integer number.\n// Note: you may assume the input is always valid.\n\
  // Examples:\nfunc iscube(a int) bool {\n"
tests: "func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(1), expected: true },\n     { actual: candidate(2), expected:\
  \ false },\n     { actual: candidate(-1), expected: true },\n     { actual: candidate(64),\
  \ expected: true },\n     { actual: candidate(180), expected: false },\n     { actual:\
  \ candidate(1000), expected: true },\n     { actual: candidate(0), expected: true\
  \ },\n     { actual: candidate(1729), expected: false },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
