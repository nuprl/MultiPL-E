language: go_test.go
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    return (n * (n + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n\
    \  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual:\
    \ candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\nfunc sum_to_n(n int)\
    \ int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073210
