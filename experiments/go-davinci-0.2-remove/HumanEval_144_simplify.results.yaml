language: go_test.go
name: HumanEval_144_simplify
results:
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n \
    \ candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm6yegb5_test.go:14:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:15:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return (xn * nd) % (xd * nn)\
    \ == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return (xNum * nDen) % (xDen * nNum) == 0\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprcwbassg_test.go:14:19: undefined: parse

    /tmp/tmprcwbassg_test.go:15:19: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyInt(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhd__qf1_test.go:14:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:15:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:16:12: undefined: simplifyInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyInt(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhd__qf1_test.go:14:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:15:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:16:12: undefined: simplifyInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return simplifyFraction(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe058mesj_test.go:14:19: undefined: parseFraction

    /tmp/tmpe058mesj_test.go:15:19: undefined: parseFraction

    /tmp/tmpe058mesj_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n \
    \ candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm6yegb5_test.go:14:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:15:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return (xNum * nDen) % (xDen * nNum) == 0\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6frbz2ng_test.go:14:19: undefined: parseFraction

    /tmp/tmp6frbz2ng_test.go:15:19: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n \
    \ candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm6yegb5_test.go:14:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:15:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xkd2k2k_test.go:14:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:15:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyInt(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhd__qf1_test.go:14:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:15:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:16:12: undefined: simplifyInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return isWhole(xNum * nNum, xDen * nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44si41e3_test.go:14:19: undefined: parse

    /tmp/tmp44si41e3_test.go:15:19: undefined: parse

    /tmp/tmp44si41e3_test.go:16:12: undefined: isWhole

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    num, den := parse(x)\n    num *= parse(n)\n    return\
    \ num % den == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplc5b4y4t_test.go:14:17: undefined: parse

    /tmp/tmplc5b4y4t_test.go:15:12: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return simplifyNum(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewronlty_test.go:14:19: undefined: parse

    /tmp/tmpewronlty_test.go:15:19: undefined: parse

    /tmp/tmpewronlty_test.go:16:12: undefined: simplifyNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify_int(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18mctpqe_test.go:14:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:15:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:16:12: undefined: simplify_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify_int(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18mctpqe_test.go:14:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:15:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:16:12: undefined: simplify_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    var x_numerator, x_denominator,\
    \ n_numerator, n_denominator int\n    fmt.Sscanf(x, \"%d/%d\", &x_numerator, &x_denominator)\n\
    \    fmt.Sscanf(n, \"%d/%d\", &n_numerator, &n_denominator)\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpcnaw6mlc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpcnaw6mlc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpcnaw6mlc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpcnaw6mlc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpcnaw6mlc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpcnaw6mlc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpcnaw6mlc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpcnaw6mlc_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpcnaw6mlc_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return simplifyFrac(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkqt9rglr_test.go:14:19: undefined: parse

    /tmp/tmpkqt9rglr_test.go:15:19: undefined: parse

    /tmp/tmpkqt9rglr_test.go:16:12: undefined: simplifyFrac

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xkd2k2k_test.go:14:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:15:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    xn := x + n\n    return simplify_fraction(xn)\n\
    }\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghfmfbu9_test.go:16:12: undefined: simplify_fraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := parse(x)\n    nn := parse(n)\n    return xn.simplify(nn)\n\
    }\n\ntype fraction \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3kw05rn9_test.go:19:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073288
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return simplifyNum(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewronlty_test.go:14:19: undefined: parse

    /tmp/tmpewronlty_test.go:15:19: undefined: parse

    /tmp/tmpewronlty_test.go:16:12: undefined: simplifyNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parseFraction(x)\n    nn, nd := parseFraction(n)\n\
    \    return simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9beqy00_test.go:14:15: undefined: parseFraction

    /tmp/tmpf9beqy00_test.go:15:15: undefined: parseFraction

    /tmp/tmpf9beqy00_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, _ := parse(x)\n    nn, _ := parse(n)\n    xn.Numerator\
    \ *= nn.Denominator\n    xn.Denominator *= nn.Numerator\n    return xn.Numerator\
    \ % xn.Denominator == 0\n}\n\ntype fraction \nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc8igy_pl_test.go:21:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073288
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := getNumeratorAndDenominator(x)\n\
    \    nNumerator, nDenominator := getNumeratorAndDenominator(n)\n\n    // x * n\
    \ = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n    // x * n is\
    \ a whole number if xNumerator * nNumerator is divisible by xDenominator * nDenominator\n\
    \    return (xNumerator * nNumerator) % (xDenominator * nDenominator) == 0\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdyfgs2gt_test.go:14:33: undefined: getNumeratorAndDenominator

    /tmp/tmpdyfgs2gt_test.go:15:33: undefined: getNumeratorAndDenominator

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return isWholeNumber(xNumerator * nNumerator,\
    \ xDenominator * nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo29xwy5e_test.go:14:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:15:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:16:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xkd2k2k_test.go:14:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:15:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return xNumerator * nDenominator * nNumerator\
    \ * xDenominator % (xDenominator * nDenominator) == 0\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9qkflj8_test.go:14:33: undefined: parseFraction

    /tmp/tmpj9qkflj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := parse(x)\n    nn := parse(n)\n    return simplifyFraction(xn,\
    \ nn)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxo_4uwl_test.go:14:11: undefined: parse

    /tmp/tmpzxo_4uwl_test.go:15:11: undefined: parse

    /tmp/tmpzxo_4uwl_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return isWholeNumber(xNumerator * nNumerator,\
    \ xDenominator * nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo29xwy5e_test.go:14:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:15:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:16:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    return false\n}\n\nfunc TestSimplify(t *testing.T) {\n\
    \  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parse(x)\n    nNumerator,\
    \ nDenominator := parse(n)\n    if xDenominator == nDenominator {\n        return\
    \ true\n    }\n    if xDenominator % nDenominator == 0 {\n        return false\n\
    \    }\n    if nDenominator % xDenominator == 0 {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptb_37laz_test.go:14:33: undefined: parse

    /tmp/tmptb_37laz_test.go:15:33: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return (xNum * nDen) % (xDen * nNum) == 0\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6frbz2ng_test.go:14:19: undefined: parseFraction

    /tmp/tmp6frbz2ng_test.go:15:19: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return simplifyNum(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewronlty_test.go:14:19: undefined: parse

    /tmp/tmpewronlty_test.go:15:19: undefined: parse

    /tmp/tmpewronlty_test.go:16:12: undefined: simplifyNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyInt(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhd__qf1_test.go:14:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:15:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:16:12: undefined: simplifyInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   num := xNum * nNum\n    den := xDen * nDen\n    return num % den == 0\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwtewhok_test.go:14:19: undefined: parse

    /tmp/tmppwtewhok_test.go:15:19: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return simplifyNum(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewronlty_test.go:14:19: undefined: parse

    /tmp/tmpewronlty_test.go:15:19: undefined: parse

    /tmp/tmpewronlty_test.go:16:12: undefined: simplifyNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ xn * nd == xd * nn\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptw3zucgj_test.go:14:15: undefined: parse

    /tmp/tmptw3zucgj_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__1\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__3 (0.00s)\n        tmpjson4v4c_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__7\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__8 (0.00s)\n        tmpjson4v4c_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    x_numerator, x_denominator := parseFraction(x)\n    n_numerator,\
    \ n_denominator := parseFraction(n)\n\n    return simplifyFraction(x_numerator,\
    \ x_denominator, n_numerator, n_denominator)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjdzctf1_test.go:14:35: undefined: parseFraction

    /tmp/tmpfjdzctf1_test.go:15:35: undefined: parseFraction

    /tmp/tmpfjdzctf1_test.go:17:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify_fraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n\
    \  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9ewtvff_test.go:14:15: undefined: parse

    /tmp/tmps9ewtvff_test.go:15:15: undefined: parse

    /tmp/tmps9ewtvff_test.go:16:12: undefined: simplify_fraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return isWholeNumber(xNum * nNum, xDen * nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_tayu9bz_test.go:14:19: undefined: parse

    /tmp/tmp_tayu9bz_test.go:15:19: undefined: parse

    /tmp/tmp_tayu9bz_test.go:16:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return xn * nd * nn * xd %\
    \ (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__1\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__3 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__7\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__8 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return xNum * nDen == xDen * nNum\n}\n\nfunc TestSimplify(t *testing.T) {\n\
    \  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwhgz1xyt_test.go:14:19: undefined: parse

    /tmp/tmpwhgz1xyt_test.go:15:19: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parse(x)\n    nNumerator,\
    \ nDenominator := parse(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3gj0mtx_test.go:14:33: undefined: parse

    /tmp/tmpz3gj0mtx_test.go:15:33: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    var x_num, x_den, n_num,\
    \ n_den int\n    fmt.Sscanf(x, \"%d/%d\", &x_num, &x_den)\n    fmt.Sscanf(n, \"\
    %d/%d\", &n_num, &n_den)\n    return (x_num * n_den) % (x_den * n_num) == 0\n\
    }\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmps7s3pext_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmps7s3pext_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmps7s3pext_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmps7s3pext_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmps7s3pext_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmps7s3pext_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmps7s3pext_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmps7s3pext_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmps7s3pext_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, _ := parse(x)\n    nn, _ := parse(n)\n    return xn\
    \ * nn % 1 == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8su5q3qx_test.go:14:14: undefined: parse

    /tmp/tmp8su5q3qx_test.go:15:14: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := parseFraction(x)\n    nn := parseFraction(n)\n \
    \   return xn * nn % 1 == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvqvqax6v_test.go:14:11: undefined: parseFraction

    /tmp/tmpvqvqax6v_test.go:15:11: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // TODO: Implement the solution\n    return false\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmp1mf82oba_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmp1mf82oba_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmp1mf82oba_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmp1mf82oba_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmp1mf82oba_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmp1mf82oba_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmp1mf82oba_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmp1mf82oba_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := multiply(x, n)\n    return isWholeNumber(xn)\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8ryp6qz_test.go:14:11: undefined: multiply

    /tmp/tmpr8ryp6qz_test.go:15:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return isWhole(xNum * nNum, xDen * nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44si41e3_test.go:14:19: undefined: parse

    /tmp/tmp44si41e3_test.go:15:19: undefined: parse

    /tmp/tmp44si41e3_test.go:16:12: undefined: isWhole

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n \
    \ candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm6yegb5_test.go:14:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:15:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return (xn * nd) % (xd * nn)\
    \ == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return xNumerator * nDenominator * nNumerator\
    \ * xDenominator % (xDenominator * nDenominator) == 0\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9qkflj8_test.go:14:33: undefined: parseFraction

    /tmp/tmpj9qkflj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xkd2k2k_test.go:14:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:15:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, _ := parseFraction(x)\n    nn, _ := parseFraction(n)\n\
    \    xn.Multiply(nn)\n    return xn.Denominator == 1\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vm3yrq8_test.go:14:14: undefined: parseFraction

    /tmp/tmp2vm3yrq8_test.go:15:14: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n \
    \ candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm6yegb5_test.go:14:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:15:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    productNumerator := xNumerator * nNumerator\n\
    \    productDenominator := xDenominator * nDenominator\n    return productNumerator\
    \ % productDenominator == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn94hdxxh_test.go:14:33: undefined: parseFraction

    /tmp/tmpn94hdxxh_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xkd2k2k_test.go:14:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:15:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xkd2k2k_test.go:14:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:15:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := parse(x)\n    nn := parse(n)\n    return xn * nn\
    \ % 1 == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6pndesca_test.go:14:11: undefined: parse

    /tmp/tmp6pndesca_test.go:15:11: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := multiply(x, n)\n    return isWholeNumber(xn)\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8ryp6qz_test.go:14:11: undefined: multiply

    /tmp/tmpr8ryp6qz_test.go:15:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return xn * nd * nn * xd %\
    \ (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__1\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__3 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__7\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__8 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := x + n\n    xn = simplifyFraction(xn)\n    if xn[len(xn)-1]\
    \ == '0' {\n        return true\n    }\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40p9rypr_test.go:15:10: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return isWholeNumber(xNumerator * nNumerator,\
    \ xDenominator * nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo29xwy5e_test.go:14:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:15:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:16:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__1\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__3 (0.00s)\n        tmpjson4v4c_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__7\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__8 (0.00s)\n        tmpjson4v4c_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify_int(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18mctpqe_test.go:14:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:15:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:16:12: undefined: simplify_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parseFraction(x)\n    nn, nd := parseFraction(n)\n\
    \    return simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9beqy00_test.go:14:15: undefined: parseFraction

    /tmp/tmpf9beqy00_test.go:15:15: undefined: parseFraction

    /tmp/tmpf9beqy00_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return isWholeNumber(xNumerator * nNumerator,\
    \ xDenominator * nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo29xwy5e_test.go:14:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:15:33: undefined: parseFraction

    /tmp/tmpo29xwy5e_test.go:16:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := parse(x)\n    nn := parse(n)\n    return xn.simplify(nn)\n\
    }\n\ntype fraction \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3kw05rn9_test.go:19:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073288
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    num := xNum * nNum\n    den := xDen * nDen\n    return num % den == 0\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvtr6hltp_test.go:14:19: undefined: parseFraction

    /tmp/tmpvtr6hltp_test.go:15:19: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return (xNum * nDen) % (xDen * nNum) == 0\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6frbz2ng_test.go:14:19: undefined: parseFraction

    /tmp/tmp6frbz2ng_test.go:15:19: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, _ := parse(x)\n    nn, _ := parse(n)\n    return xn\
    \ * nn % 1 == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8su5q3qx_test.go:14:14: undefined: parse

    /tmp/tmp8su5q3qx_test.go:15:14: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    xNumerator, xDenominator\
    \ := parseFraction(x)\n    nNumerator, nDenominator := parseFraction(n)\n    return\
    \ (xNumerator * nDenominator) % (xDenominator * nNumerator) == 0\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbolrkq3_test.go:15:33: undefined: parseFraction

    /tmp/tmpfbolrkq3_test.go:16:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpe__amhlw_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpe__amhlw_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parse(x)\n    nNum, nDen := parse(n)\n \
    \   return simplifyNum(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpewronlty_test.go:14:19: undefined: parse

    /tmp/tmpewronlty_test.go:15:19: undefined: parse

    /tmp/tmpewronlty_test.go:16:12: undefined: simplifyNum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return (xn * nd) % (xd * nn)\
    \ == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := multiply(x, n)\n    return isWholeNumber(xn)\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8ryp6qz_test.go:14:11: undefined: multiply

    /tmp/tmpr8ryp6qz_test.go:15:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    if xn\
    \ == 0 || nn == 0 {\n        return false\n    }\n    return (xn * nd) % (xd *\
    \ nn) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s16byuq_test.go:14:15: undefined: parse

    /tmp/tmp5s16byuq_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyInt(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhd__qf1_test.go:14:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:15:15: undefined: parse

    /tmp/tmpxhd__qf1_test.go:16:12: undefined: simplifyInt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return simplifyFraction(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe058mesj_test.go:14:19: undefined: parseFraction

    /tmp/tmpe058mesj_test.go:15:19: undefined: parseFraction

    /tmp/tmpe058mesj_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return (xNum * nDen) % (xDen * nNum) == 0\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6frbz2ng_test.go:14:19: undefined: parseFraction

    /tmp/tmp6frbz2ng_test.go:15:19: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := getNumeratorAndDenominator(x)\n\
    \    nNumerator, nDenominator := getNumeratorAndDenominator(n)\n\n    // x * n\
    \ = xNumerator * nNumerator / xDenominator * nDenominator\n    // x * n = (xNumerator\
    \ * nNumerator) / (xDenominator * nDenominator)\n    // x * n = (xNumerator *\
    \ nNumerator) / (xDenominator * nDenominator)\n    // x * n = (xNumerator * nNumerator)\
    \ / (xDenominator * nDenominator)\n    // x * n = (xNumerator * nNumerator) /\
    \ (xDenominator * nDenominator)\n    // x * n = (xNumerator * nNumerator) / (xDenominator\
    \ * nDenominator)\n    // x * n = (xNumerator * nNumerator) / (xDenominator *\
    \ nDenominator)\n    // x * n = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n\
    \    // x * n = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n  \
    \  // x * n = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n    //\
    \ x * n = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n    // x\
    \ * n = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n    // x *\
    \ n = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n    // x * n\
    \ = (xNumerator * nNumerator) / (xDenominator * nDenominator)\n    // x * n =\
    \ (xNumerator * nNumerator) / (xDenominator * nDenominator)\n    // x * n = (xNumerator\
    \ * nNumerator) / (\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp773alrk9_test.go:33:6: expected ''('', found TestSimplify

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    x_numerator, x_denominator := parseFraction(x)\n    n_numerator,\
    \ n_denominator := parseFraction(n)\n\n    x_numerator *= n_denominator\n    x_denominator\
    \ *= n_numerator\n\n    return x_numerator % x_denominator == 0\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8r2zzlad_test.go:14:35: undefined: parseFraction

    /tmp/tmp8r2zzlad_test.go:15:35: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return (xNum * nDen) % (xDen * nNum) == 0\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6frbz2ng_test.go:14:19: undefined: parseFraction

    /tmp/tmp6frbz2ng_test.go:15:19: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return (xn * nd) % (xd * nn)\
    \ == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return xn * nd % xd == 0\n\
    }\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmp9mndoa6a_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__6 (0.00s)\n        tmp9mndoa6a_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__11\
    \ (0.00s)\n        tmp9mndoa6a_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__12 (0.00s)\n        tmp9mndoa6a_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ xn * nd * nn * xd % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n\
    \  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0xb5mev_test.go:14:15: undefined: parse

    /tmp/tmpx0xb5mev_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__1\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__3 (0.00s)\n        tmpjson4v4c_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__7\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__8 (0.00s)\n        tmpjson4v4c_test.go:43:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpjson4v4c_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    x_numerator, x_denominator := parseFraction(x)\n    n_numerator,\
    \ n_denominator := parseFraction(n)\n\n    // x * n = (x_numerator * n_numerator)\
    \ / (x_denominator * n_denominator)\n    numerator := x_numerator * n_numerator\n\
    \    denominator := x_denominator * n_denominator\n\n    // If numerator is divisible\
    \ by denominator, then x * n is a whole number\n    return numerator % denominator\
    \ == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprfn37hby_test.go:14:35: undefined: parseFraction

    /tmp/tmprfn37hby_test.go:15:35: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := multiply(x, n)\n    return xn.denominator == 1\n\
    }\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphmendrfu_test.go:14:11: undefined: multiply

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ isWhole(xn * nn, xd * nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgiki6jga_test.go:14:15: undefined: parse

    /tmp/tmpgiki6jga_test.go:15:15: undefined: parse

    /tmp/tmpgiki6jga_test.go:16:12: undefined: isWhole

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := multiply(x, n)\n    return isWholeNumber(xn)\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8ryp6qz_test.go:14:11: undefined: multiply

    /tmp/tmpr8ryp6qz_test.go:15:12: undefined: isWholeNumber

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplifyFraction(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n \
    \ candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcm6yegb5_test.go:14:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:15:15: undefined: parse

    /tmp/tmpcm6yegb5_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    x_numerator, x_denominator := parseFraction(x)\n    n_numerator,\
    \ n_denominator := parseFraction(n)\n\n    // x * n = (x_numerator * n_numerator)\
    \ / (x_denominator * n_denominator)\n    // x * n is a whole number if x_numerator\
    \ * n_numerator is divisible by x_denominator * n_denominator\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfl3zzkrg_test.go:14:35: undefined: parseFraction

    /tmp/tmpfl3zzkrg_test.go:15:35: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzi183d9o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzi183d9o_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    return false\n}\n\nfunc TestSimplify(t *testing.T) {\n\
    \  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1/5\"\
    , \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected:\
    \ false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n  \
    \   { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     { actual:\
    \ candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpdn6gl1rf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpdn6gl1rf_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, _ := parse(x)\n    nn, _ := parse(n)\n    return simplifyFraction(xn,\
    \ nn)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmp79xlgv_test.go:14:14: undefined: parse

    /tmp/tmpmp79xlgv_test.go:15:14: undefined: parse

    /tmp/tmpmp79xlgv_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify_int(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18mctpqe_test.go:14:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:15:15: undefined: parse

    /tmp/tmp18mctpqe_test.go:16:12: undefined: simplify_int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return (xNum * nDen) % (xDen * nNum) == 0\n}\n\nfunc TestSimplify(t *testing.T)\
    \ {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6frbz2ng_test.go:14:19: undefined: parseFraction

    /tmp/tmp6frbz2ng_test.go:15:19: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ xn * nd == xd * nn\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptw3zucgj_test.go:14:15: undefined: parse

    /tmp/tmptw3zucgj_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn := parse(x)\n    nn := parse(n)\n    return xn * nn\
    \ % 1 == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6pndesca_test.go:14:11: undefined: parse

    /tmp/tmp6pndesca_test.go:15:11: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return xn * nd * nn * xd %\
    \ (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__1\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__3 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__7\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__8 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return xn * nd * nn * xd %\
    \ (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__1\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__3 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__7\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSimplify/test_num__8 (0.00s)\n        tmpx4m9jlgc_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpx4m9jlgc_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return (xn * nd) % (xd * nn)\
    \ == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parse(x)\n    nNumerator,\
    \ nDenominator := parse(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplh5tnk2u_test.go:14:33: undefined: parse

    /tmp/tmplh5tnk2u_test.go:15:33: undefined: parse

    /tmp/tmplh5tnk2u_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFraction(x)\n    nNum, nDen := parseFraction(n)\n\
    \    return simplifyFraction(xNum, xDen, nNum, nDen)\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe058mesj_test.go:14:19: undefined: parseFraction

    /tmp/tmpe058mesj_test.go:15:19: undefined: parseFraction

    /tmp/tmpe058mesj_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return (xNumerator * nDenominator) % (xDenominator\
    \ * nNumerator) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true\
    \ },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphaft3vj8_test.go:14:33: undefined: parseFraction

    /tmp/tmphaft3vj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return xNumerator * nDenominator * nNumerator\
    \ * xDenominator % (xDenominator * nDenominator) == 0\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9qkflj8_test.go:14:33: undefined: parseFraction

    /tmp/tmpj9qkflj8_test.go:15:33: undefined: parseFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var xn, xd, nn, nd int\n    fmt.Sscanf(x, \"%d/%d\", &xn,\
    \ &xd)\n    fmt.Sscanf(n, \"%d/%d\", &nn, &nd)\n    return (xn * nd) % (xd * nn)\
    \ == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n\
    \     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual:\
    \ candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpths6l7cz_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmpths6l7cz_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ (xn * nn) % (xd * nd) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp5lk2kk_test.go:14:15: undefined: parse

    /tmp/tmpxp5lk2kk_test.go:15:15: undefined: parse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNumerator, xDenominator := parseFraction(x)\n    nNumerator,\
    \ nDenominator := parseFraction(n)\n    return simplifyFraction(xNumerator, xDenominator,\
    \ nNumerator, nDenominator)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xkd2k2k_test.go:14:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:15:33: undefined: parseFraction

    /tmp/tmp5xkd2k2k_test.go:16:12: undefined: simplifyFraction

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xNum, xDen := parseFrac(x)\n    nNum, nDen := parseFrac(n)\n\
    \    num := xNum * nNum\n    den := xDen * nDen\n    return num % den == 0\n}\n\
    \nfunc TestSimplify(t *testing.T) {\n  candidate := simplify\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/6\", \"2/1\"), expected: false },\n     { actual: candidate(\"\
    5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"7/10\", \"10/2\"\
    ), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"), expected:\
    \ true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true },\n   \
    \  { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual: candidate(\"\
    2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"5/2\", \"3/5\"\
    ), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"), expected: true\
    \ },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"\
    1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_k1q52uf_test.go:14:19: undefined: parseFrac

    /tmp/tmp_k1q52uf_test.go:15:19: undefined: parseFrac

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    xn, xd := parse(x)\n    nn, nd := parse(n)\n    return\
    \ simplify2(xn, xd, nn, nd)\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnaz1rjze_test.go:14:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:15:15: undefined: parse

    /tmp/tmpnaz1rjze_test.go:16:12: undefined: simplify2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073289
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    var num1, den1, num2, den2 int\n    fmt.Sscanf(x, \"%d/%d\"\
    , &num1, &den1)\n    fmt.Sscanf(n, \"%d/%d\", &num2, &den2)\n    return (num1\
    \ * den2) % (den1 * num2) == 0\n}\n\nfunc TestSimplify(t *testing.T) {\n  candidate\
    \ := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"1/5\", \"5/1\"), expected:\
    \ true },\n     { actual: candidate(\"1/6\", \"2/1\"), expected: false },\n  \
    \   { actual: candidate(\"5/1\", \"3/1\"), expected: true },\n     { actual: candidate(\"\
    7/10\", \"10/2\"), expected: false },\n     { actual: candidate(\"2/10\", \"50/10\"\
    ), expected: true },\n     { actual: candidate(\"7/2\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"11/6\", \"6/1\"), expected: true },\n     { actual:\
    \ candidate(\"2/3\", \"5/2\"), expected: false },\n     { actual: candidate(\"\
    5/2\", \"3/5\"), expected: false },\n     { actual: candidate(\"2/4\", \"8/4\"\
    ), expected: true },\n     { actual: candidate(\"2/4\", \"4/2\"), expected: true\
    \ },\n     { actual: candidate(\"1/5\", \"5/1\"), expected: true },\n     { actual:\
    \ candidate(\"1/5\", \"1/5\"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmp4wm8z_mi_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmp4wm8z_mi_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmp4wm8z_mi_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmp4wm8z_mi_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmp4wm8z_mi_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmp4wm8z_mi_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmp4wm8z_mi_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmp4wm8z_mi_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__12\
    \ (0.00s)\n        tmp4wm8z_mi_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Your task is to implement a function that will simplify the expression\n//\
    \ x * n. The function returns True if x * n evaluates to a whole number and False\n\
    // otherwise. Both x and n, are string representation of a fraction, and have\
    \ the following format,\n// <numerator>/<denominator> where both numerator and\
    \ denominator are positive whole numbers.\n// You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\nfunc simplify(x string,\
    \ n string) bool {\n    // your code here\n    return false\n}\n\nfunc TestSimplify(t\
    \ *testing.T) {\n  candidate := simplify\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    1/5\", \"5/1\"), expected: true },\n     { actual: candidate(\"1/6\", \"2/1\"\
    ), expected: false },\n     { actual: candidate(\"5/1\", \"3/1\"), expected: true\
    \ },\n     { actual: candidate(\"7/10\", \"10/2\"), expected: false },\n     {\
    \ actual: candidate(\"2/10\", \"50/10\"), expected: true },\n     { actual: candidate(\"\
    7/2\", \"4/2\"), expected: true },\n     { actual: candidate(\"11/6\", \"6/1\"\
    ), expected: true },\n     { actual: candidate(\"2/3\", \"5/2\"), expected: false\
    \ },\n     { actual: candidate(\"5/2\", \"3/5\"), expected: false },\n     { actual:\
    \ candidate(\"2/4\", \"8/4\"), expected: true },\n     { actual: candidate(\"\
    2/4\", \"4/2\"), expected: true },\n     { actual: candidate(\"1/5\", \"5/1\"\
    ), expected: true },\n     { actual: candidate(\"1/5\", \"1/5\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSimplify (0.00s)\n    --- FAIL: TestSimplify/test_num__0\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__2 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__4\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__5 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__6\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__9 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSimplify/test_num__10\
    \ (0.00s)\n        tmpzdx_nn8g_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSimplify/test_num__11 (0.00s)\n        tmpzdx_nn8g_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073290
