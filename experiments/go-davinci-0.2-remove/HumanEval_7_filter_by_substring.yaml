name: HumanEval_7_filter_by_substring
language: go_test.go
prompt: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Filter an input list of strings only for ones that contain given substring\n\
  func filter_by_substring(strings []string, substring string) []string {\n"
tests: "func TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
  \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\"\
  , \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"\
  john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\"\
  , \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []string\n    for _, str := range strings {\n      \
    \  if str == substring {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n", "    var filtered []string\n    for _, str :=\
    \ range strings {\n        if strings.Contains(str, substring) {\n           \
    \ filtered = append(filtered, str)\n        }\n    }\n    return filtered\n}\n",
  "    var result []string\n    for _, s := range strings {\n        if (s == substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    var filtered []string\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []string\n    for _, str := range strings {\n        if str == substring\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if (s == substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var filtered_strings []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            filtered_strings\
    \ = append(filtered_strings, s)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    result := []string{}\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, s := range strings {\n        if (s != substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, str := range strings {\n        if str == substring {\n            result\
    \ = append(result, str)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered []string\n    for _, s := range strings {\n\
    \        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if (s[0:len(substring)] == substring)\
    \ {\n            filtered_strings = append(filtered_strings, s)\n        }\n \
    \   }\n    return filtered_strings\n}\n", "    var filtered []string\n    for\
    \ _, s := range strings {\n        if (s == substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered_strings []string\n    for _, str := range strings {\n        if (str\
    \ == substring) {\n            filtered_strings = append(filtered_strings, str)\n\
    \        }\n    }\n    return filtered_strings\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if (s == substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered_strings\
    \ []string\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            filtered_strings = append(filtered_strings, str)\n\
    \        }\n    }\n    return filtered_strings\n}\n", "    var filtered_strings\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered_strings = append(filtered_strings, s)\n        }\n \
    \   }\n    return filtered_strings\n}\n", "    var result []string\n    for _,\
    \ s := range strings {\n        if (contains(s, substring)) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ (s == substring) {\n            filtered = append(filtered, s)\n        }\n\
    \    }\n    return filtered\n}\n", "    var filtered []string\n    for _, str\
    \ := range strings {\n        if str != \"\" && str[0:len(substring)] == substring\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered_strings []string\n    for _, str := range\
    \ strings {\n        if strings.Contains(str, substring) {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if (s[0:len(substring)] == substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, str := range strings {\n        if str == substring {\n          \
    \  result = append(result, str)\n        }\n    }\n    return result\n}\n", " \
    \   var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    result := []string{}\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var result []string\n  \
    \  for _, s := range strings {\n        if (s == substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered_strings\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered_strings = append(filtered_strings, s)\n        }\n \
    \   }\n    return filtered_strings\n}\n", "    var filtered []string\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str != \"\" && str[0:len(substring)] == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, str := range strings {\n        if str_contains(str, substring) {\n\
    \            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n", "    var result []string\n    for _, str := range strings\
    \ {\n        if str == substring {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if (s == substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if s == substring {\n   \
    \         result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var result []string\n    for _, s := range strings {\n        if (s == substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    var filtered []string\n    for _, str := range\
    \ strings {\n        if str == substring {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n", "    var filtered []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered_strings []string\n    for _, str := range strings {\n\
    \        if str != \"\" && str[0:len(substring)] == substring {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var filtered []string\n   \
    \ for _, s := range strings {\n        if strings.Contains(s, substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var filtered []string\n   \
    \ for _, s := range strings {\n        if strings.Contains(s, substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var filtered []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    var filtered_strings []string\n    for _,\
    \ str := range strings {\n        if str == substring {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []string\n    for\
    \ _, str := range strings {\n        if str == substring {\n            result\
    \ = append(result, str)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, str := range strings {\n        if str == substring {\n\
    \            filtered = append(filtered, str)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered_strings []string\n    for _, str := range strings {\n\
    \        if strings.Contains(str, substring) {\n            filtered_strings =\
    \ append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    var result []string\n    for _, s := range\
    \ strings {\n        if (s == substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var filtered []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    var filtered_strings []string\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    filtered_strings = append(filtered_strings, s)\n        }\n    }\n    return\
    \ filtered_strings\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if (s == substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered []string\n    for _, s := range strings {\n\
    \        if (s == substring) {\n            filtered = append(filtered, s)\n \
    \       }\n    }\n    return filtered\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if (s == substring) {\n            result = append(result, s)\n \
    \       }\n    }\n    return result\n}\n", "    var filtered []string\n    for\
    \ _, s := range strings {\n        if strings.Contains(s, substring) {\n     \
    \       filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ (s == substring) {\n            filtered = append(filtered, s)\n        }\n\
    \    }\n    return filtered\n}\n", "    var filtered_strings []string\n    for\
    \ _, str := range strings {\n        if str == substring {\n            filtered_strings\
    \ = append(filtered_strings, str)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var filtered []string\n    for _, str := range strings {\n        if\
    \ str != \"\" && str[0:len(substring)] == substring {\n            filtered =\
    \ append(filtered, str)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n", "    var filtered_strings []string\n    for _, str :=\
    \ range strings {\n        if strings.Contains(str, substring) {\n           \
    \ filtered_strings = append(filtered_strings, str)\n        }\n    }\n    return\
    \ filtered_strings\n}\n", "    var result []string\n    for _, str := range strings\
    \ {\n        if str == substring {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n", "    var filtered []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var filtered []string\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered []string\n    for _, str := range strings {\n        if str == substring\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered []string\n    for _, s := range strings {\n\
    \        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var filtered []string\n\
    \    for _, str := range strings {\n        if str == substring {\n          \
    \  filtered = append(filtered, str)\n        }\n    }\n    return filtered\n}\n",
  "    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if (s == substring) {\n            result = append(result, s)\n \
    \       }\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ s := range strings {\n        if (s[0:len(substring)] == substring) {\n    \
    \        result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var result []string\n    for _, str := range strings {\n        if str == substring\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if (contains(s, substring)) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var filtered []string\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var result []string\n    for _, str := range strings {\n\
    \        if str == \"\" {\n            continue\n        }\n        if str[0:len(substring)]\
    \ == substring {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n", "    var result []string\n    for _, str := range strings\
    \ {\n        if str == substring {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if (s == substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, s := range strings {\n        if (s == substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    var result []string\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered_strings []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered_strings\
    \ = append(filtered_strings, s)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (s\
    \ != \"\") && (s[0:len(substring)] == substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var filtered []string\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered_strings []string\n    for _, s := range strings\
    \ {\n        if (s != substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if (s == substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var result []string\n    for _, str := range strings {\n\
    \        if str == substring {\n            result = append(result, str)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ str := range strings {\n        if str != \"\" && str[0:len(substring)] == substring\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var filtered []string\n   \
    \ for _, s := range strings {\n        if strings.Contains(s, substring) {\n \
    \           filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            filtered = append(filtered, str)\n        }\n\
    \    }\n    return filtered\n}\n", "    var filtered []string\n    for _, s :=\
    \ range strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered_strings []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered_strings = append(filtered_strings, s)\n \
    \       }\n    }\n    return filtered_strings\n}\n", "    var filtered []string\n\
    \    for _, s := range strings {\n        if (s[0:len(substring)] == substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered []string\n    for _, str := range strings\
    \ {\n        if strings.Contains(str, substring) {\n            filtered = append(filtered,\
    \ str)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if (contains(s, substring)) {\n    \
    \        result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var result []string\n    for _, str := range strings {\n        if str != \"\
    \" && str[0:len(substring)] == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    var filtered []string\n\
    \    for _, str := range strings {\n        if str == substring {\n          \
    \  filtered = append(filtered, str)\n        }\n    }\n    return filtered\n}\n",
  "    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var result []string\n    for _, str := range\
    \ strings {\n        if str == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if (s != \"\") && (s[0:len(substring)]\
    \ == substring) {\n            filtered_strings = append(filtered_strings, s)\n\
    \        }\n    }\n    return filtered_strings\n}\n", "    var result []string\n\
    \    for _, str := range strings {\n        if str == \"\" {\n            continue\n\
    \        }\n        if str[0:len(substring)] == substring {\n            result\
    \ = append(result, str)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (s\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n", "    var result []string\n  \
    \  for _, s := range strings {\n        if (contains(s, substring)) {\n      \
    \      result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var result []string\n    for _, s := range strings {\n        if (s[0:len(substring)]\
    \ == substring) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n", "    var result []string\n    for _, str :=\
    \ range strings {\n        if str == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if (contains(s, substring)) {\n    \
    \        result = append(result, s)\n        }\n    }\n    return result\n}\n",
  "    var filtered_strings []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            filtered_strings = append(filtered_strings,\
    \ str)\n        }\n    }\n    return filtered_strings\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var ret []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            ret = append(ret, s)\n        }\n    }\n    return\
    \ ret\n}\n", "    var filtered []string\n    for _, s := range strings {\n   \
    \     if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var filtered_strings []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered_strings = append(filtered_strings, s)\n        }\n    }\n\
    \    return filtered_strings\n}\n", "    var filtered []string\n    for _, s :=\
    \ range strings {\n        if (string_contains(s, substring)) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []string\n    for _, str := range strings {\n        if str == substring\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    result := []string{}\n    for _, s := range strings {\n        if (string_contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if (s == substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []string\n    for\
    \ _, str := range strings {\n        if str != \"\" && str[0:len(substring)] ==\
    \ substring {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var filtered_strings []string\n    for _, s := range strings {\n  \
    \      if (string_contains(s, substring)) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n", "    var filtered_strings\
    \ []string\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            filtered_strings = append(filtered_strings, str)\n\
    \        }\n    }\n    return filtered_strings\n}\n", "    var filtered []string\n\
    \    for _, str := range strings {\n        if strings.Contains(str, substring)\
    \ {\n            filtered = append(filtered, str)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var result []string\n    for _, str := range strings {\n\
    \        if str == substring {\n            result = append(result, str)\n   \
    \     }\n    }\n    return result\n}\n", "    result := []string{}\n    for _,\
    \ s := range strings {\n        if strings.Contains(s, substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n", " \
    \   var result []string\n    for _, str := range strings {\n        if str ==\
    \ substring {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n", "    var result []string\n    for _, str := range strings\
    \ {\n        if str == substring {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if (s == substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, str := range strings {\n        if str != \"\" && str[0:len(substring)]\
    \ == substring {\n            filtered = append(filtered, str)\n        }\n  \
    \  }\n    return filtered\n}\n", "    var filtered []string\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered []string\n    for _, str := range strings {\n        if strings.Contains(str,\
    \ substring) {\n            filtered = append(filtered, str)\n        }\n    }\n\
    \    return filtered\n}\n", "    var filtered []string\n    for _, s := range\
    \ strings {\n        if (s == substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var filtered []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []string\n    for\
    \ _, str := range strings {\n        if str == substring {\n            result\
    \ = append(result, str)\n        }\n    }\n    return result\n}\n", "    var filtered\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered\n}\n", "    var filtered []string\n    for _, str := range strings\
    \ {\n        if str == substring {\n            filtered = append(filtered, str)\n\
    \        }\n    }\n    return filtered\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if (s[0:len(substring)] == substring) {\n \
    \           result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var filtered []string\n    for _, s := range strings {\n        if\
    \ strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n", "    var filtered []string\n   \
    \ for _, str := range strings {\n        if str == substring {\n            filtered\
    \ = append(filtered, str)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []string\n    for _, str := range strings {\n        if str == substring\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n", "    var filtered_strings []string\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            filtered_strings\
    \ = append(filtered_strings, s)\n        }\n    }\n    return filtered_strings\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    result := []string{}\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if strings.Contains(s, substring)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var filtered_strings []string\n    for _, s := range strings {\n  \
    \      if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n", "    var result []string\n\
    \    for _, str := range strings {\n        if str_contains(str, substring) {\n\
    \            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var filtered []string\n\
    \    for _, s := range strings {\n        if (s != \"\") && (s[0:len(substring)]\
    \ == substring) {\n            filtered = append(filtered, s)\n        }\n   \
    \ }\n    return filtered\n}\n", "    var result []string\n    for _, str := range\
    \ strings {\n        if str == substring {\n            result = append(result,\
    \ str)\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if strings.Contains(s, substring) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ strings.Contains(str, substring) {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var filtered []string\n    for\
    \ _, s := range strings {\n        if (s != substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var result []string\n    for _, s := range strings\
    \ {\n        if (s != \"\") && (s[0:len(substring)] == substring) {\n        \
    \    result = append(result, s)\n        }\n    }\n    return result\n}\n", " \
    \   var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n", "    var filtered []string\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ result []string\n    for _, s := range strings {\n        if (contains(s, substring))\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (contains(s,\
    \ substring)) {\n            result = append(result, s)\n        }\n    }\n  \
    \  return result\n}\n", "    var result []string\n    for _, str := range strings\
    \ {\n        if str == substring {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    for\
    \ _, s := range strings {\n        if len(s) < len(substring) {\n            continue\n\
    \        }\n        for i := 0; i < len(s)-len(substring)+1; i++ {\n         \
    \   if s[i:i+len(substring)] == substring {\n                result = append(result,\
    \ s)\n                break\n            }\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if (len(s)\
    \ >= len(substring)) {\n            if (s[:len(substring)] == substring) {\n \
    \               result = append(result, s)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var filtered []string\n    for _, s := range strings\
    \ {\n        if (s[0:len(substring)] == substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n", "    var result []string\n\
    \    for _, s := range strings {\n        if (s == substring) {\n            result\
    \ = append(result, s)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, s := range strings {\n        if (contains(s, substring))\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, str := range strings {\n        if\
    \ str == substring {\n            result = append(result, str)\n        }\n  \
    \  }\n    return result\n}\n", "    var result []string\n    for _, s := range\
    \ strings {\n        if strings.Contains(s, substring) {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n", "    result :=\
    \ []string{}\n    for _, str := range strings {\n        if str == substring {\n\
    \            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
