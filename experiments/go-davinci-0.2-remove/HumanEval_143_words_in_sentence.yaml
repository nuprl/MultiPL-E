name: HumanEval_143_words_in_sentence
language: go_test.go
prompt: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a string representing a sentence,\n// the sentence contains\
  \ some words separated by a space,\n// and you have to return a string that contains\
  \ the words from the original sentence,\n// whose lengths are prime numbers,\n//\
  \ the order of the words in the new string should be the same as the original one.\n\
  // Example 1:\n// Example 2:\n// Constraints:\n// * 1 <= len(sentence) <= 100\n\
  // * sentence contains only letters\nfunc words_in_sentence(sentence string) string\
  \ {\n"
tests: "func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected: \"\
  is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"go for\"\
  \ },\n     { actual: candidate(\"there is no place available here\"), expected:\
  \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
  \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"go\
  \ for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     { actual:\
  \ candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := []string{}\n    for _, word := range strings.Split(sentence, \" \") {\n \
    \       if is_prime(len(word)) {\n            words = append(words, word)\n  \
    \      }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words := make([]string,\
    \ 0)\n    word := \"\"\n    for _, c := range sentence {\n        if c == ' '\
    \ {\n            words = append(words, word)\n            word = \"\"\n      \
    \  } else {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := make([]string, 0)\n    word := \"\"\n    for _, ch := range\
    \ sentence {\n        if ch == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(ch)\n \
    \       }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _, c :=\
    \ range sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    var words []string\n    var result string\n    for _, word :=\
    \ range sentence {\n        if word == ' ' {\n            words = append(words,\
    \ result)\n            result = \"\"\n        } else {\n            result +=\
    \ string(word)\n        }\n    }\n    words = append(words, result)\n    result\
    \ = \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n", "    // TODO - Add your code here\n    return \"\
    \"\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range\
    \ sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    new_words := make([]string,\
    \ 0)\n    for _, word := range words {\n        if is_prime(len(word)) {\n   \
    \         new_words = append(new_words, word)\n        }\n    }\n    return strings.Join(new_words,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    words := []string{}\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var result\
    \ string\n    var words []string\n    var word string\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    for _, word := range words {\n  \
    \      if is_prime(len(word)) {\n            result += word + \" \"\n        }\n\
    \    }\n    return result[:len(result)-1]\n}\n", "    words := []string{}\n  \
    \  for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    var words []string\n    var word string\n\
    \    for _, c := range sentence {\n        if c == ' ' {\n            words =\
    \ append(words, word)\n            word = \"\"\n        } else {\n           \
    \ word += string(c)\n        }\n    }\n    words = append(words, word)\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    var words []string\n    var word string\n    for _, c := range sentence {\n\
    \        if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    var result []string\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := make([]string, 0)\n    word := \"\"\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    res := \"\"\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            res += word + \" \"\n\
    \        }\n    }\n    if len(res) > 0 {\n        res = res[:len(res)-1]\n   \
    \ }\n    return res\n}\n", "    words := []string{}\n    for _, word := range\
    \ strings.Split(sentence, \" \") {\n        if is_prime(len(word)) {\n       \
    \     words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n", "    var result string\n    for _, word := range\
    \ sentence {\n        if is_prime(len(word)) {\n            result += word\n \
    \       }\n    }\n    return result\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    // TODO - Add your\
    \ code here\n    return \"\"\n}\n", "    words := make([]string, 0)\n    word\
    \ := \"\"\n    for _, c := range sentence {\n        if c == ' ' {\n         \
    \   words = append(words, word)\n            word = \"\"\n        } else {\n \
    \           word += string(c)\n        }\n    }\n    words = append(words, word)\n\
    \    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    var result string\n    var words []string\n    var word string\n  \
    \  for _, c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := make([]string, 0)\n    for i := 0; i < len(sentence); i++ {\n        if sentence[i]\
    \ == ' ' {\n            continue\n        }\n        j := i\n        for ; j <\
    \ len(sentence); j++ {\n            if sentence[j] == ' ' {\n                break\n\
    \            }\n        }\n        words = append(words, sentence[i:j])\n    \
    \    i = j\n    }\n    result := make([]string, 0)\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result = append(result, word)\n\
    \        }\n    }\n    return strings.Join(result, \" \")\n}\n", "    var words\
    \ []string\n    var word string\n    for _, c := range sentence {\n        if\
    \ c == ' ' {\n            words = append(words, word)\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    words\
    \ = append(words, word)\n    var result string\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n", "    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n", "    words\
    \ := make([]string, 0)\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words :=\
    \ strings.Split(sentence, \" \")\n    var result []string\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ var result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   words := []string{}\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words :=\
    \ strings.Split(sentence, \" \")\n    var result []string\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ var result string\n    words := strings.Split(sentence, \" \")\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n", "   \
    \ var result string\n    var words []string\n    var word string\n    for _, c\
    \ := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    var words []string\n\
    \    var result string\n    var word string\n    var is_prime bool\n    var i\
    \ int\n\n    words = strings.Split(sentence, \" \")\n    for _, word = range words\
    \ {\n        is_prime = true\n        for i = 2; i < len(word); i++ {\n      \
    \      if len(word) % i == 0 {\n                is_prime = false\n           \
    \     break\n            }\n        }\n        if is_prime {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result\n}\n", "    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var\
    \ words []string\n    var word string\n    for _, c := range sentence {\n    \
    \    if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    var result string\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result += word + \" \"\
    \n        }\n    }\n    return result[:len(result)-1]\n}\n", "    var words []string\n\
    \    var word string\n    for _, c := range sentence {\n        if c == ' ' {\n\
    \            words = append(words, word)\n            word = \"\"\n        } else\
    \ {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var words []string\n    var word string\n    for _, c :=\
    \ range sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    var result []string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var words []string\n    var word string\n    for _, c :=\
    \ range sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    var result []string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n", "    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var\
    \ result string\n    words := strings.Split(sentence, \" \")\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n", "   \
    \ words := make([]string, 0)\n    word := \"\"\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    prime_words := make([]string, 0)\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    prime_words = append(prime_words, word)\n        }\n    }\n    return strings.Join(prime_words,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    var words []string\n    var word string\n    for _, c := range sentence {\n\
    \        if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    var result []string\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := []string{}\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var result\
    \ string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    var words []string\n    var word string\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n", "    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := make([]string, 0)\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var result\
    \ string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var words []string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, \"\")\n        } else {\n         \
    \   words[len(words)-1] += string(word)\n        }\n    }\n    var result string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range\
    \ sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    result := \"\"\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n", "    words\
    \ := strings.Split(sentence, \" \")\n    var result []string\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ var result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    words := strings.Split(sentence, \" \")\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return strings.TrimRight(result, \" \"\
    )\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range\
    \ sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    var result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   words := strings.Split(sentence, \" \")\n    var result string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n",
  "    var result string\n    for _, word := range sentence {\n        if is_prime(word)\
    \ {\n            result += string(word)\n        }\n    }\n    return result\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    // TODO - Add your code here\n    return \"\"\n}\n", "  \
    \  var words []string\n    var word string\n    for _, c := range sentence {\n\
    \        if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    var result []string\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    var result string\n    for _, word := range sentence {\n   \
    \     if is_prime(len(word)) {\n            result += word\n        }\n    }\n\
    \    return result\n}\n", "    words := strings.Split(sentence, \" \")\n    var\
    \ result []string\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n", "    var result string\n    for _, word := range\
    \ sentence {\n        if is_prime(len(word)) {\n            result += word\n \
    \       }\n    }\n    return result\n}\n", "    var result string\n    for _,\
    \ word := range sentence {\n        if is_prime(len(word)) {\n            result\
    \ += word\n        }\n    }\n    return result\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n", "    var result string\n    for _, word := range sentence {\n        if\
    \ is_prime(len(word)) {\n            result += word\n        }\n    }\n    return\
    \ result\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := strings.Split(sentence, \" \")\n    var result []string\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := []string{}\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words :=\
    \ []string{}\n    for _, word := range strings.Split(sentence, \" \") {\n    \
    \    if is_prime(len(word)) {\n            words = append(words, word)\n     \
    \   }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var result string\n\
    \    var words = strings.Split(sentence, \" \")\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return strings.TrimSpace(result)\n}\n", "    words := make([]string,\
    \ 0)\n    word := \"\"\n    for _, c := range sentence {\n        if c == ' '\
    \ {\n            words = append(words, word)\n            word = \"\"\n      \
    \  } else {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var words []string\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var\
    \ result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    for _, word := range sentence {\n        if is_prime(len(string(word)))\
    \ {\n            result += string(word)\n        }\n    }\n    return result\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n", "    words := strings.Split(sentence, \" \")\n \
    \   var result []string\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var words []string\n    var word string\n    for _, c :=\
    \ range sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    var result string\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    var result string\n    for _, word := range sentence {\n   \
    \     if is_prime(len(word)) {\n            result += word\n        }\n    }\n\
    \    return result\n}\n", "    words := make([]string, 0)\n    word := \"\"\n\
    \    for _, c := range sentence {\n        if c == ' ' {\n            words =\
    \ append(words, word)\n            word = \"\"\n        } else {\n           \
    \ word += string(c)\n        }\n    }\n    words = append(words, word)\n    result\
    \ := \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n", "    words := make([]string, 0)\n    word := \"\"\
    \n    for _, c := range sentence {\n        if c == ' ' {\n            words =\
    \ append(words, word)\n            word = \"\"\n        } else {\n           \
    \ word += string(c)\n        }\n    }\n    words = append(words, word)\n    result\
    \ := \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n",
  "    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var\
    \ result string\n    var words = strings.Split(sentence, \" \")\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return strings.TrimRight(result, \" \")\n}\n",
  "    var result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var words []string\n    var word string\n    for _, c := range sentence {\n\
    \        if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    var result string\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result += word + \" \"\
    \n        }\n    }\n    return result[:len(result)-1]\n}\n", "    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n", "    words\
    \ := strings.Split(sentence, \" \")\n    result := \"\"\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result += word + \" \"\
    \n        }\n    }\n    return strings.TrimRight(result, \" \")\n}\n", "    words\
    \ := []string{}\n    for _, word := range strings.Split(sentence, \" \") {\n \
    \       if is_prime(len(word)) {\n            words = append(words, word)\n  \
    \      }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _,\
    \ c := range sentence {\n        if c == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    words := make([]string, 0)\n    word := \"\"\n    for _, c :=\
    \ range sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    result := \"\"\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n",
  "    var words []string\n    var word string\n    for _, c := range sentence {\n\
    \        if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    var result string\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result += word + \" \"\
    \n        }\n    }\n    return result[:len(result)-1]\n}\n", "    words := make([]string,\
    \ 0)\n    word := \"\"\n    for _, c := range sentence {\n        if c == ' '\
    \ {\n            words = append(words, word)\n            word = \"\"\n      \
    \  } else {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    var result string\n    for _, word := range sentence {\n        if\
    \ is_prime(word) {\n            result += string(word)\n        }\n    }\n   \
    \ return result\n}\n", "    if len(sentence) == 0 {\n        return \"\"\n   \
    \ }\n    words := make([]string, 0)\n    word := \"\"\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    result := \"\"\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n", "    var\
    \ result string\n    words := strings.Split(sentence, \" \")\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n}\n", "   \
    \ var result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   words := []string{}\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var result\
    \ string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   var words []string\n    var word string\n    for _, c := range sentence {\n\
    \        if c == ' ' {\n            words = append(words, word)\n            word\
    \ = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    words = append(words, word)\n    var result []string\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ var words []string\n    var result string\n    var is_prime bool\n    for _,\
    \ word := range sentence {\n        if word == ' ' {\n            is_prime = true\n\
    \            for i := 2; i < len(words); i++ {\n                if len(words)\
    \ % i == 0 {\n                    is_prime = false\n                    break\n\
    \                }\n            }\n            if is_prime {\n               \
    \ result += words\n            }\n            words = nil\n        } else {\n\
    \            words += string(word)\n        }\n    }\n    return result\n}\n",
  "    words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(word) {\n            result += string(word)\n        }\n\
    \    }\n    return result\n}\n", "    words := make([]string, 0)\n    for _, word\
    \ := range strings.Split(sentence, \" \") {\n        if is_prime(len(word)) {\n\
    \            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    words := make([]string, 0)\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := make([]string, 0)\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words :=\
    \ strings.Split(sentence, \" \")\n    var result []string\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var res []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    res = append(res, word)\n        }\n    }\n    return strings.Join(res, \"\
    \ \")\n}\n", "    var result string\n    for _, word := range sentence {\n   \
    \     if is_prime(len(word)) {\n            result += word\n        }\n    }\n\
    \    return result\n}\n", "    var words []string\n    for _, word := range sentence\
    \ {\n        if word == ' ' {\n            words = append(words, \"\")\n     \
    \   } else {\n            words[len(words)-1] += string(word)\n        }\n   \
    \ }\n    var result string\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    var result string\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n", "    var\
    \ result string\n    var words []string\n    for i := 0; i < len(sentence); i++\
    \ {\n        if sentence[i] == ' ' {\n            words = append(words, sentence[:i])\n\
    \            sentence = sentence[i+1:]\n            i = 0\n        }\n    }\n\
    \    words = append(words, sentence)\n    for _, word := range words {\n     \
    \   if is_prime(len(word)) {\n            result += word + \" \"\n        }\n\
    \    }\n    return result[:len(result)-1]\n}\n", "    var result string\n    for\
    \ _, word := range sentence {\n        if is_prime(len(word)) {\n            result\
    \ += word\n        }\n    }\n    return result\n}\n", "    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n", "    var result\
    \ string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   words := []string{}\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var result\
    \ string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   words := strings.Split(sentence, \" \")\n    var result []string\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := strings.Split(sentence, \" \")\n    var result []string\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    result := \"\
    \"\n    for _, word := range words {\n        if is_prime(len(word)) {\n     \
    \       result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n", "    words := make([]string, 0)\n    for i := 0;\
    \ i < len(sentence); i++ {\n        if sentence[i] == ' ' {\n            continue\n\
    \        }\n        j := i\n        for ; j < len(sentence); j++ {\n         \
    \   if sentence[j] == ' ' {\n                break\n            }\n        }\n\
    \        words = append(words, sentence[i:j])\n        i = j\n    }\n    res :=\
    \ make([]string, 0)\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            res = append(res, word)\n        }\n    }\n    return strings.Join(res,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var words []string\n    var word string\n    for _, c :=\
    \ range sentence {\n        if c == ' ' {\n            words = append(words, word)\n\
    \            word = \"\"\n        } else {\n            word += string(c)\n  \
    \      }\n    }\n    words = append(words, word)\n    var result []string\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(len(word)) {\n            result += word\n        }\n   \
    \ }\n    return result\n}\n", "    words := make([]string, 0)\n    word := \"\"\
    \n    for _, c := range sentence {\n        if c == ' ' {\n            words =\
    \ append(words, word)\n            word = \"\"\n        } else {\n           \
    \ word += string(c)\n        }\n    }\n    words = append(words, word)\n    result\
    \ := \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := strings.Split(sentence, \" \")\n    var result []string\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    words := strings.Split(sentence, \" \")\n    result := \"\"\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n", "    var result string\n    for _, word := range sentence {\n        if\
    \ is_prime(len(word)) {\n            result += word\n        }\n    }\n    return\
    \ result\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var result string\n    words := strings.Split(sentence, \"\
    \ \")\n    for _, word := range words {\n        if is_prime(len(word)) {\n  \
    \          result += word + \" \"\n        }\n    }\n    return strings.Trim(result,\
    \ \" \")\n}\n", "    words := strings.Split(sentence, \" \")\n    var result []string\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var\
    \ result string\n    for _, word := range sentence {\n        if is_prime(len(word))\
    \ {\n            result += word\n        }\n    }\n    return result\n}\n", " \
    \   words := make([]string, 0)\n    word := \"\"\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    result := \"\"\n    for _, word :=\
    \ range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n", "    words\
    \ := []string{}\n    for _, word := range strings.Split(sentence, \" \") {\n \
    \       if is_prime(len(word)) {\n            words = append(words, word)\n  \
    \      }\n    }\n    return strings.Join(words, \" \")\n}\n", "    var result\
    \ string\n    var words []string\n    var word string\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            words = append(words, word)\n        \
    \    word = \"\"\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    words = append(words, word)\n    for _, word := range words {\n  \
    \      if is_prime(len(word)) {\n            result += word + \" \"\n        }\n\
    \    }\n    return result[:len(result)-1]\n}\n", "    var words []string\n   \
    \ var result string\n    for _, word := range sentence {\n        if word == '\
    \ ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    result = \"\"\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return result[:len(result)-1]\n}\n", "    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n", "    words\
    \ := strings.Split(sentence, \" \")\n    var result []string\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := []string{}\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words :=\
    \ []string{}\n    for _, word := range strings.Split(sentence, \" \") {\n    \
    \    if is_prime(len(word)) {\n            words = append(words, word)\n     \
    \   }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n", "    var result string\n    for _, word := range sentence {\n\
    \        if is_prime(word) {\n            result += string(word)\n        }\n\
    \    }\n    return result\n}\n", "    words := strings.Split(sentence, \" \")\n\
    \    var result []string\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n", "    var words []string\n    var result string\n    for _, word\
    \ := range sentence {\n        if word == ' ' {\n            words = append(words,\
    \ result)\n            result = \"\"\n        } else {\n            result +=\
    \ string(word)\n        }\n    }\n    words = append(words, result)\n    result\
    \ = \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n", "    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    return strings.Join(words, \" \")\n}\n", "    words\
    \ := strings.Split(sentence, \" \")\n    var result []string\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", "   \
    \ words := strings.Split(sentence, \" \")\n    var result []string\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n", "    var result string\n    for _, word := range sentence {\n   \
    \     if is_prime(len(word)) {\n            result += word\n        }\n    }\n\
    \    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
