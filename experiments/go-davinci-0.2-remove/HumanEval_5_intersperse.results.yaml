language: go_test.go
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, v := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers)*2-1)\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for _, n := range numbers {\n\
    \        result = append(result, n)\n        result = append(result, delimeter)\n\
    \    }\n    return result[:len(result)-1]\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpc8xbb52j_test.go:15\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpc8xbb52j_test.go:25\
    \ +0x33\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, number := range numbers {\n        if i\
    \ > 0 {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    var result []int\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i != 0 {\n   \
    \         result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, v := range numbers {\n        if i > 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 2*len(numbers)-1)\n\
    \    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n       \
    \ result[2*i-1] = delimeter\n        result[2*i] = numbers[i]\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, len(numbers) *\
    \ 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        result[2 * i - 1] = delimeter\n        result[2 * i] = numbers[i]\n \
    \   }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := []int{numbers[0]}\n\
    \    for i := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i != 0 {\n   \
    \         result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    var result []int\n    for i := 0; i\
    \ < len(numbers) - 1; i++ {\n        result = append(result, numbers[i])\n   \
    \     result = append(result, delimeter)\n    }\n    result = append(result, numbers[len(numbers)\
    \ - 1])\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    for i := 0; i < len(numbers); i++ {\n        result[i\
    \ * 2] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i *\
    \ 2 + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i != 0 {\n   \
    \         result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i > 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return []int{}\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, len(numbers) *\
    \ 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n \
    \   }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    var result []int\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, len(numbers) *\
    \ 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        result[2 * i - 1] = delimeter\n        result[2 * i] = numbers[i]\n \
    \   }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    for i, n := range numbers {\n        if i > 0\
    \ {\n            result = append(result, delimeter)\n        }\n        result\
    \ = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, 2 * len(numbers))\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, num := range numbers {\n        if i != 0 {\n \
    \           result = append(result, delimeter)\n        }\n        result = append(result,\
    \ num)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, v := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    var result []int\n    for i := 0; i\
    \ < len(numbers) - 1; i++ {\n        result = append(result, numbers[i])\n   \
    \     result = append(result, delimeter)\n    }\n    result = append(result, numbers[len(numbers)\
    \ - 1])\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, 2*len(numbers)-1)\n\
    \    for i := 0; i < len(numbers)-1; i++ {\n        result = append(result, numbers[i])\n\
    \        result = append(result, delimeter)\n    }\n    result = append(result,\
    \ numbers[len(numbers)-1])\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n\n    for i, n := range numbers {\n        if i > 0 {\n  \
    \          result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, len(numbers) *\
    \ 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result[i * 2] =\
    \ numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    result[len(result)\
    \ - 1] = numbers[len(numbers) - 1]\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)*2-1)\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, len(numbers) *\
    \ 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n \
    \   }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i != 0 {\n            result = append(result, delimeter)\n       \
    \ }\n        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    var result []int\n\
    \    result = append(result, numbers[0])\n    for i := 1; i < len(numbers); i++\
    \ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i != 0 {\n   \
    \         result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, number := range numbers {\n        if i > 0 {\n\
    \            result = append(result, delimeter)\n        }\n        result = append(result,\
    \ number)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 2*len(numbers)-1)\n\
    \    for i := 0; i < len(numbers)-1; i++ {\n        result[2*i] = numbers[i]\n\
    \        result[2*i+1] = delimeter\n    }\n    result[2*len(numbers)-2] = numbers[len(numbers)-1]\n\
    \    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate :=\
    \ intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, len(numbers) *\
    \ 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers); i++ {\n\
    \        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n \
    \   }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, 2 * len(numbers))\n    result = append(result, numbers[0])\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n   \
    \     result = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i != 0 {\n   \
    \         result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, num := range numbers {\n        if i > 0 {\n  \
    \          result = append(result, delimeter)\n        }\n        result = append(result,\
    \ num)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n\
    \  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, number := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, number)\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    var result []int\n    result = append(result,\
    \ numbers[0])\n    for i := 1; i < len(numbers); i++ {\n        result = append(result,\
    \ delimeter)\n        result = append(result, numbers[i])\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i != 0 {\n   \
    \         result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, n := range numbers {\n\
    \        if i > 0 {\n            result = append(result, delimeter)\n        }\n\
    \        result = append(result, n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ result := make([]int, 0, len(numbers) * 2)\n    for i, num := range numbers\
    \ {\n        if i > 0 {\n            result = append(result, delimeter)\n    \
    \    }\n        result = append(result, num)\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, v := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073422
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ len(numbers) * 2 - 1)\n    result[0] = numbers[0]\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result[i * 2 - 1] = delimeter\n        result[i * 2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        result = append(result,\
    \ numbers[i])\n        result = append(result, delimeter)\n    }\n    result =\
    \ append(result, numbers[len(numbers) - 1])\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) ==\
    \ 1 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers)\
    \ * 2 - 1)\n    result = append(result, numbers[0])\n    for i := 1; i < len(numbers);\
    \ i++ {\n        result = append(result, delimeter)\n        result = append(result,\
    \ numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i := 0; i < len(numbers); i++ {\n        result =\
    \ append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result\
    \ = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ if len(numbers) == 0 {\n        return numbers\n    }\n\n    result := make([]int,\
    \ 0, len(numbers) * 2 - 1)\n    result = append(result, numbers[0])\n    for i\
    \ := 1; i < len(numbers); i++ {\n        result = append(result, delimeter)\n\
    \        result = append(result, numbers[i])\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
- exit_code: 0
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\nfunc intersperse(numbers []int, delimeter int) []int {\n   \
    \ var result []int\n    for i, n := range numbers {\n        if i > 0 {\n    \
    \        result = append(result, delimeter)\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073421
