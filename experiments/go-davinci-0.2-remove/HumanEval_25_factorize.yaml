name: HumanEval_25_factorize
language: go_test.go
prompt: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  // Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n// Input number should be equal to the product\
  \ of all factors\nfunc factorize(n int) []int {\n"
tests: "func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
  \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2}\
  \ },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
  \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
  \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
  \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var factors []int\n    for i := 2; i <= n; i++ {\n        for n\
    \ % i == 0 {\n            factors = append(factors, i)\n            n /= i\n \
    \       }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i\
    \ := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    // TODO: Implement this function\n    return []int{}\n\
    }\n", "    factors := []int{}\n    for n > 1 {\n        for i := 2; i <= n; i++\
    \ {\n            if n % i == 0 {\n                factors = append(factors, i)\n\
    \                n = n / i\n                break\n            }\n        }\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    if n < 2 {\n\
    \        return []int{}\n    }\n    factors := []int{}\n    for i := 2; i <= n;\
    \ i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    if\
    \ n == 1 {\n        return []int{}\n    }\n    for i := 2; i < n; i++ {\n    \
    \    if n % i == 0 {\n            return append(factorize(i), factorize(n / i)...)\n\
    \        }\n    }\n    return []int{n}\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for n > 1 {\n        for\
    \ i := 2; i <= n; i++ {\n            if n % i == 0 {\n                factors\
    \ = append(factors, i)\n                n = n / i\n                break\n   \
    \         }\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    var factors []int\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for n %\
    \ 2 == 0 {\n        factors = append(factors, 2)\n        n /= 2\n    }\n    for\
    \ i := 3; i <= n; i += 2 {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    var\
    \ factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n   \
    \         factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    var\
    \ result []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n    \
    \        result = append(result, i)\n            n /= i\n        }\n    }\n  \
    \  return result\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n\
    \        for n % i == 0 {\n            factors = append(factors, i)\n        \
    \    n /= i\n        }\n    }\n    return factors\n}\n", "    if n <= 1 {\n  \
    \      return []int{}\n    }\n    factors := []int{}\n    for i := 2; i <= n;\
    \ i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for n %\
    \ 2 == 0 {\n        factors = append(factors, 2)\n        n /= 2\n    }\n    for\
    \ i := 3; i * i <= n; i += 2 {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 2 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    var factors []int\n    for i := 2; i <= n; i++ {\n\
    \        for n % i == 0 {\n            factors = append(factors, i)\n        \
    \    n /= i\n        }\n    }\n    return factors\n}\n", "    if n == 1 {\n  \
    \      return []int{}\n    }\n    factors := []int{}\n    for i := 2; i <= n;\
    \ i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    if n < 2\
    \ {\n        return []int{}\n    }\n    factors := []int{}\n    for i := 2; i\
    \ <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    var factors\
    \ []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n           \
    \ factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    var factors []int\n    for i := 2; i <= n; i++ {\n     \
    \   for n % i == 0 {\n            factors = append(factors, i)\n            n\
    \ /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for n > 1 {\n        for i := 2; i <= n; i++\
    \ {\n            if n % i == 0 {\n                factors = append(factors, i)\n\
    \                n = n / i\n                break\n            }\n        }\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    if\
    \ n == 1 {\n        return []int{1}\n    }\n    factors := []int{}\n    for i\
    \ := 2; i <= n; i++ {\n        if n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n            i--\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i\
    \ == 0 {\n            factors = append(factors, i)\n            n /= i\n     \
    \   }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    var factors []int\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for n > 1 {\n        for i := 2; i <= n; i++\
    \ {\n            if n % i == 0 {\n                factors = append(factors, i)\n\
    \                n = n / i\n                break\n            }\n        }\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for n % 2 == 0 {\n        factors = append(factors,\
    \ 2)\n        n /= 2\n    }\n    for i := 3; i <= n; i += 2 {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    var\
    \ factors []int\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n   \
    \         factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    var factors []int\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    var factors []int\n    for i := 2; i <= n; i++ {\n        for n % i\
    \ == 0 {\n            factors = append(factors, i)\n            n /= i\n     \
    \   }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    if n <= 1 {\n        return []int{}\n    }\n   \
    \ factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n;\
    \ i++ {\n        for n % i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    if n ==\
    \ 1 {\n        return []int{}\n    }\n    if n == 2 {\n        return []int{2}\n\
    \    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n == 4 {\n   \
    \     return []int{2, 2}\n    }\n    if n == 5 {\n        return []int{5}\n  \
    \  }\n    if n == 6 {\n        return []int{2, 3}\n    }\n    if n == 7 {\n  \
    \      return []int{7}\n    }\n    if n == 8 {\n        return []int{2, 2, 2}\n\
    \    }\n    if n == 9 {\n        return []int{3, 3}\n    }\n    if n == 10 {\n\
    \        return []int{2, 5}\n    }\n    if n == 11 {\n        return []int{11}\n\
    \    }\n    if n == 12 {\n        return []int{2, 2, 3}\n    }\n    if n == 13\
    \ {\n        return []int{13}\n    }\n    if n == 14 {\n        return []int{2,\
    \ 7}\n    }\n    if n == 15 {\n        return []int{3, 5}\n    }\n    if n ==\
    \ 16 {\n        return []int{2, 2, 2, 2}\n    }\n    if n == 17 {\n        return\
    \ []int{17}\n    }\n    if n == 18 {\n        return []int{2, 3, 3}\n    }\n \
    \   if n == 19 {\n        return []int{19}\n    }\n    if n == 20 {\n        return\
    \ []int{2, 2, 5}\n    }\n    if n == 21 {\n        return []int{3, 7}\n    }\n\
    \    if n == 22 {\n        return []int{2, 11}\n    }\n    if n == 23 {\n    \
    \    return []int{23}\n    }\n    if n == 24 {\n        return []int{2, 2, 2,\
    \ 3}\n    }\n    if n == 25 {\n        return []int{5, 5}\n    }\n    if n ==\
    \ 26 {\n        return []int{2, 13}", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for n % 2 == 0 {\n        factors = append(factors, 2)\n        n /= 2\n\
    \    }\n    for i := 3; i <= n; i += 2 {\n        for n % i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    for n % i == 0 {\n            factors = append(factors, i)\n            n\
    \ /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    if n == 1 {\n        return []int{}\n    }\n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            return append(factorize(n / i),\
    \ i)\n        }\n    }\n    return []int{}\n}\n", "    factors := []int{}\n  \
    \  for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors =\
    \ append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        for n %\
    \ i == 0 {\n            factors = append(factors, i)\n            n /= i\n   \
    \     }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        for n % i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n      \
    \      factors = append(factors, i)\n            n /= i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        for n % i == 0 {\n            factors = append(factors, i)\n    \
    \        n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        for n % i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
