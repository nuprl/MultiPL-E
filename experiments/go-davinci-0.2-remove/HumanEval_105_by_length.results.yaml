language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    reverse(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40cgqfw6_test.go:18:37: undefined: get_name

    /tmp/tmp40cgqfw6_test.go:21:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjuxt7vr__test.go:55: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpjuxt7vr__test.go:55: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpjuxt7vr__test.go:55: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %v\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmph_jvewdb_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmph_jvewdb_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmph_jvewdb_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n \
    \       res[i], res[j] = res[j], res[i]\n    }\n    for i, v := range res {\n\
    \        switch v {\n        case \"1\":\n            res[i] = \"One\"\n     \
    \   case \"2\":\n            res[i] = \"Two\"\n        case \"3\":\n         \
    \   res[i] = \"Three\"\n        case \"4\":\n            res[i] = \"Four\"\n \
    \       case \"5\":\n            res[i] = \"Five\"\n        case \"6\":\n    \
    \        res[i] = \"Six\"\n        case \"7\":\n            res[i] = \"Seven\"\
    \n        case \"8\":\n            res[i] = \"Eight\"\n        case \"9\":\n \
    \           res[i] = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfvzm62ad_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var one, two, three, four, five,\
    \ six, seven, eight, nine int\n    for _, v := range arr {\n        if v == 1\
    \ {\n            one++\n        } else if v == 2 {\n            two++\n      \
    \  } else if v == 3 {\n            three++\n        } else if v == 4 {\n     \
    \       four++\n        } else if v == 5 {\n            five++\n        } else\
    \ if v == 6 {\n            six++\n        } else if v == 7 {\n            seven++\n\
    \        } else if v == 8 {\n            eight++\n        } else if v == 9 {\n\
    \            nine++\n        }\n    }\n    for i := 0; i < nine; i++ {\n     \
    \   result = append(result, \"Nine\")\n    }\n    for i := 0; i < eight; i++ {\n\
    \        result = append(result, \"Eight\")\n    }\n    for i := 0; i < seven;\
    \ i++ {\n        result = append(result, \"Seven\")\n    }\n    for i := 0; i\
    \ < six; i++ {\n        result = append(result, \"Six\")\n    }\n    for i :=\
    \ 0; i < five; i++ {\n        result = append(result, \"Five\")\n    }\n    for\
    \ i := 0; i < four; i++ {\n        result = append(result, \"Four\")\n    }\n\
    \    for i := 0; i < three; i++ {\n        result = append(result, \"Three\")\n\
    \    }\n    for i := 0; i < two; i++ {\n        result = append(result, \"Two\"\
    )\n    }\n    for i := 0; i < one; i++ {\n        result = append(result, \"One\"\
    )\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n\
    \    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n       \
    \ case 1:\n            result = append(result, \"One\")\n        case 2:\n   \
    \         result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpe4htjg40_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpe4htjg40_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpe4htjg40_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n \
    \       res[i], res[j] = res[j], res[i]\n    }\n    for i, v := range res {\n\
    \        switch v {\n        case \"1\":\n            res[i] = \"One\"\n     \
    \   case \"2\":\n            res[i] = \"Two\"\n        case \"3\":\n         \
    \   res[i] = \"Three\"\n        case \"4\":\n            res[i] = \"Four\"\n \
    \       case \"5\":\n            res[i] = \"Five\"\n        case \"6\":\n    \
    \        res[i] = \"Six\"\n        case \"7\":\n            res[i] = \"Seven\"\
    \n        case \"8\":\n            res[i] = \"Eight\"\n        case \"9\":\n \
    \           res[i] = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfvzm62ad_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            switch v {\n            case 1:\n  \
    \              result = append(result, \"One\")\n            case 2:\n       \
    \         result = append(result, \"Two\")\n            case 3:\n            \
    \    result = append(result, \"Three\")\n            case 4:\n               \
    \ result = append(result, \"Four\")\n            case 5:\n                result\
    \ = append(result, \"Five\")\n            case 6:\n                result = append(result,\
    \ \"Six\")\n            case 7:\n                result = append(result, \"Seven\"\
    )\n            case 8:\n                result = append(result, \"Eight\")\n \
    \           case 9:\n                result = append(result, \"Nine\")\n     \
    \       }\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpo3vceops_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpo3vceops_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpo3vceops_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            switch v {\n            case 1:\n  \
    \              result = append(result, \"One\")\n            case 2:\n       \
    \         result = append(result, \"Two\")\n            case 3:\n            \
    \    result = append(result, \"Three\")\n            case 4:\n               \
    \ result = append(result, \"Four\")\n            case 5:\n                result\
    \ = append(result, \"Five\")\n            case 6:\n                result = append(result,\
    \ \"Six\")\n            case 7:\n                result = append(result, \"Seven\"\
    )\n            case 8:\n                result = append(result, \"Eight\")\n \
    \           case 9:\n                result = append(result, \"Nine\")\n     \
    \       }\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpo3vceops_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpo3vceops_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpo3vceops_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1f8mfg1p_test.go:35: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp1f8mfg1p_test.go:35: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp1f8mfg1p_test.go:35: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp1f8mfg1p_test.go:35:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppn1m98md_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmppn1m98md_test.go:41: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmppn1m98md_test.go:41: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmppn1m98md_test.go:41: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp6im6l33y_test.go:41: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmp6im6l33y_test.go:41: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp620l5lif_test.go:35: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp620l5lif_test.go:35: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp620l5lif_test.go:35: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp620l5lif_test.go:35:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            switch v {\n            case 1:\n   \
    \             result = append(result, \"One\")\n            case 2:\n        \
    \        result = append(result, \"Two\")\n            case 3:\n             \
    \   result = append(result, \"Three\")\n            case 4:\n                result\
    \ = append(result, \"Four\")\n            case 5:\n                result = append(result,\
    \ \"Five\")\n            case 6:\n                result = append(result, \"Six\"\
    )\n            case 7:\n                result = append(result, \"Seven\")\n \
    \           case 8:\n                result = append(result, \"Eight\")\n    \
    \        case 9:\n                result = append(result, \"Nine\")\n        \
    \    }\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp60ceuhxh_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp60ceuhxh_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp60ceuhxh_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, num_to_str(v))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rlwtyic_test.go:18:37: undefined: num_to_str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var result []string\n    var temp []int\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n        }\n\
    \    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n\
    \        case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpmxk9yxsb_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpmxk9yxsb_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpmxk9yxsb_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaf9hei1_test.go:18:37: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    if len(tmp) == 0 {\n        return result\n    }\n\
    \    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n        case\
    \ 1:\n            result = append(result, \"One\")\n        case 2:\n        \
    \    result = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpk4nwsqfu_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpk4nwsqfu_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpk4nwsqfu_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppy06fmmb_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmppy06fmmb_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmppy06fmmb_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, convert(v))\n\
    \        }\n    }\n    reverse(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplfa_2uw2_test.go:18:37: undefined: convert

    /tmp/tmplfa_2uw2_test.go:21:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        result\
    \ = append(result, convert_to_string(temp[i]))\n    }\n    return result\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a7b690o_test.go:23:33: undefined: convert_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, num_to_str(v))\n    \
    \    }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n     \
    \   res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdnz7a0cx_test.go:18:31: undefined: num_to_str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp1f8mfg1p_test.go:35: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp1f8mfg1p_test.go:35: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp1f8mfg1p_test.go:35: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp1f8mfg1p_test.go:35:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpjuxt7vr__test.go:55: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpjuxt7vr__test.go:55: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpjuxt7vr__test.go:55: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        result =\
    \ append(result, fmt.Sprintf(\"%d\", v))\n    }\n    for i, j := 0, len(result)-1;\
    \ i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n\
    \    }\n    for i, v := range result {\n        switch v {\n        case \"1\"\
    :\n            result[i] = \"One\"\n        case \"2\":\n            result[i]\
    \ = \"Two\"\n        case \"3\":\n            result[i] = \"Three\"\n        case\
    \ \"4\":\n            result[i] = \"Four\"\n        case \"5\":\n            result[i]\
    \ = \"Five\"\n        case \"6\":\n            result[i] = \"Six\"\n        case\
    \ \"7\":\n            result[i] = \"Seven\"\n        case \"8\":\n           \
    \ result[i] = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\
    \n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpn6zpspcb_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpn6zpspcb_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpn6zpspcb_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var one, two, three, four, five,\
    \ six, seven, eight, nine int\n    for _, v := range arr {\n        switch v {\n\
    \        case 1:\n            one++\n        case 2:\n            two++\n    \
    \    case 3:\n            three++\n        case 4:\n            four++\n     \
    \   case 5:\n            five++\n        case 6:\n            six++\n        case\
    \ 7:\n            seven++\n        case 8:\n            eight++\n        case\
    \ 9:\n            nine++\n        }\n    }\n    for i := 0; i < one; i++ {\n \
    \       result = append(result, \"One\")\n    }\n    for i := 0; i < two; i++\
    \ {\n        result = append(result, \"Two\")\n    }\n    for i := 0; i < three;\
    \ i++ {\n        result = append(result, \"Three\")\n    }\n    for i := 0; i\
    \ < four; i++ {\n        result = append(result, \"Four\")\n    }\n    for i :=\
    \ 0; i < five; i++ {\n        result = append(result, \"Five\")\n    }\n    for\
    \ i := 0; i < six; i++ {\n        result = append(result, \"Six\")\n    }\n  \
    \  for i := 0; i < seven; i++ {\n        result = append(result, \"Seven\")\n\
    \    }\n    for i := 0; i < eight; i++ {\n        result = append(result, \"Eight\"\
    )\n    }\n    for i := 0; i < nine; i++ {\n        result = append(result, \"\
    Nine\")\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_nu2x4as_test.go:86: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One Two Two Three Four Five Eight]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp_nu2x4as_test.go:86: expected\
    \ '[Three Two One]', got '[One Two Three]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_nu2x4as_test.go:86: expected '[Nine Eight Four]', got '[Four\
    \ Eight Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp6im6l33y_test.go:41: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmp6im6l33y_test.go:41: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _,v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp)-1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxcczn_m5_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxcczn_m5_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxcczn_m5_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            switch v {\n            case 1:\n  \
    \              result = append(result, \"One\")\n            case 2:\n       \
    \         result = append(result, \"Two\")\n            case 3:\n            \
    \    result = append(result, \"Three\")\n            case 4:\n               \
    \ result = append(result, \"Four\")\n            case 5:\n                result\
    \ = append(result, \"Five\")\n            case 6:\n                result = append(result,\
    \ \"Six\")\n            case 7:\n                result = append(result, \"Seven\"\
    )\n            case 8:\n                result = append(result, \"Eight\")\n \
    \           case 9:\n                result = append(result, \"Nine\")\n     \
    \       }\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpo3vceops_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpo3vceops_test.go:63: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpo3vceops_test.go:63: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpv_5w15x3_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpv_5w15x3_test.go:41: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpv_5w15x3_test.go:41: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpv_5w15x3_test.go:41: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, get_name(v))\n      \
    \  }\n    }\n    // reverse\n    for i, j := 0, len(res)-1; i < j; i, j = i+1,\
    \ j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return res\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpifnskrkz_test.go:18:31: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var result []string\n    for _, v := range arr {\n        if v >= 1 && v\
    \ <= 9 {\n            result = append(result, get_name(v))\n        }\n    }\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw42ni_sx_test.go:21:37: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 0
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var one, two, three, four, five,\
    \ six, seven, eight, nine int\n    for _, v := range arr {\n        if v == 1\
    \ {\n            one++\n        } else if v == 2 {\n            two++\n      \
    \  } else if v == 3 {\n            three++\n        } else if v == 4 {\n     \
    \       four++\n        } else if v == 5 {\n            five++\n        } else\
    \ if v == 6 {\n            six++\n        } else if v == 7 {\n            seven++\n\
    \        } else if v == 8 {\n            eight++\n        } else if v == 9 {\n\
    \            nine++\n        }\n    }\n    for i := 0; i < nine; i++ {\n     \
    \   result = append(result, \"Nine\")\n    }\n    for i := 0; i < eight; i++ {\n\
    \        result = append(result, \"Eight\")\n    }\n    for i := 0; i < seven;\
    \ i++ {\n        result = append(result, \"Seven\")\n    }\n    for i := 0; i\
    \ < six; i++ {\n        result = append(result, \"Six\")\n    }\n    for i :=\
    \ 0; i < five; i++ {\n        result = append(result, \"Five\")\n    }\n    for\
    \ i := 0; i < four; i++ {\n        result = append(result, \"Four\")\n    }\n\
    \    for i := 0; i < three; i++ {\n        result = append(result, \"Three\")\n\
    \    }\n    for i := 0; i < two; i++ {\n        result = append(result, \"Two\"\
    )\n    }\n    for i := 0; i < one; i++ {\n        result = append(result, \"One\"\
    )\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp90_be68z_test.go:44: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[3 2 8 5 4 1 1 2]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp90_be68z_test.go:44: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp90_be68z_test.go:44: expected\
    \ '[Three Two One]', got '[2 3 1]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmp90_be68z_test.go:44: expected '[Nine Eight Four]', got '[8 4 9]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n\
    \    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n       \
    \ case 1:\n            result = append(result, \"One\")\n        case 2:\n   \
    \         result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdz77b6co_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpdz77b6co_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpdz77b6co_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaf9hei1_test.go:18:37: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    sort.Ints(temp)\n    for i := len(temp) - 1; i >=\
    \ 0; i-- {\n        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fi8_27y_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpv_5w15x3_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpv_5w15x3_test.go:41: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpv_5w15x3_test.go:41: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpv_5w15x3_test.go:41: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    if len(tmp) == 0 {\n        return result\n    }\n\
    \    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i] {\n        case\
    \ 1:\n            result = append(result, \"One\")\n        case 2:\n        \
    \    result = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpk4nwsqfu_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpk4nwsqfu_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpk4nwsqfu_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppy06fmmb_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmppy06fmmb_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmppy06fmmb_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    reverse(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40cgqfw6_test.go:18:37: undefined: get_name

    /tmp/tmp40cgqfw6_test.go:21:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var numbers []int\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            numbers = append(numbers,\
    \ v)\n        }\n    }\n    for i := len(numbers) - 1; i >= 0; i-- {\n       \
    \ switch numbers[i] {\n        case 1:\n            result = append(result, \"\
    One\")\n        case 2:\n            result = append(result, \"Two\")\n      \
    \  case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpegj5w6pj_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpegj5w6pj_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpegj5w6pj_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n \
    \       res[i], res[j] = res[j], res[i]\n    }\n    for i, v := range res {\n\
    \        switch v {\n        case \"1\":\n            res[i] = \"One\"\n     \
    \   case \"2\":\n            res[i] = \"Two\"\n        case \"3\":\n         \
    \   res[i] = \"Three\"\n        case \"4\":\n            res[i] = \"Four\"\n \
    \       case \"5\":\n            res[i] = \"Five\"\n        case \"6\":\n    \
    \        res[i] = \"Six\"\n        case \"7\":\n            res[i] = \"Seven\"\
    \n        case \"8\":\n            res[i] = \"Eight\"\n        case \"9\":\n \
    \           res[i] = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfvzm62ad_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp6im6l33y_test.go:41: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmp6im6l33y_test.go:41: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmph8p14y6r_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmph8p14y6r_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmph8p14y6r_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var result []string\n    for _, v := range arr {\n        if v >= 1 && v\
    \ <= 9 {\n            switch v {\n            case 1:\n                result\
    \ = append(result, \"One\")\n            case 2:\n                result = append(result,\
    \ \"Two\")\n            case 3:\n                result = append(result, \"Three\"\
    )\n            case 4:\n                result = append(result, \"Four\")\n  \
    \          case 5:\n                result = append(result, \"Five\")\n      \
    \      case 6:\n                result = append(result, \"Six\")\n           \
    \ case 7:\n                result = append(result, \"Seven\")\n            case\
    \ 8:\n                result = append(result, \"Eight\")\n            case 9:\n\
    \                result = append(result, \"Nine\")\n            }\n        }\n\
    \    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp7f5da918_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp7f5da918_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp7f5da918_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmppy06fmmb_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmppy06fmmb_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmppy06fmmb_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v < 1 || v > 9 {\n            continue\n        }\n        switch v\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    for i, j := 0,\
    \ len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp5_kop2d1_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp5_kop2d1_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp5_kop2d1_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    var temp_str\
    \ string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n       \
    \     temp = append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i\
    \ >= 0; i-- {\n        switch temp[i] {\n        case 1:\n            temp_str\
    \ = \"One\"\n        case 2:\n            temp_str = \"Two\"\n        case 3:\n\
    \            temp_str = \"Three\"\n        case 4:\n            temp_str = \"\
    Four\"\n        case 5:\n            temp_str = \"Five\"\n        case 6:\n  \
    \          temp_str = \"Six\"\n        case 7:\n            temp_str = \"Seven\"\
    \n        case 8:\n            temp_str = \"Eight\"\n        case 9:\n       \
    \     temp_str = \"Nine\"\n        }\n        result = append(result, temp_str)\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpw9nfi9zi_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpw9nfi9zi_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpw9nfi9zi_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var tmp []int\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n\
    \        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch tmp[i]\
    \ {\n        case 1:\n            res = append(res, \"One\")\n        case 2:\n\
    \            res = append(res, \"Two\")\n        case 3:\n            res = append(res,\
    \ \"Three\")\n        case 4:\n            res = append(res, \"Four\")\n     \
    \   case 5:\n            res = append(res, \"Five\")\n        case 6:\n      \
    \      res = append(res, \"Six\")\n        case 7:\n            res = append(res,\
    \ \"Seven\")\n        case 8:\n            res = append(res, \"Eight\")\n    \
    \    case 9:\n            res = append(res, \"Nine\")\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp718jv2wi_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp718jv2wi_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp718jv2wi_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var one, two, three, four, five,\
    \ six, seven, eight, nine []int\n    for _, v := range arr {\n        switch v\
    \ {\n        case 1:\n            one = append(one, v)\n        case 2:\n    \
    \        two = append(two, v)\n        case 3:\n            three = append(three,\
    \ v)\n        case 4:\n            four = append(four, v)\n        case 5:\n \
    \           five = append(five, v)\n        case 6:\n            six = append(six,\
    \ v)\n        case 7:\n            seven = append(seven, v)\n        case 8:\n\
    \            eight = append(eight, v)\n        case 9:\n            nine = append(nine,\
    \ v)\n        }\n    }\n    result = append(result, oneToNine(one)...)\n    result\
    \ = append(result, oneToNine(two)...)\n    result = append(result, oneToNine(three)...)\n\
    \    result = append(result, oneToNine(four)...)\n    result = append(result,\
    \ oneToNine(five)...)\n    result = append(result, oneToNine(six)...)\n    result\
    \ = append(result, oneToNine(seven)...)\n    result = append(result, oneToNine(eight)...)\n\
    \    result = append(result, oneToNine(nine)...)\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6at2t8k_test.go:39:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:40:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:41:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:42:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:43:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:44:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:45:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:46:29: undefined: oneToNine

    /tmp/tmpk6at2t8k_test.go:47:29: undefined: oneToNine

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    reverse(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3t3vbjb5_test.go:18:37: undefined: get_name

    /tmp/tmp3t3vbjb5_test.go:21:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp6im6l33y_test.go:41: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp6im6l33y_test.go:41: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmp6im6l33y_test.go:41: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    reverse(result)\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40cgqfw6_test.go:18:37: undefined: get_name

    /tmp/tmp40cgqfw6_test.go:21:5: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n\
    \    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n       \
    \ case 1:\n            result = append(result, \"One\")\n        case 2:\n   \
    \         result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdz77b6co_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpdz77b6co_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpdz77b6co_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n \
    \       res[i], res[j] = res[j], res[i]\n    }\n    for i, v := range res {\n\
    \        switch v {\n        case \"1\":\n            res[i] = \"One\"\n     \
    \   case \"2\":\n            res[i] = \"Two\"\n        case \"3\":\n         \
    \   res[i] = \"Three\"\n        case \"4\":\n            res[i] = \"Four\"\n \
    \       case \"5\":\n            res[i] = \"Five\"\n        case \"6\":\n    \
    \        res[i] = \"Six\"\n        case \"7\":\n            res[i] = \"Seven\"\
    \n        case \"8\":\n            res[i] = \"Eight\"\n        case \"9\":\n \
    \           res[i] = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfvzm62ad_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n \
    \       res[i], res[j] = res[j], res[i]\n    }\n    for i, v := range res {\n\
    \        switch v {\n        case \"1\":\n            res[i] = \"One\"\n     \
    \   case \"2\":\n            res[i] = \"Two\"\n        case \"3\":\n         \
    \   res[i] = \"Three\"\n        case \"4\":\n            res[i] = \"Four\"\n \
    \       case \"5\":\n            res[i] = \"Five\"\n        case \"6\":\n    \
    \        res[i] = \"Six\"\n        case \"7\":\n            res[i] = \"Seven\"\
    \n        case \"8\":\n            res[i] = \"Eight\"\n        case \"9\":\n \
    \           res[i] = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfvzm62ad_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // Your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmprfoneyvx_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmprfoneyvx_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmprfoneyvx_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmprfoneyvx_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            result = append(result, get_name(v))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaf9hei1_test.go:18:37: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n\
    \    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n       \
    \ case 1:\n            result = append(result, \"One\")\n        case 2:\n   \
    \         result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdz77b6co_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpdz77b6co_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpdz77b6co_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var result []string\n    for _, v := range arr {\n        if v >= 1 && v\
    \ <= 9 {\n            switch v {\n            case 1:\n                result\
    \ = append(result, \"One\")\n            case 2:\n                result = append(result,\
    \ \"Two\")\n            case 3:\n                result = append(result, \"Three\"\
    )\n            case 4:\n                result = append(result, \"Four\")\n  \
    \          case 5:\n                result = append(result, \"Five\")\n      \
    \      case 6:\n                result = append(result, \"Six\")\n           \
    \ case 7:\n                result = append(result, \"Seven\")\n            case\
    \ 8:\n                result = append(result, \"Eight\")\n            case 9:\n\
    \                result = append(result, \"Nine\")\n            }\n        }\n\
    \    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp7f5da918_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp7f5da918_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp7f5da918_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    for _, v := range arr {\n     \
    \   if v >= 1 && v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n \
    \       res[i], res[j] = res[j], res[i]\n    }\n    for i, v := range res {\n\
    \        switch v {\n        case \"1\":\n            res[i] = \"One\"\n     \
    \   case \"2\":\n            res[i] = \"Two\"\n        case \"3\":\n         \
    \   res[i] = \"Three\"\n        case \"4\":\n            res[i] = \"Four\"\n \
    \       case \"5\":\n            res[i] = \"Five\"\n        case \"6\":\n    \
    \        res[i] = \"Six\"\n        case \"7\":\n            res[i] = \"Seven\"\
    \n        case \"8\":\n            res[i] = \"Eight\"\n        case \"9\":\n \
    \           res[i] = \"Nine\"\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpfvzm62ad_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpfvzm62ad_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return nil\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpxs9lq4ko_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpxs9lq4ko_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpxs9lq4ko_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var res []string\n    var nums []int\n    for _, v :=\
    \ range arr {\n        if v >= 1 && v <= 9 {\n            nums = append(nums,\
    \ v)\n        }\n    }\n    for i := len(nums) - 1; i >= 0; i-- {\n        switch\
    \ nums[i] {\n        case 1:\n            res = append(res, \"One\")\n       \
    \ case 2:\n            res = append(res, \"Two\")\n        case 3:\n         \
    \   res = append(res, \"Three\")\n        case 4:\n            res = append(res,\
    \ \"Four\")\n        case 5:\n            res = append(res, \"Five\")\n      \
    \  case 6:\n            res = append(res, \"Six\")\n        case 7:\n        \
    \    res = append(res, \"Seven\")\n        case 8:\n            res = append(res,\
    \ \"Eight\")\n        case 9:\n            res = append(res, \"Nine\")\n     \
    \   }\n    }\n    return res\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp947jayne_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp947jayne_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp947jayne_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var result []string\n    var temp []int\n    for _, v := range arr {\n  \
    \      if v > 0 && v < 10 {\n            temp = append(temp, v)\n        }\n \
    \   }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n \
    \       case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpqvbdjuvf_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpqvbdjuvf_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpqvbdjuvf_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var temp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            temp = append(temp,\
    \ v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch\
    \ temp[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpy_l4lvow_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpy_l4lvow_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var nums []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            nums = append(nums,\
    \ v)\n        }\n    }\n    for i := len(nums) - 1; i >= 0; i-- {\n        switch\
    \ nums[i] {\n        case 1:\n            result = append(result, \"One\")\n \
    \       case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpe_enb_en_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpe_enb_en_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpe_enb_en_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpfs2pj5xt_test.go:36: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpfs2pj5xt_test.go:36: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpfs2pj5xt_test.go:36:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    var result []string\n    for _, v := range arr {\n        if v > 9 || v <\
    \ 1 {\n            continue\n        }\n        switch v {\n        case 1:\n\
    \            result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j =\
    \ i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n   \
    \ return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp07701nft_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmp07701nft_test.go:67: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp07701nft_test.go:67: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    var tmp []int\n    for _, v\
    \ := range arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpxhbjorkr_test.go:64: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpxhbjorkr_test.go:64: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// If the array is empty, return an empty\
    \ array:\n// If the array has any strange number ignore it:\nfunc by_length(arr\
    \ []int) []string {\n    var result []string\n    for _, v := range arr {\n  \
    \      if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1,\
    \ j-1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    for i,\
    \ v := range result {\n        switch v {\n        case \"1\":\n            result[i]\
    \ = \"One\"\n        case \"2\":\n            result[i] = \"Two\"\n        case\
    \ \"3\":\n            result[i] = \"Three\"\n        case \"4\":\n           \
    \ result[i] = \"Four\"\n        case \"5\":\n            result[i] = \"Five\"\n\
    \        case \"6\":\n            result[i] = \"Six\"\n        case \"7\":\n \
    \           result[i] = \"Seven\"\n        case \"8\":\n            result[i]\
    \ = \"Eight\"\n        case \"9\":\n            result[i] = \"Nine\"\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Three Two Eight Five Four One One Two]'\n    --- FAIL:\
    \ TestBy_Length/test_num__3 (0.00s)\n        tmpuktq641w_test.go:66: expected\
    \ '[Three Two One]', got '[Two Three One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpuktq641w_test.go:66: expected '[Nine Eight Four]', got '[Eight\
    \ Four Nine]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
