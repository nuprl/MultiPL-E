language: go_test.go
name: HumanEval_62_derivative
results:
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(res); i++ {\n        res[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpql0g33zd_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(res); i++ {\n        res[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpql0g33zd_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n\
    \        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var dxs []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        dxs = append(dxs, i * xs[i])\n    }\n    return dxs\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result\
    \ = append(result, i * xs[i])\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(result); i++ {\n        result[i] = xs[i\
    \ + 1] * (i + 1)\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpok6wgwxz_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result\
    \ = append(result, i * xs[i])\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpl8pu9jw4_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var result []int\n    for i, x := range xs\
    \ {\n        if i == 0 {\n            continue\n        }\n        result = append(result,\
    \ i * x)\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var res []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        res = append(res, xs[i] * i)\n    }\n    return res\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(result); i++ {\n        result[i] = xs[i\
    \ + 1] * (i + 1)\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpok6wgwxz_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n        ys[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprrms9aar_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    ys := make([]int, len(xs))\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i-1] = xs[i] * i\n    }\n    return ys\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpvriq2p7__test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpvriq2p7__test.go:36:\
    \ expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=6) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpvriq2p7__test.go:36:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpvriq2p7__test.go:36:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0) %!s(int=16) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpvriq2p7__test.go:36: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ret := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(ret); i++ {\n        ret[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return ret\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp51iimtte_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpg_vkfwsx_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    var result []int\n\
    \    for i := 1; i < len(xs); i++ {\n        result = append(result, i * xs[i])\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmphmgpwytu_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n\
    \        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    var res []int\n    for i := 1; i < len(xs); i++ {\n        res = append(res,\
    \ i * xs[i])\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n        ys[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprrms9aar_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpskcw3mph_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(result); i++ {\n        result[i] = xs[i\
    \ + 1] * (i + 1)\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpok6wgwxz_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return\
    \ xs\n    }\n    if n == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ n - 1)\n    for i := 0; i < n - 1; i++ {\n        dxs[i] = xs[i + 1] * (i +\
    \ 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpcnkoq0aj_test.go:43: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpskcw3mph_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpl8pu9jw4_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var ys []int\n    for i := 1; i < len(xs); i++ {\n        ys = append(ys,\
    \ i * xs[i])\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var result []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var res []int\n    for i := 1; i < len(xs); i++ {\n        res = append(res,\
    \ i * xs[i])\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpmulbtgmq_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n\
    \        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var dxs []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        dxs = append(dxs, i * xs[i])\n    }\n    return dxs\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpg_vkfwsx_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result\
    \ = append(result, i * xs[i])\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpskcw3mph_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(res); i++ {\n        res[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpql0g33zd_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    // TODO: implement this function\n    return\
    \ []int{}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpli1lzcjp_test.go:33: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n\
    \        tmpli1lzcjp_test.go:33: expected '[%!s(int=2) %!s(int=6)]', got '[]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpli1lzcjp_test.go:33:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmpli1lzcjp_test.go:33: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    d := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(d); i++ {\n        d[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(result); i++ {\n        result[i] = xs[i\
    \ + 1] * (i + 1)\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpok6wgwxz_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n\
    \        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return nil\n  \
    \  }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpskcw3mph_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    var result []int\n\
    \    for i := 1; i < len(xs); i++ {\n        result = append(result, i * xs[i])\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmphmgpwytu_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result\
    \ = append(result, i * xs[i])\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var result []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n\
    \        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var result []int\n    for i := 1; i < len(xs); i++ {\n        result\
    \ = append(result, i * xs[i])\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    // xs[0] is constant, so derivative is 0.\n    // xs[1] is x, so derivative\
    \ is 1.\n    // xs[2] is x^2, so derivative is 2 * xs[2] * x.\n    // xs[3] is\
    \ x^3, so derivative is 3 * xs[3] * x^2.\n    // ...\n    // xs[n] is x^n, so\
    \ derivative is n * xs[n] * x^(n-1).\n    //\n    // So, derivative is xs[n] *\
    \ n * x^(n-1).\n    //\n    // We can calculate this by iterating over xs,\n \
    \   // and multiplying each element by its index.\n    //\n    // We can also\
    \ calculate this by iterating over xs,\n    // and multiplying each element by\
    \ its index,\n    // and then removing the first element.\n    //\n    // We can\
    \ also calculate this by iterating over xs,\n    // and multiplying each element\
    \ by its index,\n    // and then removing the first element,\n    // and then\
    \ removing the last element.\n    //\n    // We can also calculate this by iterating\
    \ over xs,\n    // and multiplying each element by its index,\n    // and then\
    \ removing the first element,\n    // and then removing the last element,\n  \
    \  // and then removing the last element.\n    //\n    // We can also calculate\
    \ this by iterating over xs,\n    // and multiplying each element by its index,\n\
    \    // and then removing the first element,\n    // and then removing the last\
    \ element,\n    // and then removing the last element,\n    // and then removing\
    \ the last element.\n    //\n    // We can also calculate this by iterating over\
    \ xs,\n    // and multiplying each element by its index,\n    // and then removing\
    \ the first element,\n    // and then removing the last element,\n    // and then\
    \ removing the last element,\n    // and then removing the last element,\n   \
    \ // and then removing the last element.\n    //\n    // We can also calculate\
    \ this by iterating over xs,\n    // and multiplying each element\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm1r_dwga_test.go:59:6: expected ''('', found TestDerivative

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073781
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n        ys[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprrms9aar_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ret := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ret[i - 1] = xs[i]\
    \ * i\n    }\n    return ret\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpu82tsnjm_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    d := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n \
    \       d[i - 1] = xs[i] * i\n    }\n    return d\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        dxs[i - 1] = xs[i]\
    \ * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqkf_jy68_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    ys := make([]int, len(xs) - 1)\n    for i\
    \ := 0; i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var ret []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        ret = append(ret, xs[i] * i)\n    }\n    return ret\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var result []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    res := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        res[i - 1] = xs[i]\
    \ * i\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpj81yuryr_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    var res []int\n\
    \    for i := 1; i < len(xs); i++ {\n        res = append(res, i * xs[i])\n  \
    \  }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate :=\
    \ derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp_pty4aof_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ys := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ys[i - 1] = xs[i]\
    \ * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp5cs6opsk_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    var res []int\n    for i := 1; i < len(xs); i++ {\n        res = append(res,\
    \ i * xs[i])\n    }\n    return res\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n\
    \        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n        dxs[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpacos7a3l_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    ret := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        ret[i - 1] = xs[i]\
    \ * i\n    }\n    return ret\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpu82tsnjm_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    dxs := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n        dxs[i] = xs[i + 1]\
    \ * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpacos7a3l_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073782
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    var res []int\n    for i := 1; i < len(xs);\
    \ i++ {\n        res = append(res, xs[i] * i)\n    }\n    return res\n}\n\nfunc\
    \ TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0; i < len(dxs); i++ {\n\
    \        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp0xxyjngh_test.go:42: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\nfunc\
    \ derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return xs\n   \
    \ }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i] *= i + 1\n    }\n\
    \    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073780
