language: go_test.go
name: HumanEval_53_add
results:
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add\
    \ two numbers x and y\nfunc add(x int, y int) int {\n    return x + y\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0, 1), expected: 1 },\n     { actual: candidate(1, 0), expected: 1\
    \ },\n     { actual: candidate(2, 3), expected: 5 },\n     { actual: candidate(5,\
    \ 7), expected: 12 },\n     { actual: candidate(7, 5), expected: 12 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073522
