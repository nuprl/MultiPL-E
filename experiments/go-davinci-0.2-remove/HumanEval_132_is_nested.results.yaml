language: go_test.go
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '(' {\n            stack = append(stack,\
    \ \"(\")\n        } else if char == ')' {\n            if len(stack) == 0 {\n\
    \                return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__11\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__12 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__13\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it onto the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element off the stack\n            if len(stack) > 0 {\n      \
    \          stack = stack[:len(stack)-1]\n            } else {\n              \
    \  // If the stack is empty, return false\n                return false\n    \
    \        }\n        }\n    }\n    // If the stack is empty, return true\n    if\
    \ len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxut4h40c_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpxut4h40c_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpxut4h40c_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpxut4h40c_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == 91 {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == 93 {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp906vw2xl_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp906vw2xl_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp906vw2xl_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp906vw2xl_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []rune\n    // Iterate over the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, char)\n \
    \       } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpw2o5iq93_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpw2o5iq93_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpw2o5iq93_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpw2o5iq93_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp_3np_uaw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp_3np_uaw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp_3np_uaw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp_3np_uaw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, \"\
    [\")\n        } else if c == ']' {\n            if len(stack) == 0 {\n       \
    \         return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel0wuvkr_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel0wuvkr_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel0wuvkr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel0wuvkr_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            if len(stack) > 0 {\n             \
    \   stack = stack[:len(stack)-1]\n            } else {\n                // If\
    \ the stack is empty, return false\n                return false\n           \
    \ }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    // If the stack is not empty, return\
    \ false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp56k1lrx1_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp56k1lrx1_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp56k1lrx1_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp56k1lrx1_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == '[' {\n            stack\
    \ = append(stack, myString[i])\n        } else if myString[i] == ']' {\n     \
    \       if len(stack) == 0 {\n                return false\n            } else\
    \ {\n                stack = stack[:len(stack)-1]\n            }\n        }\n\
    \    }\n    if len(stack) == 0 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpw0he_1hs_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpw0he_1hs_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpw0he_1hs_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpw0he_1hs_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    stack := []string{}\n\
    \    // Iterate through the string\n    for _, char := range myString {\n    \
    \    // If the character is an opening bracket, push it to the stack\n       \
    \ if char == '[' {\n            stack = append(stack, \"[\")\n        } else {\n\
    \            // If the character is a closing bracket, pop the last element from\
    \ the stack\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp3il6aneo_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp3il6aneo_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp3il6aneo_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp3il6aneo_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    stack := make([]byte,\
    \ 0)\n    // Iterate through the string\n    for i := 0; i < len(myString); i++\
    \ {\n        // If the character is an opening bracket, push it to the stack\n\
    \        if myString[i] == '[' {\n            stack = append(stack, myString[i])\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            if len(stack) > 0 {\n             \
    \   stack = stack[:len(stack)-1]\n            } else {\n                // If\
    \ the stack is empty, return false\n                return false\n           \
    \ }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    // Otherwise, return false\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2ztp853q_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2ztp853q_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2ztp853q_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2ztp853q_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpugyug5pf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpugyug5pf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpugyug5pf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpugyug5pf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpev2f5qk1_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpev2f5qk1_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpev2f5qk1_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpev2f5qk1_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            stack = stack[:len(stack)-1]\n\
    \            // If the stack is empty, return false\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x514620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_nested(...)\n\t/tmp/tmpaf_p2poo_test.go:21\n\
    command-line-arguments_test.TestIs_Nested(0x0?)\n\t/tmp/tmpaf_p2poo_test.go:56\
    \ +0x1d27\ntesting.tRunner(0xc0001a0340, 0x529f98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for i :=\
    \ 0; i < len(myString); i++ {\n        // If the current character is an opening\
    \ bracket, push it to the stack\n        if myString[i] == '[' {\n           \
    \ stack = append(stack, string(myString[i]))\n        } else {\n            //\
    \ If the current character is a closing bracket, pop the last element from the\
    \ stack\n            // If the stack is empty, return false\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpm58una45_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpm58una45_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpm58una45_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpm58una45_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    if len(myString) == 0 {\n        return\
    \ false\n    }\n    var stack []rune\n    for _, char := range myString {\n  \
    \      if char == '[' {\n            stack = append(stack, char)\n        } else\
    \ if char == ']' {\n            if len(stack) == 0 {\n                return false\n\
    \            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n \
    \   return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp1m32j_a0_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp1m32j_a0_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp1m32j_a0_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, v :=\
    \ range myString {\n        if v == '[' {\n            stack = append(stack, \"\
    [\")\n        } else if v == ']' {\n            if len(stack) == 0 {\n       \
    \         return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpx0bnmzvm_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpx0bnmzvm_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpx0bnmzvm_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpx0bnmzvm_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            if len(stack) > 0 {\n             \
    \   stack = stack[:len(stack)-1]\n            } else {\n                // If\
    \ there is no opening bracket in the stack, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If there are no brackets in the\
    \ stack, return true\n    if len(stack) == 0 {\n        return true\n    } else\
    \ {\n        // Otherwise, return false\n        return false\n    }\n}\n\nfunc\
    \ TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpv_coiwlt_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpv_coiwlt_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpv_coiwlt_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpv_coiwlt_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    var stack []rune\n\
    \    // Loop through the string\n    for _, char := range myString {\n       \
    \ // If the character is an opening bracket, push it onto the stack\n        if\
    \ char == '[' {\n            stack = append(stack, char)\n        } else {\n \
    \           // If the character is a closing bracket, pop the last element off\
    \ the stack\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpanf_ddo7_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpanf_ddo7_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpanf_ddo7_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpanf_ddo7_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp5e9lfaqr_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp5e9lfaqr_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp5e9lfaqr_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp5e9lfaqr_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate over the string\n    for _, char\
    \ := range myString {\n        // If the character is a bracket, push it to the\
    \ stack\n        if char == '[' || char == ']' {\n            stack = append(stack,\
    \ string(char))\n        }\n    }\n    // If the length of the stack is odd, return\
    \ false\n    if len(stack) % 2 != 0 {\n        return false\n    }\n    // Iterate\
    \ over the stack\n    for i := 0; i < len(stack) - 1; i++ {\n        // If the\
    \ current bracket is a closing bracket and the next bracket is an opening bracket,\
    \ return true\n        if stack[i] == \"]\" && stack[i + 1] == \"[\" {\n     \
    \       return true\n        }\n    }\n    // Return false if no brackets are\
    \ nested\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__0\
    \ (0.00s)\n        tmpxu54o8fd_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__1 (0.00s)\n        tmpxu54o8fd_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxu54o8fd_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__4 (0.00s)\n        tmpxu54o8fd_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate over the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            if len(stack) > 0 {\n     \
    \           stack = stack[:len(stack)-1]\n            } else {\n             \
    \   // If the stack is empty, return false\n                return false\n   \
    \         }\n        }\n    }\n    // If the stack is empty, return true\n   \
    \ if len(stack) == 0 {\n        return true\n    }\n    // If the stack is not\
    \ empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpsfdhsp0u_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpsfdhsp0u_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpsfdhsp0u_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpsfdhsp0u_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    var top rune\n\
    \    for _, char := range myString {\n        if char == '[' {\n            stack\
    \ = append(stack, char)\n        } else if char == ']' {\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n            top = stack[len(stack)-1]\n\
    \            stack = stack[:len(stack)-1]\n            if top == '[' {\n     \
    \           return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmpwqhhb82y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmpwqhhb82y_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmpwqhhb82y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmpwqhhb82y_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmpwqhhb82y_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmpwqhhb82y_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it onto\
    \ the stack\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else {\n            // If the character is a closing bracket, pop\
    \ the last bracket off the stack\n            if len(stack) > 0 {\n          \
    \      stack = stack[:len(stack)-1]\n            } else {\n                //\
    \ If the stack is empty, return false\n                return false\n        \
    \    }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    } else {\n        // If the stack is not empty,\
    \ return false\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp8q9lxe_x_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp8q9lxe_x_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp8q9lxe_x_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp8q9lxe_x_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []rune\n    // Create a map to hold the brackets\n    bracketMap\
    \ := map[rune]rune{\n        '}': '{',\n        ']': '[',\n        ')': '(',\n\
    \    }\n    // Loop through the string\n    for _, char := range myString {\n\
    \        // If the character is a closing bracket\n        if _, ok := bracketMap[char];\
    \ ok {\n            // If the stack is empty, return false\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n            // If the last\
    \ element in the stack is not the opening bracket for the current closing bracket,\
    \ return false\n            if stack[len(stack)-1] != bracketMap[char] {\n   \
    \             return false\n            }\n            // If the last element\
    \ in the stack is the opening bracket for the current closing bracket, pop the\
    \ last element\n            stack = stack[:len(stack)-1]\n        } else {\n \
    \           // If the character is an opening bracket, push it to the stack\n\
    \            stack = append(stack, char)\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    // If the stack is not empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2f7_ppgi_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2f7_ppgi_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2f7_ppgi_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2f7_ppgi_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a map to store the number\
    \ of open brackets\n    // and the number of closed brackets\n    bracketMap :=\
    \ make(map[string]int)\n    bracketMap[\"(\"] = 0\n    bracketMap[\")\"] = 0\n\
    \    // Loop through the string\n    for _, char := range myString {\n       \
    \ // If the character is an open bracket, increment the number of open brackets\n\
    \        if string(char) == \"(\" {\n            bracketMap[\"(\"] += 1\n    \
    \    }\n        // If the character is a closed bracket, increment the number\
    \ of closed brackets\n        if string(char) == \")\" {\n            bracketMap[\"\
    )\"] += 1\n        }\n        // If the number of closed brackets is greater than\
    \ the number of open brackets,\n        // then there is no valid subsequence\
    \ of brackets\n        if bracketMap[\")\"] > bracketMap[\"(\"] {\n          \
    \  return false\n        }\n    }\n    // If the number of open brackets is equal\
    \ to the number of closed brackets,\n    // then there is a valid subsequence\
    \ of brackets\n    if bracketMap[\"(\"] == bracketMap[\")\"] {\n        return\
    \ true\n    }\n    // Otherwise, there is no valid subsequence of brackets\n \
    \   return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmp2tvqikl3_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmp2tvqikl3_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmp2tvqikl3_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmp2tvqikl3_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmp2tvqikl3_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmp2tvqikl3_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__11\
    \ (0.00s)\n        tmp2tvqikl3_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__12 (0.00s)\n        tmp2tvqikl3_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__13\
    \ (0.00s)\n        tmp2tvqikl3_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var myStack []string\n    // Loop through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            myStack = append(myStack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            if len(myStack) > 0 {\n   \
    \             myStack = myStack[:len(myStack)-1]\n            } else {\n     \
    \           // If the stack is empty, return false\n                return false\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(myStack) == 0 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpub1qdcrs_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpub1qdcrs_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpub1qdcrs_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpub1qdcrs_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, bracket\
    \ := range myString {\n        // If the bracket is an opening bracket, push it\
    \ to the stack\n        if string(bracket) == \"[\" {\n            stack = append(stack,\
    \ string(bracket))\n        } else {\n            // If the bracket is a closing\
    \ bracket, pop the last bracket from the stack\n            // If the stack is\
    \ empty, return false\n            if len(stack) == 0 {\n                return\
    \ false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmplck3edk4_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmplck3edk4_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmplck3edk4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmplck3edk4_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, r :=\
    \ range myString {\n        if r == '[' {\n            stack = append(stack, r)\n\
    \        } else if r == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpexn3imj1_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpexn3imj1_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpexn3imj1_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpexn3imj1_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpxy09bcys_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpxy09bcys_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpxy09bcys_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpxy09bcys_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            if len(stack) > 0 {\n     \
    \           stack = stack[:len(stack)-1]\n            } else {\n             \
    \   // If the stack is empty, return false\n                return false\n   \
    \         }\n        }\n    }\n    // If the stack is empty, return true\n   \
    \ if len(stack) == 0 {\n        return true\n    }\n    // If the stack is not\
    \ empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp0301b8_b_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp0301b8_b_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp0301b8_b_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp0301b8_b_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it onto\
    \ the stack\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else {\n            // If the character is a closing bracket, pop\
    \ the top item off the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\
    \ else {\n                stack = stack[:len(stack)-1]\n            }\n      \
    \  }\n    }\n    // If the stack is empty, return true\n    if len(stack) == 0\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc\
    \ TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpalid0g9d_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpalid0g9d_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpalid0g9d_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpalid0g9d_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it onto the stack\n        if char == '[' {\n            stack = append(stack,\
    \ string(char))\n        } else {\n            // If the character is a closing\
    \ bracket, pop the top of the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpk1auhm89_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpk1auhm89_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpk1auhm89_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpk1auhm89_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    stack := make([]string,\
    \ 0)\n    // Iterate through the string\n    for _, char := range myString {\n\
    \        // If the character is an opening bracket, push it to the stack\n   \
    \     if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ {\n            // If the character is a closing bracket, pop the stack\n   \
    \         if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    } else {\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpm4hnpalg_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpm4hnpalg_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpm4hnpalg_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpm4hnpalg_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last bracket from the stack\n            if len(stack) > 0 {\n     \
    \           stack = stack[:len(stack)-1]\n            } else {\n             \
    \   // If the stack is empty, return false\n                return false\n   \
    \         }\n        }\n    }\n    // If the stack is empty, return true\n   \
    \ if len(stack) == 0 {\n        return true\n    }\n    // Otherwise, return false\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp1imj6dba_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp1imj6dba_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp1imj6dba_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp1imj6dba_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpev2f5qk1_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpev2f5qk1_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpev2f5qk1_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpev2f5qk1_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Iterate over the string\n    for _, char := range\
    \ myString {\n        // If the character is a bracket, push it to the stack\n\
    \        if char == '[' || char == ']' {\n            stack = append(stack, string(char))\n\
    \        }\n    }\n    // If the stack is empty, return false\n    if len(stack)\
    \ == 0 {\n        return false\n    }\n    // Iterate over the stack\n    for\
    \ i := 0; i < len(stack); i++ {\n        // If the current character is an opening\
    \ bracket and the next character is a closing bracket, return true\n        if\
    \ stack[i] == \"[\" && stack[i+1] == \"]\" {\n            return true\n      \
    \  }\n    }\n    // If no brackets are nested, return false\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 8 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_nested(...)\n\t/tmp/tmpp_fyjiet_test.go:28\n\
    command-line-arguments_test.TestIs_Nested(0x0?)\n\t/tmp/tmpp_fyjiet_test.go:55\
    \ +0x2125\ntesting.tRunner(0xc0001a0340, 0x529f98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it onto the stack\n        if string(char) == \"[\" {\n            stack\
    \ = append(stack, string(char))\n        } else {\n            // If the character\
    \ is a closing bracket, pop the last item off the stack\n            if len(stack)\
    \ > 0 {\n                stack = stack[:len(stack)-1]\n            } else {\n\
    \                // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n    // If the stack is empty, return\
    \ true\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfmbb5jrn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfmbb5jrn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfmbb5jrn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfmbb5jrn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []rune\n    // Iterate through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, char)\n \
    \       } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp17ihm6_3_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp17ihm6_3_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp17ihm6_3_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp17ihm6_3_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '(' {\n            stack = append(stack,\
    \ char)\n        } else if char == ')' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmpzo65fgd5_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmpzo65fgd5_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmpzo65fgd5_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmpzo65fgd5_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmpzo65fgd5_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmpzo65fgd5_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__11\
    \ (0.00s)\n        tmpzo65fgd5_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__12 (0.00s)\n        tmpzo65fgd5_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__13\
    \ (0.00s)\n        tmpzo65fgd5_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Iterate over the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it onto\
    \ the stack\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else {\n            // If the character is a closing bracket, pop\
    \ the last element off the stack\n            if len(stack) > 0 {\n          \
    \      stack = stack[:len(stack)-1]\n            } else {\n                //\
    \ If the stack is empty, the brackets are not nested\n                return false\n\
    \            }\n        }\n    }\n    // If the stack is empty, the brackets are\
    \ nested\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n\
    \  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp51z17zdp_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp51z17zdp_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp51z17zdp_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp51z17zdp_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == '[' {\n            stack\
    \ = append(stack, myString[i])\n        } else if myString[i] == ']' {\n     \
    \       if len(stack) == 0 {\n                return false\n            }\n  \
    \          stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack)\
    \ == 0\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj1s15u8_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj1s15u8_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj1s15u8_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj1s15u8_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]rune, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            stack = stack[:len(stack)-1]\n\
    \            // If the stack is empty, return false\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x514620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_nested(...)\n\t/tmp/tmppk8cpgkx_test.go:21\n\
    command-line-arguments_test.TestIs_Nested(0xc0001a01a0?)\n\t/tmp/tmppk8cpgkx_test.go:56\
    \ +0x1aa7\ntesting.tRunner(0xc0001a01a0, 0x529f98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, c)\n\
    \        } else if c == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp72g11y20_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp72g11y20_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, v :=\
    \ range myString {\n        if v == '[' {\n            stack = append(stack, v)\n\
    \        } else if v == ']' {\n            if len(stack) == 0 {\n            \
    \    return false\n            }\n            stack = stack[:len(stack)-1]\n \
    \       }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpsh0pq33y_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpsh0pq33y_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpsh0pq33y_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpsh0pq33y_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]rune, 0)\n    // Iterate through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp96fot2p5_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp96fot2p5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp96fot2p5_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp96fot2p5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    if len(myString) == 0 {\n        return\
    \ false\n    }\n    if len(myString) == 1 {\n        return false\n    }\n   \
    \ var stack []string\n    for _, char := range myString {\n        if string(char)\
    \ == \"[\" {\n            stack = append(stack, string(char))\n        } else\
    \ {\n            if len(stack) == 0 {\n                return false\n        \
    \    }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp7tux78ou_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp7tux78ou_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp7tux78ou_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to keep track of\
    \ the brackets\n    stack := make([]string, 0)\n    // Iterate through the string\n\
    \    for _, char := range myString {\n        // If the character is an opening\
    \ bracket, add it to the stack\n        if char == '[' {\n            stack =\
    \ append(stack, \"[\")\n        } else {\n            // If the character is a\
    \ closing bracket, pop the last element of the stack\n            // If the stack\
    \ is empty, return false\n            if len(stack) == 0 {\n                return\
    \ false\n            }\n            stack = stack[:len(stack)-1]\n        }\n\
    \    }\n    // If the stack is empty, return true\n    if len(stack) == 0 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp2rzr3g0o_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp2rzr3g0o_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp2rzr3g0o_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp2rzr3g0o_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // create a stack to store the brackets\n\
    \    var stack []string\n    // iterate through the string\n    for _, char :=\
    \ range myString {\n        // if the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // if the character is a closing bracket,\
    \ pop the last element from the stack\n            // if the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ if the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpx16q82mm_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpx16q82mm_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpx16q82mm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpx16q82mm_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if string(char) == \"[\" {\n            stack = append(stack,\
    \ string(char))\n        } else {\n            // If the character is a closing\
    \ bracket, pop the last element from the stack\n            if len(stack) > 0\
    \ {\n                stack = stack[:len(stack)-1]\n            } else {\n    \
    \            // If the stack is empty, return false\n                return false\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    }\n    // If the stack is\
    \ not empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpjq3uir4__test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpjq3uir4__test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpjq3uir4__test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpjq3uir4__test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it onto\
    \ the stack\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else {\n            // If the character is a closing bracket, pop\
    \ the last element off the stack\n            stack = stack[:len(stack)-1]\n \
    \           // If the stack is empty, return true\n            if len(stack) ==\
    \ 0 {\n                return true\n            }\n        }\n    }\n    // If\
    \ the stack is not empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x514620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_nested(...)\n\t/tmp/tmpa6ip8sid_test.go:21\n\
    command-line-arguments_test.TestIs_Nested(0x0?)\n\t/tmp/tmpa6ip8sid_test.go:52\
    \ +0x1f08\ntesting.tRunner(0xc000192680, 0x529f98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, add\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ check if the stack is empty\n            if len(stack) == 0 {\n            \
    \    // If the stack is empty, return false\n                return false\n  \
    \          } else {\n                // If the stack is not empty, pop the last\
    \ element\n                stack = stack[:len(stack)-1]\n            }\n     \
    \   }\n    }\n    // If the stack is empty, return true\n    if len(stack) ==\
    \ 0 {\n        return true\n    } else {\n        // If the stack is not empty,\
    \ return false\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp30d0pt_x_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp30d0pt_x_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp30d0pt_x_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp30d0pt_x_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp10mad9ix_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp10mad9ix_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp10mad9ix_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp10mad9ix_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            if len(stack) > 0 {\n             \
    \   stack = stack[:len(stack)-1]\n            } else {\n                // If\
    \ the stack is empty, return false\n                return false\n           \
    \ }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp50p99tat_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp50p99tat_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp50p99tat_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp50p99tat_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to keep track of\
    \ the brackets\n    stack := make([]string, 0)\n    // Loop through the string\n\
    \    for _, char := range myString {\n        // If the character is an opening\
    \ bracket, push it onto the stack\n        if char == '[' {\n            stack\
    \ = append(stack, \"[\")\n        } else {\n            // If the character is\
    \ a closing bracket, pop the last element off the stack\n            // If the\
    \ stack is empty, return false\n            if len(stack) == 0 {\n           \
    \     return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        return false\n\
    \    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp3b52i_t4_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp3b52i_t4_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp3b52i_t4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp3b52i_t4_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    myStack := make([]string, 0)\n    // Loop through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it to the stack\n        if string(char) == \"[\" {\n            myStack\
    \ = append(myStack, string(char))\n        } else {\n            // If the character\
    \ is a closing bracket, pop the last element from the stack\n            // If\
    \ the stack is empty, return false\n            if len(myStack) == 0 {\n     \
    \           return false\n            } else {\n                myStack = myStack[:len(myStack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(myStack) == 0 {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmps80cs4e3_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmps80cs4e3_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmps80cs4e3_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmps80cs4e3_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    var myStack\
    \ []string\n    // Iterate through the string\n    for _, char := range myString\
    \ {\n        // If the character is an opening bracket, push it to the stack\n\
    \        if char == '[' {\n            myStack = append(myStack, \"[\")\n    \
    \    } else {\n            // If the character is a closing bracket, pop the stack\n\
    \            if len(myStack) > 0 {\n                myStack = myStack[:len(myStack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    return len(myStack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp021qa1a4_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp021qa1a4_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp021qa1a4_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp021qa1a4_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the opening\
    \ brackets\n    stack := make([]string, 0)\n    // Loop through the string\n \
    \   for _, char := range myString {\n        // If the character is an opening\
    \ bracket, add it to the stack\n        if char == '[' {\n            stack =\
    \ append(stack, \"[\")\n        } else {\n            // If the character is a\
    \ closing bracket, check if the stack is empty\n            if len(stack) == 0\
    \ {\n                // If the stack is empty, return false\n                return\
    \ false\n            } else {\n                // If the stack is not empty, pop\
    \ the last element from the stack\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    // If the stack is empty, return true\n\
    \    if len(stack) == 0 {\n        return true\n    } else {\n        // If the\
    \ stack is not empty, return false\n        return false\n    }\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpbq_8sfx5_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpbq_8sfx5_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpbq_8sfx5_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpbq_8sfx5_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the opening\
    \ brackets\n    stack := make([]string, 0)\n    // Loop through the string\n \
    \   for _, char := range myString {\n        // If the character is an opening\
    \ bracket, push it to the stack\n        if char == '[' {\n            stack =\
    \ append(stack, \"[\")\n        } else {\n            // If the character is a\
    \ closing bracket, pop the last element from the stack\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    // Otherwise, return false\n    return\
    \ false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x514620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_nested(...)\n\t/tmp/tmpi4czu1j0_test.go:21\n\
    command-line-arguments_test.TestIs_Nested(0x0?)\n\t/tmp/tmpi4czu1j0_test.go:40\
    \ +0x1cb4\ntesting.tRunner(0xc000112680, 0x529f98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    myStack := make([]string, 0)\n    // Loop through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it onto the stack\n        if char == '[' {\n            myStack = append(myStack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last item off the stack\n            if len(myStack) > 0 {\n       \
    \         myStack = myStack[:len(myStack)-1]\n            } else {\n         \
    \       // If the stack is empty, there is no opening bracket to match the closing\
    \ bracket\n                return false\n            }\n        }\n    }\n   \
    \ // If the stack is empty, there is a valid subsequence of brackets where at\
    \ least one bracket in the subsequence is nested\n    return len(myStack) == 0\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp1pyijufd_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp1pyijufd_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp1pyijufd_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp1pyijufd_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is a bracket, push it\
    \ to the stack\n        if char == '[' || char == ']' {\n            stack = append(stack,\
    \ string(char))\n        }\n    }\n    // Iterate through the stack\n    for i\
    \ := 0; i < len(stack); i++ {\n        // If the current bracket is a closing\
    \ bracket, check if the previous bracket is an opening bracket\n        if stack[i]\
    \ == \"]\" {\n            if stack[i-1] == \"[\" {\n                // If it is,\
    \ return true\n                return true\n            }\n        }\n    }\n\
    \    // If the function has not returned true yet, return false\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x515620, 0xc000166000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x515620, 0xc000166000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_nested(...)\n\t/tmp/tmpxobpfie1_test.go:25\n\
    command-line-arguments_test.TestIs_Nested(0xc000103380?)\n\t/tmp/tmpxobpfie1_test.go:55\
    \ +0x2907\ntesting.tRunner(0xc000103380, 0x52af98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    var stack []string\n\
    \    // Loop through the string\n    for _, char := range myString {\n       \
    \ // If the character is an opening bracket, push it onto the stack\n        if\
    \ string(char) == \"[\" {\n            stack = append(stack, string(char))\n \
    \       } else {\n            // If the character is a closing bracket, pop the\
    \ top of the stack\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, then there is\
    \ no opening bracket to match the closing bracket\n                return false\n\
    \            }\n        }\n    }\n    // If the stack is empty, then there is\
    \ at least one nested bracket\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpbii1ff74_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpbii1ff74_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpbii1ff74_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpbii1ff74_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []byte\n    for i := 0;\
    \ i < len(myString); i++ {\n        if myString[i] == '(' || myString[i] == '['\
    \ {\n            stack = append(stack, myString[i])\n        } else {\n      \
    \      if len(stack) == 0 {\n                return false\n            }\n   \
    \         if myString[i] == ')' && stack[len(stack)-1] != '(' {\n            \
    \    return false\n            }\n            if myString[i] == ']' && stack[len(stack)-1]\
    \ != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpp4n8stxu_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpp4n8stxu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpp4n8stxu_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpp4n8stxu_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            if len(stack) > 0 {\n     \
    \           stack = stack[:len(stack)-1]\n            } else {\n             \
    \   // If the stack is empty, return false\n                return false\n   \
    \         }\n        }\n    }\n    // If the stack is empty, return true\n   \
    \ if len(stack) == 0 {\n        return true\n    }\n    // If the stack is not\
    \ empty, return false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpc3flto43_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpc3flto43_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpc3flto43_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpc3flto43_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last item from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp4_1u65n7_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp4_1u65n7_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp4_1u65n7_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp4_1u65n7_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to keep track of\
    \ the brackets\n    stack := make([]string, 0)\n    // Iterate through the string\n\
    \    for _, char := range myString {\n        // If the character is an opening\
    \ bracket, push it to the stack\n        if string(char) == \"[\" {\n        \
    \    stack = append(stack, string(char))\n        } else {\n            // If\
    \ the character is a closing bracket, pop the last element from the stack\n  \
    \          if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    // If the stack is not empty, return false\n    return false\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpste_nwdw_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpste_nwdw_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpste_nwdw_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpste_nwdw_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var myStack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            myStack = append(myStack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(myStack) == 0 {\n\
    \                return false\n            } else {\n                myStack =\
    \ myStack[:len(myStack)-1]\n            }\n        }\n    }\n    if len(myStack)\
    \ == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmptwxutpo0_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmptwxutpo0_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmptwxutpo0_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmptwxutpo0_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '(' {\n            stack = append(stack,\
    \ \"(\")\n        } else if char == ')' {\n            if len(stack) == 0 {\n\
    \                return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__7\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__8 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__11\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__12 (0.00s)\n        tmpi2nymrcb_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__13\
    \ (0.00s)\n        tmpi2nymrcb_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var openBrackets int = 0\n    var\
    \ closedBrackets int = 0\n    for _, char := range myString {\n        if char\
    \ == '[' {\n            openBrackets++\n        } else if char == ']' {\n    \
    \        closedBrackets++\n        }\n    }\n    if openBrackets == closedBrackets\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpumuh7cz9_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpumuh7cz9_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpumuh7cz9_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpumuh7cz9_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074470
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Iterate over the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvjtm5e5e_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvjtm5e5e_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvjtm5e5e_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvjtm5e5e_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it onto\
    \ the stack\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else {\n            // If the character is a closing bracket, pop\
    \ the last element off the stack\n            if len(stack) > 0 {\n          \
    \      stack = stack[:len(stack)-1]\n            } else {\n                //\
    \ If the stack is empty, return false\n                return false\n        \
    \    }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmphv56rm52_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmphv56rm52_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmphv56rm52_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmphv56rm52_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, c :=\
    \ range myString {\n        if c == '[' {\n            stack = append(stack, \"\
    [\")\n        } else if c == ']' {\n            if len(stack) == 0 {\n       \
    \         return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel0wuvkr_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel0wuvkr_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel0wuvkr_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel0wuvkr_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Initialize a stack\n    stack :=\
    \ make([]string, 0)\n    // Iterate through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it onto\
    \ the stack\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else {\n            // If the character is a closing bracket, pop\
    \ a bracket from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\
    \ else {\n                stack = stack[:len(stack)-1]\n            }\n      \
    \  }\n    }\n    // If the stack is empty, return true\n    if len(stack) == 0\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc\
    \ TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpa169hwl3_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpa169hwl3_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpa169hwl3_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpa169hwl3_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp3e73fuxe_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp3e73fuxe_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp3e73fuxe_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp3e73fuxe_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            // If the stack is empty, return false\n\
    \            if len(stack) == 0 {\n                return false\n            }\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    // If the stack\
    \ is empty, return true\n    if len(stack) == 0 {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpugyug5pf_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpugyug5pf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpugyug5pf_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpugyug5pf_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    if len(myString) == 0 {\n        return\
    \ false\n    }\n    if len(myString) % 2 != 0 {\n        return false\n    }\n\
    \    var stack []string\n    for _, char := range myString {\n        if char\
    \ == '[' {\n            stack = append(stack, \"[\")\n        } else if char ==\
    \ ']' {\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if\
    \ len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp4ygxl4x6_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp4ygxl4x6_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp4ygxl4x6_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp_3np_uaw_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp_3np_uaw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp_3np_uaw_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp_3np_uaw_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpel594xnn_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpel594xnn_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ to the stack\n        if char == '[' {\n            stack = append(stack, \"\
    [\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            if len(stack) > 0 {\n     \
    \           stack = stack[:len(stack)-1]\n            } else {\n             \
    \   // If the stack is empty, return false\n                return false\n   \
    \         }\n        }\n    }\n    // If the stack is empty, return true\n   \
    \ if len(stack) == 0 {\n        return true\n    }\n    // Otherwise, return false\n\
    \    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpk9m96krk_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpk9m96krk_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpk9m96krk_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpk9m96krk_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it to the\
    \ stack\n        if char == '[' {\n            stack = append(stack, \"[\")\n\
    \        } else {\n            // If the character is a closing bracket, pop the\
    \ last element from the stack\n            if len(stack) > 0 {\n             \
    \   stack = stack[:len(stack)-1]\n            } else {\n                // If\
    \ the stack is empty, return false\n                return false\n           \
    \ }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    }\n    // If the stack is not empty, return\
    \ false\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp56k1lrx1_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp56k1lrx1_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp56k1lrx1_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp56k1lrx1_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := make([]string, 0)\n    // Loop through the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            stack = stack[:len(stack)-1]\n\
    \            // If the stack is empty, return false\n            if len(stack)\
    \ == 0 {\n                return false\n            }\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    // If the stack is not empty, return false\n    return false\n\
    }\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"\
    [][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected: false\
    \ },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     { actual:\
    \ candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x514620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_nested(...)\n\t/tmp/tmp72bl9163_test.go:21\n\
    command-line-arguments_test.TestIs_Nested(0x0?)\n\t/tmp/tmp72bl9163_test.go:56\
    \ +0x1d67\ntesting.tRunner(0xc000192680, 0x529f98)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if string(char) == \"[\" {\n            stack =\
    \ append(stack, string(char))\n        } else {\n            if len(stack) ==\
    \ 0 {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpcn5o3bq7_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpcn5o3bq7_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpcn5o3bq7_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpcn5o3bq7_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp3e73fuxe_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp3e73fuxe_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp3e73fuxe_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp3e73fuxe_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack\n    stack := make([]string,\
    \ 0)\n    // Iterate through the string\n    for _, char := range myString {\n\
    \        // If the character is an opening bracket, push it to the stack\n   \
    \     if char == '[' {\n            stack = append(stack, \"[\")\n        } else\
    \ {\n            // If the character is a closing bracket, pop the last element\
    \ from the stack\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    // If the stack is not empty, return false\n    return false\n}\n\n\
    func TestIs_Nested(t *testing.T) {\n  candidate := is_nested\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"\
    []]]]]]][[[[[]\"), expected: false },\n     { actual: candidate(\"[][]\"), expected:\
    \ false },\n     { actual: candidate(\"[]\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"\
    ), expected: false },\n     { actual: candidate(\"[][][[]]\"), expected: true\
    \ },\n     { actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpr78b972w_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpr78b972w_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpr78b972w_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpr78b972w_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    var result\
    \ bool\n    for _, char := range myString {\n        if char == '[' {\n      \
    \      stack = append(stack, \"[\")\n        } else if char == ']' {\n       \
    \     if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n    \
    \        } else {\n                result = false\n                break\n   \
    \         }\n        }\n    }\n    if len(stack) == 0 {\n        result = true\n\
    \    }\n    return result\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__1\
    \ (0.00s)\n        tmphwn1zekq_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__2 (0.00s)\n        tmphwn1zekq_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__3\
    \ (0.00s)\n        tmphwn1zekq_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__5 (0.00s)\n        tmphwn1zekq_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__8\
    \ (0.00s)\n        tmphwn1zekq_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__9 (0.00s)\n        tmphwn1zekq_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Nested/test_num__11\
    \ (0.00s)\n        tmphwn1zekq_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__13 (0.00s)\n        tmphwn1zekq_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []rune\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else if char == ']' {\n            if len(stack) == 0 {\n \
    \               return false\n            } else {\n                stack = stack[:len(stack)-1]\n\
    \            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpfj2ho1a6_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpfj2ho1a6_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate through the string\n    for _,\
    \ char := range myString {\n        // If the character is an opening bracket,\
    \ push it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element from the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate\
    \ := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp3e73fuxe_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp3e73fuxe_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp3e73fuxe_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp3e73fuxe_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to store the brackets\n\
    \    stack := make([]string, 0)\n    // Iterate over the string\n    for _, char\
    \ := range myString {\n        // If the character is an opening bracket, push\
    \ it to the stack\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else {\n            // If the character is a closing bracket,\
    \ pop the stack\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n\
    \            } else {\n                // If the stack is empty, return false\n\
    \                return false\n            }\n        }\n    }\n    // If the\
    \ stack is empty, return true\n    if len(stack) == 0 {\n        return true\n\
    \    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpv80plcnf_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpv80plcnf_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpv80plcnf_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpv80plcnf_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    var stack []string\n    // Loop through the string\n    for _, char := range\
    \ myString {\n        // If the character is an opening bracket, push it onto\
    \ the stack\n        if char == '[' {\n            stack = append(stack, \"[\"\
    )\n        } else {\n            // If the character is a closing bracket, pop\
    \ the last bracket off the stack\n            if len(stack) > 0 {\n          \
    \      stack = stack[:len(stack)-1]\n            } else {\n                //\
    \ If the stack is empty, return false\n                return false\n        \
    \    }\n        }\n    }\n    // If the stack is empty, return true\n    if len(stack)\
    \ == 0 {\n        return true\n    } else {\n        // If the stack is not empty,\
    \ return false\n        return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp8q9lxe_x_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp8q9lxe_x_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp8q9lxe_x_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp8q9lxe_x_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074467
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack to hold the brackets\n\
    \    stack := []rune{}\n    // Iterate through the string\n    for _, char :=\
    \ range myString {\n        // If the character is an opening bracket, push it\
    \ onto the stack\n        if char == '[' {\n            stack = append(stack,\
    \ char)\n        } else {\n            // If the character is a closing bracket,\
    \ pop the last element off the stack\n            // If the stack is empty, return\
    \ false\n            if len(stack) == 0 {\n                return false\n    \
    \        }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    //\
    \ If the stack is empty, return true\n    if len(stack) == 0 {\n        return\
    \ true\n    }\n    // Otherwise, return false\n    return false\n}\n\nfunc TestIs_Nested(t\
    \ *testing.T) {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"[[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"\
    ), expected: false },\n     { actual: candidate(\"[][]\"), expected: false },\n\
    \     { actual: candidate(\"[]\"), expected: false },\n     { actual: candidate(\"\
    [[[[]]]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected:\
    \ false },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     {\
    \ actual: candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"\
    []]\"), expected: false },\n     { actual: candidate(\"[[]][[\"), expected: true\
    \ },\n     { actual: candidate(\"[[][]]\"), expected: true },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"[[[[[[[[\"),\
    \ expected: false },\n     { actual: candidate(\"]]]]]]]]\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp9g2a3_of_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp9g2a3_of_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp9g2a3_of_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp9g2a3_of_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074471
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    var stack []string\n    for _, char\
    \ := range myString {\n        if char == '[' {\n            stack = append(stack,\
    \ \"[\")\n        } else if char == ']' {\n            if len(stack) == 0 {\n\
    \                return false\n            }\n            stack = stack[:len(stack)-1]\n\
    \        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestIs_Nested(t *testing.T)\
    \ {\n  candidate := is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    [[]]\"), expected: true },\n     { actual: candidate(\"[]]]]]]][[[[[]\"), expected:\
    \ false },\n     { actual: candidate(\"[][]\"), expected: false },\n     { actual:\
    \ candidate(\"[]\"), expected: false },\n     { actual: candidate(\"[[[[]]]]\"\
    ), expected: true },\n     { actual: candidate(\"[]]]]]]]]]]\"), expected: false\
    \ },\n     { actual: candidate(\"[][][[]]\"), expected: true },\n     { actual:\
    \ candidate(\"[[]\"), expected: false },\n     { actual: candidate(\"[]]\"), expected:\
    \ false },\n     { actual: candidate(\"[[]][[\"), expected: true },\n     { actual:\
    \ candidate(\"[[][]]\"), expected: true },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[[[[[\"), expected: false },\n     {\
    \ actual: candidate(\"]]]]]]]]\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmpvpo2c07p_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmpvpo2c07p_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074465
- exit_code: 1
  program: "package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function that takes a string as input which contains only square brackets.\n\
    // The function should return True if and only if there is a valid subsequence\
    \ of brackets \n// where at least one bracket in the subsequence is nested.\n\
    func is_nested(myString string) bool {\n    // Create a stack that will hold the\
    \ brackets\n    var myStack []string\n\n    // Iterate through the string\n  \
    \  for _, char := range myString {\n        // If the character is an opening\
    \ bracket, push it to the stack\n        if char == '[' {\n            myStack\
    \ = append(myStack, \"[\")\n        } else {\n            // If the character\
    \ is a closing bracket, pop the last element from the stack\n            if len(myStack)\
    \ > 0 {\n                myStack = myStack[:len(myStack)-1]\n            } else\
    \ {\n                // If the stack is empty, return false\n                return\
    \ false\n            }\n        }\n    }\n\n    // If the stack is empty, return\
    \ true\n    if len(myStack) == 0 {\n        return true\n    } else {\n      \
    \  return false\n    }\n}\n\nfunc TestIs_Nested(t *testing.T) {\n  candidate :=\
    \ is_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"[[]]\"), expected: true },\n\
    \     { actual: candidate(\"[]]]]]]][[[[[]\"), expected: false },\n     { actual:\
    \ candidate(\"[][]\"), expected: false },\n     { actual: candidate(\"[]\"), expected:\
    \ false },\n     { actual: candidate(\"[[[[]]]]\"), expected: true },\n     {\
    \ actual: candidate(\"[]]]]]]]]]]\"), expected: false },\n     { actual: candidate(\"\
    [][][[]]\"), expected: true },\n     { actual: candidate(\"[[]\"), expected: false\
    \ },\n     { actual: candidate(\"[]]\"), expected: false },\n     { actual: candidate(\"\
    [[]][[\"), expected: true },\n     { actual: candidate(\"[[][]]\"), expected:\
    \ true },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"[[[[[[[[\"), expected: false },\n     { actual: candidate(\"]]]]]]]]\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Nested (0.00s)\n    --- FAIL: TestIs_Nested/test_num__2\
    \ (0.00s)\n        tmp6yrsdlf7_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Nested/test_num__3 (0.00s)\n        tmp6yrsdlf7_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Nested/test_num__9\
    \ (0.00s)\n        tmp6yrsdlf7_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Nested/test_num__11 (0.00s)\n        tmp6yrsdlf7_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074471
